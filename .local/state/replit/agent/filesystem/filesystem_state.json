{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"playwright.config.ts":{"content":"import { defineConfig, devices } from '@playwright/test';\n\n/**\n * @see https://playwright.dev/docs/test-configuration\n */\nexport default defineConfig({\n  testDir: './tests',\n  /* Run tests in files in parallel */\n  fullyParallel: true,\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\n  forbidOnly: !!process.env.CI,\n  /* Retry on CI only */\n  retries: process.env.CI ? 2 : 0,\n  /* Opt out of parallel tests on CI. */\n  workers: process.env.CI ? 1 : undefined,\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\n  reporter: 'html',\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n  use: {\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    baseURL: 'http://localhost:5000',\n\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n    trace: 'on-first-retry',\n  },\n\n  /* Configure projects for major browsers */\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n\n    /* Test against mobile viewports. */\n    {\n      name: 'Mobile Chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    {\n      name: 'Mobile Safari',\n      use: { ...devices['iPhone 12'] },\n    },\n\n    /* Test against branded browsers. */\n    // {\n    //   name: 'Microsoft Edge',\n    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },\n    // },\n    // {\n    //   name: 'Google Chrome',\n    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },\n    // },\n  ],\n\n  /* Run your local dev server before starting the tests */\n  webServer: {\n    command: 'npm run dev',\n    url: 'http://localhost:5000',\n    reuseExistingServer: !process.env.CI,\n  },\n});","size_bytes":1924},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nReme is a comprehensive web-based IDE platform designed as a better alternative to Replit. It features an intelligent AI coding agent with strict scope management, comprehensive project memory, and seamless Git integration. The platform enables developers to work collaboratively with an AI agent that remembers project context, follows team coding styles, and only makes changes explicitly requested by users. Reme combines the power of modern web development tools with intelligent automation to create a superior coding experience.\n\n## Recent Updates (February 2025)\n- ✅ Implemented comprehensive Chroma DB vector search and embeddings system\n- ✅ Added Playwright visual smoke testing for UI regression detection  \n- ✅ Built intelligent model routing system with local models for cost optimization\n- ✅ Created production-ready project templates gallery with 4 sample templates\n- ✅ Implemented AI memory system with hot/warm/cold memory tiers\n- ✅ Added team collaboration features and role management\n- ✅ Set up PostgreSQL database with full schema migrations\n- ✅ Fixed all navigation routing issues - all pages now functional\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite for fast development and building\n- **UI Library**: Shadcn/ui components built on Radix UI primitives for accessibility and consistency\n- **Styling**: Tailwind CSS with custom GitHub-inspired dark theme and CSS variables for theming\n- **State Management**: React Query (TanStack Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Code Editor**: Monaco Editor with custom GitHub dark theme and TypeScript syntax highlighting\n- **Real-time Communication**: WebSocket client for live agent communication and project updates\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database ORM**: Drizzle ORM for type-safe database operations with PostgreSQL\n- **Real-time**: WebSocket server for bidirectional communication between client and agent\n- **Git Integration**: simple-git library for repository operations (commit, pull, push, branch management)\n- **Code Analysis**: Tree-sitter for AST parsing, symbol extraction, and import graph generation\n- **Storage Layer**: Abstracted storage interface supporting both in-memory and persistent storage\n\n## Agent System\n- **AI Provider**: OpenAI GPT-4o for code generation and analysis with intelligent model routing\n- **Local Models**: Ollama integration with qwen2.5-coder, llama3.2, and codegemma for cost optimization\n- **Model Router**: Automatic task complexity analysis and model selection based on cost/performance\n- **Scope Validation**: MEQ (Minimal Explicit Query) policy enforcement to prevent unauthorized changes\n- **Permission System**: Agent requests explicit approval when changes exceed initial scope\n- **Patch Generation**: Hunk-level diff generation with rationale for each change\n- **Memory Integration**: Context-aware prompting using hot, warm, and cold memory tiers\n\n## Memory Architecture\n- **Hot Memory**: Current session context, recent changes, active files (always in prompt)\n- **Warm Memory**: Keyword/vector searchable notes from recent sessions (30-60 days)\n- **Cold Memory**: Full historical data loaded on-demand for specific session recall\n- **Vector Storage**: Chroma DB for semantic search across all project code and memory notes\n- **Embedding Model**: OpenAI text-embedding-3-small for high-quality vector representations\n- **Storage**: JSON-based memory notes with tags, links, and searchable content\n\n## Data Storage\n- **Primary Database**: PostgreSQL with Drizzle ORM for structured data\n- **Vector Database**: Chroma DB for semantic search and embeddings\n- **Schema Design**: \n  - Projects with settings and style profiles\n  - Sessions with scoped changes and approval status\n  - Memory notes with tags and cross-references\n  - Project templates with files and metadata\n  - Team collaboration and role management\n  - Visual test runs and screenshots\n  - File changes with hunk-level tracking\n  - Git state management\n- **Memory Search**: Vector-based semantic search with relevance scoring\n\n## Development Workflow\n- **Monorepo Structure**: Client and server code in same repository with shared schema\n- **Build System**: Vite for frontend, esbuild for backend production builds\n- **Development**: Hot reload with Vite middleware integration\n- **Type Safety**: Shared TypeScript types between client and server via `@shared` namespace\n\n## Security & Permissions\n- **Strict Scope**: Agent modifications limited to explicitly requested files and symbols\n- **Approval Gates**: Permission requests for scope expansion with detailed explanations\n- **Change Tracking**: All modifications tracked at hunk level with approval status\n- **Revert Capability**: Full session revert functionality for quick rollbacks\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Query for state management\n- **Build Tools**: Vite, esbuild, TypeScript compiler\n- **Node.js Backend**: Express.js, WebSocket server implementation\n\n## Database & ORM\n- **Drizzle ORM**: Type-safe database operations and migrations\n- **PostgreSQL**: Primary database via @neondatabase/serverless\n- **Database Migrations**: Drizzle Kit for schema management\n\n## AI & Language Models\n- **OpenAI API**: GPT-4o and GPT-4o-mini for code generation and analysis\n- **Ollama Integration**: Local models (qwen2.5-coder, llama3.2, codegemma) for cost optimization\n- **Chroma DB**: Vector database for semantic search and embeddings\n- **Model Routing**: Intelligent task-to-model mapping based on complexity and cost\n- **Tree-sitter**: Code parsing and AST generation for TypeScript/JavaScript\n\n## Git Integration\n- **simple-git**: Git operations (commit, pull, push, branch management)\n- **Diff Processing**: jsdiff for patch generation and hunk processing\n\n## UI & Styling\n- **Shadcn/ui**: Component library built on Radix UI primitives\n- **Radix UI**: Accessible component primitives (dialogs, dropdowns, etc.)\n- **Tailwind CSS**: Utility-first CSS framework\n- **Monaco Editor**: VS Code editor for in-browser code editing\n- **Lucide React**: Icon library for consistent iconography\n\n## Development & Tooling\n- **Replit Integration**: Development environment optimizations and error overlays\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n- **React Hook Form**: Form state management with Zod validation\n- **Playwright**: Visual regression testing and UI automation\n- **Sharp**: Image processing for template previews and screenshots\n\n## Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **nanoid**: Unique ID generation\n- **clsx & tailwind-merge**: Conditional CSS class management\n- **wouter**: Lightweight routing solution","size_bytes":6972},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // GitHub theme colors\n        \"github-bg\": \"var(--github-bg)\",\n        \"github-surface\": \"var(--github-surface)\",\n        \"github-border\": \"var(--github-border)\",\n        \"github-text\": \"var(--github-text)\",\n        \"github-text-secondary\": \"var(--github-text-secondary)\",\n        \"github-primary\": \"var(--github-primary)\",\n        \"github-success\": \"var(--github-success)\",\n        \"github-warning\": \"var(--github-warning)\",\n        \"github-error\": \"var(--github-error)\",\n        \"github-accent\": \"var(--github-accent)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-ui)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"var(--font-code)\", \"JetBrains Mono\", \"Monaco\", \"Consolas\", \"monospace\"],\n        ui: [\"var(--font-ui)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        code: [\"var(--font-code)\", \"JetBrains Mono\", \"Monaco\", \"Consolas\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-in-from-right\": {\n          \"0%\": {\n            transform: \"translateX(100%)\",\n          },\n          \"100%\": {\n            transform: \"translateX(0)\",\n          },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n        \"spin-slow\": {\n          \"0%\": {\n            transform: \"rotate(0deg)\",\n          },\n          \"100%\": {\n            transform: \"rotate(360deg)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-out\",\n        \"slide-in-from-right\": \"slide-in-from-right 0.3s ease-out\",\n        \"pulse-slow\": \"pulse-slow 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"spin-slow\": \"spin-slow 2s linear infinite\",\n      },\n      spacing: {\n        \"18\": \"4.5rem\",\n        \"88\": \"22rem\",\n        \"128\": \"32rem\",\n      },\n      maxWidth: {\n        \"8xl\": \"88rem\",\n        \"9xl\": \"96rem\",\n      },\n      minHeight: {\n        \"screen-75\": \"75vh\",\n        \"screen-80\": \"80vh\",\n      },\n      zIndex: {\n        \"60\": \"60\",\n        \"70\": \"70\",\n        \"80\": \"80\",\n        \"90\": \"90\",\n        \"100\": \"100\",\n      },\n      backdropBlur: {\n        xs: \"2px\",\n      },\n      boxShadow: {\n        \"github\": \"0 8px 24px rgba(140, 149, 159, 0.2)\",\n        \"github-lg\": \"0 12px 28px rgba(140, 149, 159, 0.3)\",\n      },\n      transitionProperty: {\n        \"spacing\": \"margin, padding\",\n        \"layout\": \"width, height, margin, padding\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    // Custom plugin for GitHub theme utilities\n    function({ addUtilities }: { addUtilities: any }) {\n      addUtilities({\n        '.scrollbar-github': {\n          'scrollbar-width': 'thin',\n          'scrollbar-color': 'var(--github-border) var(--github-bg)',\n        },\n        '.scrollbar-github::-webkit-scrollbar': {\n          width: '8px',\n          height: '8px',\n        },\n        '.scrollbar-github::-webkit-scrollbar-track': {\n          background: 'var(--github-bg)',\n        },\n        '.scrollbar-github::-webkit-scrollbar-thumb': {\n          background: 'var(--github-border)',\n          'border-radius': '4px',\n        },\n        '.scrollbar-github::-webkit-scrollbar-thumb:hover': {\n          background: 'var(--github-text-secondary)',\n        },\n        '.text-shadow-sm': {\n          'text-shadow': '0 1px 2px rgba(0, 0, 0, 0.05)',\n        },\n        '.text-shadow': {\n          'text-shadow': '0 1px 3px rgba(0, 0, 0, 0.1)',\n        },\n        '.text-shadow-lg': {\n          'text-shadow': '0 2px 4px rgba(0, 0, 0, 0.1)',\n        },\n      })\n    }\n  ],\n} satisfies Config;\n","size_bytes":6322},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/setup-services.sh":{"content":"#!/bin/bash\n\necho \"🚀 Setting up Reme IDE services...\"\n\n# Create required directories\nmkdir -p screenshots/baselines\nmkdir -p screenshots/test-results\nmkdir -p logs\n\n# Start ChromaDB (in background if not already running)\nif ! pgrep -f \"chroma\" > /dev/null; then\n    echo \"📊 Starting ChromaDB...\"\n    # ChromaDB will be started by the application when needed\n    echo \"ChromaDB configured for startup\"\nelse\n    echo \"✅ ChromaDB already running\"\nfi\n\n# Check if Ollama is available (optional)\nif command -v ollama &> /dev/null; then\n    echo \"🤖 Ollama detected, pulling recommended models...\"\n    ollama pull qwen2.5-coder:7b &\n    ollama pull llama3.2:3b &\n    ollama pull codegemma:7b &\nelse\n    echo \"ℹ️  Ollama not found - will use OpenAI models only\"\nfi\n\n# Install Playwright browsers\necho \"🎭 Installing Playwright browsers...\"\nnpx playwright install chromium firefox webkit\n\n# Run database migrations\necho \"📚 Setting up database...\"\nnpm run db:push\n\necho \"✅ Services setup complete!\"\necho \"\"\necho \"🎯 To get started:\"\necho \"1. Run: npm run dev (starts the development server)\"\necho \"2. Run: npm run test:visual (runs Playwright visual tests)\"\necho \"3. Access: http://localhost:5000\"\necho \"\"\necho \"📝 Required environment variables:\"\necho \"- OPENAI_API_KEY (for AI features)\"\necho \"- CHROMA_HOST (optional, defaults to localhost:8000)\"\necho \"- OLLAMA_HOST (optional, defaults to localhost:11434)\"","size_bytes":1425},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes-backup.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertProjectSchema, insertSessionSchema, insertMemoryNoteSchema } from \"@shared/schema\";\nimport { gitService } from \"./services/git\";\nimport { agentService } from \"./services/agent\";\nimport { memoryService } from \"./services/memory\";\nimport { indexerService } from \"./services/indexer\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time communication\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const clients = new Map<string, WebSocket>();\n\n  wss.on('connection', (ws: WebSocket) => {\n    const clientId = Math.random().toString(36).substring(7);\n    clients.set(clientId, ws);\n    \n    ws.on('close', () => {\n      clients.delete(clientId);\n    });\n\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        // Handle different WebSocket message types\n        switch (message.type) {\n          case 'join_project':\n            // Join project-specific room for updates\n            break;\n          case 'agent_message':\n            // Handle agent communication\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n  });\n\n  // Broadcast to all connected clients\n  const broadcast = (data: any) => {\n    const message = JSON.stringify(data);\n    clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(message);\n      }\n    });\n  };\n\n  // Project routes\n  app.get('/api/projects', async (req, res) => {\n    try {\n      const projects = await storage.listProjects();\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch projects' });\n    }\n  });\n\n  app.post('/api/projects', async (req, res) => {\n    try {\n      const projectData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(projectData);\n      \n      // Initialize git state\n      await storage.updateGitState(project.id, {\n        branch: project.defaultBranch || 'main',\n        ahead: 0,\n        behind: 0,\n      });\n\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/projects/:id', async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ error: 'Project not found' });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch project' });\n    }\n  });\n\n  app.post('/api/projects/:id/settings', async (req, res) => {\n    try {\n      const updates = req.body;\n      const project = await storage.updateProject(req.params.id, updates);\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Session routes\n  app.post('/api/sessions', async (req, res) => {\n    try {\n      const sessionData = insertSessionSchema.parse(req.body);\n      const session = await storage.createSession(sessionData);\n      \n      // Process with agent\n      agentService.processSession(session).then((result) => {\n        broadcast({\n          type: 'session.updated',\n          sessionId: session.id,\n          data: result\n        });\n      });\n\n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/sessions/:id', async (req, res) => {\n    try {\n      const session = await storage.getSession(req.params.id);\n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch session' });\n    }\n  });\n\n  app.post('/api/sessions/:id/approve', async (req, res) => {\n    try {\n      const { allow, addFiles, addSymbols } = req.body;\n      const session = await storage.getSession(req.params.id);\n      \n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n\n      if (allow) {\n        // Update session scope and continue processing\n        const updatedScope = {\n          ...session.scopeJson,\n          files: [...(session.scopeJson?.files || []), ...(addFiles || [])],\n          symbols: [...(session.scopeJson?.symbols || []), ...(addSymbols || [])]\n        };\n        \n        await storage.updateSession(req.params.id, { scopeJson: updatedScope });\n        \n        // Continue with agent processing\n        agentService.continueSession(session.id, updatedScope);\n      } else {\n        // Reject and mark session as failed\n        await storage.updateSession(req.params.id, { status: 'failed' });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/sessions/:id/apply', async (req, res) => {\n    try {\n      const { hunks } = req.body;\n      const session = await storage.getSession(req.params.id);\n      \n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n\n      // Apply selected hunks\n      const changes = await storage.getSessionFileChanges(req.params.id);\n      \n      for (const change of changes) {\n        if (hunks && hunks.length > 0) {\n          // Apply only selected hunks\n          const updatedHunks = change.hunks.map(hunk => ({\n            ...hunk,\n            approved: hunks.includes(hunk.id)\n          }));\n          await storage.updateFileChange(change.id, { hunks: updatedHunks });\n        } else {\n          // Apply all hunks\n          const updatedHunks = change.hunks.map(hunk => ({\n            ...hunk,\n            approved: true\n          }));\n          await storage.updateFileChange(change.id, { hunks: updatedHunks, applied: true });\n        }\n      }\n\n      await storage.updateSession(req.params.id, { status: 'completed' });\n      \n      broadcast({\n        type: 'session.finished',\n        sessionId: req.params.id\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/sessions/:id/revert', async (req, res) => {\n    try {\n      const changes = await storage.getSessionFileChanges(req.params.id);\n      \n      for (const change of changes) {\n        await storage.updateFileChange(change.id, { applied: false });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Memory routes\n  app.get('/api/memory/:projectId/search', async (req, res) => {\n    try {\n      const { q } = req.query;\n      const notes = await storage.searchMemoryNotes(req.params.projectId, q as string || '');\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to search memory' });\n    }\n  });\n\n  app.post('/api/memory/:projectId', async (req, res) => {\n    try {\n      const noteData = insertMemoryNoteSchema.parse({\n        ...req.body,\n        projectId: req.params.projectId\n      });\n      const note = await storage.createMemoryNote(noteData);\n      res.json(note);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Git routes\n  app.post('/api/git/:projectId/commit', async (req, res) => {\n    try {\n      const { message, stage } = req.body;\n      const result = await gitService.commit(req.params.projectId, message, stage);\n      \n      broadcast({\n        type: 'git.updated',\n        projectId: req.params.projectId,\n        data: result\n      });\n\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/git/:projectId/pull', async (req, res) => {\n    try {\n      const result = await gitService.pull(req.params.projectId);\n      \n      broadcast({\n        type: 'git.updated',\n        projectId: req.params.projectId,\n        data: result\n      });\n\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/git/:projectId/push', async (req, res) => {\n    try {\n      const result = await gitService.push(req.params.projectId);\n      \n      broadcast({\n        type: 'git.updated',\n        projectId: req.params.projectId,\n        data: result\n      });\n\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/git/:projectId/branch', async (req, res) => {\n    try {\n      const { action, name } = req.body;\n      const result = await gitService.manageBranch(req.params.projectId, action, name);\n      \n      broadcast({\n        type: 'git.updated',\n        projectId: req.params.projectId,\n        data: result\n      });\n\n      res.json(result);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/git/:projectId/status', async (req, res) => {\n    try {\n      const status = await gitService.getStatus(req.params.projectId);\n      res.json(status);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get git status' });\n    }\n  });\n\n  // Project initialization\n  app.post('/api/projects/:id/initialize', async (req, res) => {\n    try {\n      const projectId = req.params.id;\n      const project = await storage.getProject(projectId);\n      \n      if (!project) {\n        return res.status(404).json({ error: 'Project not found' });\n      }\n\n      // Initialize project directory structure\n      await indexerService.initializeProject(projectId, project);\n      \n      res.json({ success: true, message: 'Project initialized successfully' });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to initialize project' });\n    }\n  });\n\n  // File system routes\n  app.get('/api/files/:projectId', async (req, res) => {\n    try {\n      const files = await indexerService.getFileTree(req.params.projectId);\n      res.json(files);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get file tree' });\n    }\n  });\n\n  app.get('/api/files/:projectId/*', async (req, res) => {\n    try {\n      const filePath = req.params[0];\n      const content = await indexerService.getFileContent(req.params.projectId, filePath);\n      res.json({ content });\n    } catch (error) {\n      res.status(404).json({ error: 'File not found' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":10670},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { vectorService } from \"./services/vector\";\nimport { modelRouter } from \"./services/models\";\nimport { CodeAgent } from \"./services/agent\";\nimport { nanoid } from 'nanoid';\n\n// Initialize the code agent\nconst codeAgent = new CodeAgent(storage, modelRouter);\n\n// Mock sample templates for demo\nconst sampleTemplates = [\n  {\n    id: nanoid(),\n    name: \"React TypeScript Starter\",\n    description: \"A modern React application with TypeScript, Tailwind CSS, and essential tooling setup\",\n    category: \"web\",\n    tags: [\"react\", \"typescript\", \"tailwindcss\", \"vite\"],\n    author: \"Reme Team\",\n    downloads: 1247,\n    stars: 89,\n    filesJson: [\n      { path: \"src/App.tsx\", content: \"import React from 'react';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100\\\">\\n      <h1>Hello World</h1>\\n    </div>\\n  );\\n}\\n\\nexport default App;\" },\n      { path: \"src/main.tsx\", content: \"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './App.tsx';\\nimport './index.css';\\n\\nReactDOM.createRoot(document.getElementById('root')!).render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>,\\n);\" },\n      { path: \"package.json\", content: \"{\\n  \\\"name\\\": \\\"react-typescript-starter\\\",\\n  \\\"private\\\": true,\\n  \\\"version\\\": \\\"0.0.0\\\",\\n  \\\"type\\\": \\\"module\\\",\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"vite\\\",\\n    \\\"build\\\": \\\"tsc && vite build\\\",\\n    \\\"preview\\\": \\\"vite preview\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"^18.2.0\\\",\\n    \\\"react-dom\\\": \\\"^18.2.0\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/react\\\": \\\"^18.2.43\\\",\\n    \\\"@types/react-dom\\\": \\\"^18.2.17\\\",\\n    \\\"@vitejs/plugin-react\\\": \\\"^4.2.1\\\",\\n    \\\"autoprefixer\\\": \\\"^10.4.16\\\",\\n    \\\"postcss\\\": \\\"^8.4.32\\\",\\n    \\\"tailwindcss\\\": \\\"^3.4.0\\\",\\n    \\\"typescript\\\": \\\"^5.2.2\\\",\\n    \\\"vite\\\": \\\"^5.0.8\\\"\\n  }\\n}\" }\n    ],\n    dependencies: [\"react\", \"typescript\", \"tailwindcss\", \"vite\"],\n    createdAt: new Date('2024-01-15'),\n    updatedAt: new Date('2024-02-01')\n  },\n  {\n    id: nanoid(),\n    name: \"Express API with TypeScript\",\n    description: \"RESTful API server with Express, TypeScript, and PostgreSQL integration\",\n    category: \"api\",\n    tags: [\"express\", \"typescript\", \"postgresql\", \"api\"],\n    author: \"Reme Team\", \n    downloads: 934,\n    stars: 67,\n    filesJson: [\n      { path: \"src/index.ts\", content: \"import express from 'express';\\nimport cors from 'cors';\\n\\nconst app = express();\\nconst port = process.env.PORT || 3000;\\n\\napp.use(cors());\\napp.use(express.json());\\n\\napp.get('/health', (req, res) => {\\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\\n});\\n\\napp.listen(port, () => {\\n  console.log(`Server running on port ${port}`);\\n});\" },\n      { path: \"package.json\", content: \"{\\n  \\\"name\\\": \\\"express-typescript-api\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"main\\\": \\\"dist/index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"tsx watch src/index.ts\\\",\\n    \\\"build\\\": \\\"tsc\\\",\\n    \\\"start\\\": \\\"node dist/index.js\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"express\\\": \\\"^4.18.2\\\",\\n    \\\"cors\\\": \\\"^2.8.5\\\",\\n    \\\"pg\\\": \\\"^8.11.3\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/express\\\": \\\"^4.17.21\\\",\\n    \\\"@types/cors\\\": \\\"^2.8.17\\\",\\n    \\\"@types/pg\\\": \\\"^8.10.9\\\",\\n    \\\"typescript\\\": \\\"^5.2.2\\\",\\n    \\\"tsx\\\": \\\"^4.6.0\\\"\\n  }\\n}\" }\n    ],\n    dependencies: [\"express\", \"typescript\", \"postgresql\", \"cors\"],\n    createdAt: new Date('2024-01-20'),\n    updatedAt: new Date('2024-01-28')\n  },\n  {\n    id: nanoid(),\n    name: \"Next.js AI Chat App\",\n    description: \"AI-powered chat application with Next.js, OpenAI integration, and real-time messaging\",\n    category: \"ai\",\n    tags: [\"nextjs\", \"openai\", \"websockets\", \"ai\", \"chat\"],\n    author: \"Reme Community\",\n    downloads: 2156,\n    stars: 134,\n    filesJson: [\n      { path: \"app/page.tsx\", content: \"import ChatInterface from './components/ChatInterface';\\n\\nexport default function Home() {\\n  return (\\n    <main className=\\\"flex min-h-screen flex-col items-center justify-between p-24\\\">\\n      <div className=\\\"z-10 max-w-5xl w-full items-center justify-between font-mono text-sm\\\">\\n        <h1 className=\\\"text-4xl font-bold text-center mb-8\\\">AI Chat Assistant</h1>\\n        <ChatInterface />\\n      </div>\\n    </main>\\n  );\\n}\" },\n      { path: \"package.json\", content: \"{\\n  \\\"name\\\": \\\"nextjs-ai-chat\\\",\\n  \\\"version\\\": \\\"0.1.0\\\",\\n  \\\"private\\\": true,\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"next dev\\\",\\n    \\\"build\\\": \\\"next build\\\",\\n    \\\"start\\\": \\\"next start\\\",\\n    \\\"lint\\\": \\\"next lint\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"next\\\": \\\"14.0.4\\\",\\n    \\\"react\\\": \\\"^18\\\",\\n    \\\"react-dom\\\": \\\"^18\\\",\\n    \\\"openai\\\": \\\"^4.20.1\\\",\\n    \\\"ws\\\": \\\"^8.14.2\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"typescript\\\": \\\"^5\\\",\\n    \\\"@types/node\\\": \\\"^20\\\",\\n    \\\"@types/react\\\": \\\"^18\\\",\\n    \\\"@types/react-dom\\\": \\\"^18\\\",\\n    \\\"@types/ws\\\": \\\"^8.5.10\\\"\\n  }\\n}\" }\n    ],\n    dependencies: [\"nextjs\", \"openai\", \"websockets\", \"typescript\"],\n    createdAt: new Date('2024-01-10'),\n    updatedAt: new Date('2024-02-05')\n  },\n  {\n    id: nanoid(),\n    name: \"Vue 3 Dashboard\",\n    description: \"Modern dashboard template with Vue 3, Composition API, and Chart.js visualizations\",\n    category: \"web\",\n    tags: [\"vue\", \"dashboard\", \"chartjs\", \"typescript\"],\n    author: \"Reme Community\",\n    downloads: 756,\n    stars: 45,\n    filesJson: [\n      { path: \"src/App.vue\", content: \"<template>\\n  <div id=\\\"app\\\">\\n    <DashboardLayout>\\n      <router-view />\\n    </DashboardLayout>\\n  </div>\\n</template>\\n\\n<script setup lang=\\\"ts\\\">\\nimport DashboardLayout from './components/DashboardLayout.vue';\\n</script>\" },\n      { path: \"package.json\", content: \"{\\n  \\\"name\\\": \\\"vue3-dashboard\\\",\\n  \\\"version\\\": \\\"0.0.0\\\",\\n  \\\"private\\\": true,\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"vite\\\",\\n    \\\"build\\\": \\\"vue-tsc && vite build\\\",\\n    \\\"preview\\\": \\\"vite preview\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"vue\\\": \\\"^3.3.8\\\",\\n    \\\"vue-router\\\": \\\"^4.2.5\\\",\\n    \\\"chart.js\\\": \\\"^4.4.0\\\",\\n    \\\"vue-chartjs\\\": \\\"^5.2.0\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@vitejs/plugin-vue\\\": \\\"^4.5.0\\\",\\n    \\\"typescript\\\": \\\"^5.2.2\\\",\\n    \\\"vue-tsc\\\": \\\"^1.8.22\\\",\\n    \\\"vite\\\": \\\"^5.0.0\\\"\\n  }\\n}\" }\n    ],\n    dependencies: [\"vue\", \"typescript\", \"chartjs\", \"vite\"],\n    createdAt: new Date('2024-01-25'),\n    updatedAt: new Date('2024-01-30')\n  }\n];\n\nexport function registerRoutes(app: Express): Server {\n  // Projects\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.listProjects();\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ error: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ error: \"Failed to fetch project\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const project = await storage.createProject(req.body);\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error creating project:\", error);\n      res.status(500).json({ error: \"Failed to create project\" });\n    }\n  });\n\n  // Templates\n  app.get(\"/api/templates\", async (req, res) => {\n    try {\n      const { category, search } = req.query;\n      let templates = sampleTemplates;\n\n      if (category && category !== 'all') {\n        templates = templates.filter(t => t.category === category);\n      }\n\n      if (search) {\n        const query = search.toString().toLowerCase();\n        templates = templates.filter(t => \n          t.name.toLowerCase().includes(query) ||\n          t.description.toLowerCase().includes(query) ||\n          t.tags.some(tag => tag.toLowerCase().includes(query))\n        );\n      }\n\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching templates:\", error);\n      res.status(500).json({ error: \"Failed to fetch templates\" });\n    }\n  });\n\n  app.get(\"/api/templates/:id\", async (req, res) => {\n    try {\n      const template = sampleTemplates.find(t => t.id === req.params.id);\n      if (!template) {\n        return res.status(404).json({ error: \"Template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error fetching template:\", error);\n      res.status(500).json({ error: \"Failed to fetch template\" });\n    }\n  });\n\n  app.post(\"/api/templates/:id/create-project\", async (req, res) => {\n    try {\n      const template = sampleTemplates.find(t => t.id === req.params.id);\n      if (!template) {\n        return res.status(404).json({ error: \"Template not found\" });\n      }\n\n      // Create project from template\n      const project = await storage.createProject({\n        name: `${template.name} Project`,\n        repoUrl: null,\n        defaultBranch: \"main\",\n        settingsJson: {\n          strictMode: false,\n          maxLines: 1000,\n          maxFiles: 50,\n          forbiddenGlobs: [\"node_modules/**\", \".git/**\"],\n          styleFreeze: false\n        }\n      });\n\n      // Index the template files in vector DB\n      try {\n        await vectorService.addProjectCode(project.id, \n          template.filesJson.map(file => ({\n            path: file.path,\n            content: file.content,\n            type: file.path.split('.').pop() || 'txt'\n          }))\n        );\n      } catch (vectorError) {\n        console.warn(\"Vector indexing failed:\", vectorError);\n      }\n\n      // Increment downloads\n      const templateIndex = sampleTemplates.findIndex(t => t.id === req.params.id);\n      if (templateIndex !== -1) {\n        sampleTemplates[templateIndex].downloads++;\n      }\n\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error creating project from template:\", error);\n      res.status(500).json({ error: \"Failed to create project from template\" });\n    }\n  });\n\n  // Memory Notes\n  app.get(\"/api/memory/search\", async (req, res) => {\n    try {\n      const { query, tags } = req.query;\n      const tagArray = tags ? tags.toString().split(',') : [];\n      \n      let notes = [];\n      \n      if (query || tagArray.length > 0) {\n        // Use vector search if available\n        try {\n          const results = await vectorService.searchMemory(\n            query?.toString() || '',\n            tagArray,\n            20\n          );\n          \n          notes = results.documents?.[0]?.map((doc: string, index: number) => ({\n            id: results.ids?.[0]?.[index] || nanoid(),\n            content: doc,\n            tags: results.metadatas?.[0]?.[index]?.tags?.split(',') || [],\n            links: results.metadatas?.[0]?.[index]?.links?.split(',') || [],\n            session_id: results.metadatas?.[0]?.[index]?.session_id || 'unknown',\n            created_at: results.metadatas?.[0]?.[index]?.created_at || new Date().toISOString(),\n            updated_at: results.metadatas?.[0]?.[index]?.created_at || new Date().toISOString(),\n            relevance_score: 1 - (results.distances?.[0]?.[index] || 0)\n          })) || [];\n        } catch (vectorError) {\n          console.warn(\"Vector search failed, falling back:\", vectorError);\n          // Fallback to empty array for now\n          notes = [];\n        }\n      }\n\n      res.json({ notes, total: notes.length });\n    } catch (error) {\n      console.error(\"Error searching memory notes:\", error);\n      res.status(500).json({ error: \"Failed to search memory notes\" });\n    }\n  });\n\n  app.get(\"/api/memory/stats\", async (req, res) => {\n    try {\n      // Mock stats for now - in production would come from vector DB\n      const stats = {\n        total_notes: 0,\n        hot_memory_count: 0,\n        warm_memory_count: 0,  \n        cold_memory_count: 0,\n        most_used_tags: [\"react\", \"typescript\", \"api\", \"database\", \"ui\"]\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching memory stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch memory stats\" });\n    }\n  });\n\n  app.post(\"/api/memory/notes\", async (req, res) => {\n    try {\n      const { content, tags, links } = req.body;\n      const sessionId = nanoid();\n      \n      // Store in vector DB\n      try {\n        await vectorService.addMemoryNote(sessionId, content, tags, links);\n      } catch (vectorError) {\n        console.warn(\"Vector storage failed:\", vectorError);\n      }\n\n      const note = {\n        id: nanoid(),\n        content,\n        tags: tags || [],\n        links: links || [],\n        session_id: sessionId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n\n      res.json(note);\n    } catch (error) {\n      console.error(\"Error creating memory note:\", error);\n      res.status(500).json({ error: \"Failed to create memory note\" });\n    }\n  });\n\n  // File operations\n  app.get(\"/api/files/:projectId\", async (req, res) => {\n    try {\n      const files = await storage.listFiles(req.params.projectId);\n      res.json(files);\n    } catch (error) {\n      console.error(\"Error listing files:\", error);\n      res.status(500).json({ error: \"Failed to list files\" });\n    }\n  });\n\n  app.get(\"/api/files/:projectId/:path(*)\", async (req, res) => {\n    try {\n      const content = await storage.getFile(req.params.projectId, req.params.path);\n      res.json({ content });\n    } catch (error) {\n      console.error(\"Error getting file:\", error);\n      res.status(500).json({ error: \"Failed to get file\" });\n    }\n  });\n\n  app.put(\"/api/files/:projectId/:path(*)\", async (req, res) => {\n    try {\n      const { content } = req.body;\n      await storage.saveFile(req.params.projectId, req.params.path, content);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error saving file:\", error);\n      res.status(500).json({ error: \"Failed to save file\" });\n    }\n  });\n\n  // Sessions\n  app.get(\"/api/projects/:id/sessions\", async (req, res) => {\n    try {\n      const sessions = await storage.getProjectSessions(req.params.id);\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching sessions:\", error);\n      res.status(500).json({ error: \"Failed to fetch sessions\" });\n    }\n  });\n\n  app.post(\"/api/sessions\", async (req, res) => {\n    try {\n      const { projectId, prompt } = req.body;\n      \n      // Create session with the user message\n      const session = await storage.createSession({\n        projectId,\n        prompt,\n        messages: [{\n          role: 'user',\n          content: prompt,\n          timestamp: new Date().toISOString()\n        }],\n        status: 'active'\n      });\n\n      // Send response immediately with user message\n      res.json(session);\n\n      // Use the real agent system\n      setTimeout(async () => {\n        try {\n          console.log(`🤖 Processing agent request: \"${prompt}\"`);\n          \n          const agentResponse = await codeAgent.processRequest(projectId, prompt);\n          \n          // Add agent response to session\n          const agentMessage = {\n            role: 'assistant' as const,\n            content: agentResponse,\n            timestamp: new Date().toISOString()\n          };\n          \n          const existingMessages = session.messages || [];\n          const updatedMessages = [...existingMessages, agentMessage];\n          \n          await storage.updateSession(session.id, {\n            messages: updatedMessages,\n            status: 'completed'\n          });\n          \n          console.log(`✅ Agent completed request successfully`);\n        } catch (agentError) {\n          console.error(\"Agent processing error:\", agentError);\n          \n          const errorMessage = {\n            role: 'assistant' as const,\n            content: `I encountered an error while processing your request: ${(agentError as Error).message}. Please try again.`,\n            timestamp: new Date().toISOString()\n          };\n          \n          const existingMessages = session.messages || [];\n          const updatedMessages = [...existingMessages, errorMessage];\n          \n          await storage.updateSession(session.id, {\n            messages: updatedMessages,\n            status: 'completed'\n          });\n        }\n      }, 100); // Small delay to ensure response is sent first\n    } catch (error) {\n      console.error(\"Error creating session:\", error);\n      res.status(500).json({ error: \"Failed to create session\" });\n    }\n  });\n\n  // Model routing\n  app.post(\"/api/ai/route\", async (req, res) => {\n    try {\n      const { task, messages, options } = req.body;\n      \n      const modelConfig = await modelRouter.routeRequest(task);\n      const response = await modelRouter.generateCompletion(modelConfig, messages, options);\n      \n      res.json({\n        ...response,\n        model: modelConfig.name,\n        provider: modelConfig.provider\n      });\n    } catch (error) {\n      console.error(\"Error routing AI request:\", error);\n      res.status(500).json({ error: \"Failed to process AI request\" });\n    }\n  });\n\n  app.get(\"/api/ai/models\", async (req, res) => {\n    try {\n      const models = modelRouter.getAvailableModels();\n      const localModels = await modelRouter.listLocalModels();\n      \n      res.json({\n        available: models,\n        local: localModels\n      });\n    } catch (error) {\n      console.error(\"Error fetching models:\", error);\n      res.status(500).json({ error: \"Failed to fetch models\" });\n    }\n  });\n\n  // Visual Testing\n  app.get(\"/api/projects/:id/visual-tests\", async (req, res) => {\n    try {\n      // Mock visual test results for now\n      const tests = [\n        {\n          id: nanoid(),\n          projectId: req.params.id,\n          testName: \"landing-page\",\n          status: \"passed\",\n          screenshotPath: \"/screenshots/landing-page-latest.png\",\n          baselinePath: \"/screenshots/landing-page-baseline.png\",\n          threshold: 100,\n          duration: 1234,\n          createdAt: new Date()\n        }\n      ];\n      \n      res.json(tests);\n    } catch (error) {\n      console.error(\"Error fetching visual tests:\", error);\n      res.status(500).json({ error: \"Failed to fetch visual tests\" });\n    }\n  });\n\n  app.post(\"/api/projects/:id/visual-tests/run\", async (req, res) => {\n    try {\n      // In production, this would trigger Playwright tests\n      const testRun = {\n        id: nanoid(),\n        projectId: req.params.id,\n        status: \"running\",\n        started_at: new Date().toISOString(),\n        tests: [\"landing-page\", \"navigation\", \"project-creation\"]\n      };\n      \n      res.json(testRun);\n    } catch (error) {\n      console.error(\"Error running visual tests:\", error);\n      res.status(500).json({ error: \"Failed to run visual tests\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // Set up WebSocket server\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws: WebSocket) => {\n    console.log('WebSocket client connected');\n    \n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        console.log('Received WebSocket message:', message);\n        \n        // Handle different message types\n        if (message.type === 'join_project') {\n          // Join project room logic\n          ws.send(JSON.stringify({\n            type: 'connection_confirmed',\n            projectId: message.projectId\n          }));\n        } else if (message.type === 'agent_message') {\n          // Handle agent messages\n          ws.send(JSON.stringify({\n            type: 'agent_response',\n            message: 'Agent received your message',\n            timestamp: new Date().toISOString()\n          }));\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n  \n  return httpServer;\n}","size_bytes":20385},"server/storage.ts":{"content":"import { type Project, type Session, type MemoryNote, type FileChange, type GitState, type StyleProfile, type TestRun } from \"@shared/schema\";\nimport { type InsertProject, type InsertSession, type InsertMemoryNote, type InsertFileChange } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Projects\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<Project>): Promise<Project>;\n  listProjects(): Promise<Project[]>;\n\n  // Sessions\n  getSession(id: string): Promise<Session | undefined>;\n  createSession(session: InsertSession): Promise<Session>;\n  updateSession(id: string, updates: Partial<Session>): Promise<Session>;\n  getProjectSessions(projectId: string): Promise<Session[]>;\n\n  // Memory\n  getMemoryNote(id: string): Promise<MemoryNote | undefined>;\n  createMemoryNote(note: InsertMemoryNote): Promise<MemoryNote>;\n  searchMemoryNotes(projectId: string, query: string): Promise<MemoryNote[]>;\n  getProjectMemoryNotes(projectId: string, limit?: number): Promise<MemoryNote[]>;\n\n  // File Changes\n  getFileChange(id: string): Promise<FileChange | undefined>;\n  createFileChange(change: InsertFileChange): Promise<FileChange>;\n  updateFileChange(id: string, updates: Partial<FileChange>): Promise<FileChange>;\n  getSessionFileChanges(sessionId: string): Promise<FileChange[]>;\n\n  // Git State\n  getGitState(projectId: string): Promise<GitState | undefined>;\n  updateGitState(projectId: string, state: Partial<GitState>): Promise<GitState>;\n\n  // Style Profile\n  getStyleProfile(projectId: string): Promise<StyleProfile | undefined>;\n  updateStyleProfile(projectId: string, profile: Partial<StyleProfile>): Promise<StyleProfile>;\n\n  // Test Runs\n  getTestRun(id: string): Promise<TestRun | undefined>;\n  createTestRun(testRun: Omit<TestRun, 'id' | 'createdAt'>): Promise<TestRun>;\n  getSessionTestRuns(sessionId: string): Promise<TestRun[]>;\n  \n  // File operations\n  saveFile(projectId: string, path: string, content: string): Promise<void>;\n  getFile(projectId: string, path: string): Promise<string>;\n  listFiles(projectId: string): Promise<any[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private projects: Map<string, Project>;\n  private sessions: Map<string, Session>;\n  private memoryNotes: Map<string, MemoryNote>;\n  private fileChanges: Map<string, FileChange>;\n  private gitStates: Map<string, GitState>;\n  private styleProfiles: Map<string, StyleProfile>;\n  private testRuns: Map<string, TestRun>;\n  private files: Map<string, Map<string, string>>; // projectId -> (filePath -> content)\n\n  constructor() {\n    this.projects = new Map();\n    this.sessions = new Map();\n    this.memoryNotes = new Map();\n    this.fileChanges = new Map();\n    this.gitStates = new Map();\n    this.styleProfiles = new Map();\n    this.testRuns = new Map();\n    this.files = new Map();\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const project: Project = {\n      ...insertProject,\n      id,\n      createdAt: new Date(),\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project> {\n    const existing = this.projects.get(id);\n    if (!existing) throw new Error('Project not found');\n    const updated = { ...existing, ...updates };\n    this.projects.set(id, updated);\n    return updated;\n  }\n\n  async listProjects(): Promise<Project[]> {\n    return Array.from(this.projects.values());\n  }\n\n  async getSession(id: string): Promise<Session | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const id = randomUUID();\n    const session: Session = {\n      ...insertSession,\n      id,\n      createdAt: new Date(),\n    };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async updateSession(id: string, updates: Partial<Session>): Promise<Session> {\n    const existing = this.sessions.get(id);\n    if (!existing) throw new Error('Session not found');\n    const updated = { ...existing, ...updates };\n    this.sessions.set(id, updated);\n    return updated;\n  }\n\n  async getProjectSessions(projectId: string): Promise<Session[]> {\n    return Array.from(this.sessions.values()).filter(s => s.projectId === projectId);\n  }\n\n  async getMemoryNote(id: string): Promise<MemoryNote | undefined> {\n    return this.memoryNotes.get(id);\n  }\n\n  async createMemoryNote(insertNote: InsertMemoryNote): Promise<MemoryNote> {\n    const id = randomUUID();\n    const note: MemoryNote = {\n      ...insertNote,\n      id,\n      createdAt: new Date(),\n    };\n    this.memoryNotes.set(id, note);\n    return note;\n  }\n\n  async searchMemoryNotes(projectId: string, query: string): Promise<MemoryNote[]> {\n    const notes = Array.from(this.memoryNotes.values())\n      .filter(note => note.projectId === projectId);\n    \n    if (!query) return notes;\n    \n    const lowerQuery = query.toLowerCase();\n    return notes.filter(note => \n      note.content.toLowerCase().includes(lowerQuery) ||\n      note.tags.some(tag => tag.toLowerCase().includes(lowerQuery))\n    );\n  }\n\n  async getProjectMemoryNotes(projectId: string, limit?: number): Promise<MemoryNote[]> {\n    const notes = Array.from(this.memoryNotes.values())\n      .filter(note => note.projectId === projectId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n    \n    return limit ? notes.slice(0, limit) : notes;\n  }\n\n  async getFileChange(id: string): Promise<FileChange | undefined> {\n    return this.fileChanges.get(id);\n  }\n\n  async createFileChange(insertChange: InsertFileChange): Promise<FileChange> {\n    const id = randomUUID();\n    const change: FileChange = {\n      ...insertChange,\n      id,\n      createdAt: new Date(),\n    };\n    this.fileChanges.set(id, change);\n    return change;\n  }\n\n  async updateFileChange(id: string, updates: Partial<FileChange>): Promise<FileChange> {\n    const existing = this.fileChanges.get(id);\n    if (!existing) throw new Error('File change not found');\n    const updated = { ...existing, ...updates };\n    this.fileChanges.set(id, updated);\n    return updated;\n  }\n\n  async getSessionFileChanges(sessionId: string): Promise<FileChange[]> {\n    return Array.from(this.fileChanges.values()).filter(fc => fc.sessionId === sessionId);\n  }\n\n  async getGitState(projectId: string): Promise<GitState | undefined> {\n    return this.gitStates.get(projectId);\n  }\n\n  async updateGitState(projectId: string, updates: Partial<GitState>): Promise<GitState> {\n    const existing = this.gitStates.get(projectId) || {\n      projectId,\n      branch: 'main',\n      ahead: 0,\n      behind: 0,\n      lastCommit: null,\n      updatedAt: new Date(),\n    };\n    const updated = { ...existing, ...updates, updatedAt: new Date() };\n    this.gitStates.set(projectId, updated);\n    return updated;\n  }\n\n  async getStyleProfile(projectId: string): Promise<StyleProfile | undefined> {\n    return this.styleProfiles.get(projectId);\n  }\n\n  async updateStyleProfile(projectId: string, updates: Partial<StyleProfile>): Promise<StyleProfile> {\n    const existing = this.styleProfiles.get(projectId) || {\n      projectId,\n      prefsJson: {},\n      updatedAt: new Date(),\n    };\n    const updated = { ...existing, ...updates, updatedAt: new Date() };\n    this.styleProfiles.set(projectId, updated);\n    return updated;\n  }\n\n  async getTestRun(id: string): Promise<TestRun | undefined> {\n    return this.testRuns.get(id);\n  }\n\n  async createTestRun(insertTestRun: Omit<TestRun, 'id' | 'createdAt'>): Promise<TestRun> {\n    const id = randomUUID();\n    const testRun: TestRun = {\n      ...insertTestRun,\n      id,\n      createdAt: new Date(),\n    };\n    this.testRuns.set(id, testRun);\n    return testRun;\n  }\n\n  async getSessionTestRuns(sessionId: string): Promise<TestRun[]> {\n    return Array.from(this.testRuns.values()).filter(tr => tr.sessionId === sessionId);\n  }\n\n  // File operations\n  async saveFile(projectId: string, path: string, content: string): Promise<void> {\n    if (!this.files.has(projectId)) {\n      this.files.set(projectId, new Map());\n    }\n    const projectFiles = this.files.get(projectId)!;\n    projectFiles.set(path, content);\n  }\n\n  async getFile(projectId: string, path: string): Promise<string> {\n    const projectFiles = this.files.get(projectId);\n    if (!projectFiles) return '';\n    return projectFiles.get(path) || '';\n  }\n\n  async listFiles(projectId: string): Promise<any[]> {\n    const projectFiles = this.files.get(projectId);\n    if (!projectFiles) return [];\n    \n    return Array.from(projectFiles.entries()).map(([path, content]) => ({\n      path,\n      size: content.length,\n      lastModified: new Date().toISOString()\n    }));\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":8977},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, json, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  repoUrl: text(\"repo_url\"),\n  defaultBranch: text(\"default_branch\").default(\"main\"),\n  settingsJson: json(\"settings_json\").$type<{\n    strictMode?: boolean;\n    maxLines?: number;\n    maxFiles?: number;\n    forbiddenGlobs?: string[];\n    styleFreeze?: boolean;\n  }>().default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => projects.id).notNull(),\n  prompt: text(\"prompt\").notNull(),\n  messages: json(\"messages\").$type<Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>>().default([]),\n  scopeJson: json(\"scope_json\").$type<{\n    goal: string;\n    files: string[];\n    symbols: string[];\n    forbidden: string[];\n    budget: { maxTokens: number; maxCost: number };\n  }>(),\n  diffSummary: text(\"diff_summary\"),\n  status: text(\"status\").notNull().default(\"active\"), // active, completed, failed, pending_approval\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const memoryNotes = pgTable(\"memory_notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => projects.id).notNull(),\n  content: text(\"content\").notNull(),\n  tags: json(\"tags\").$type<string[]>().default([]),\n  links: json(\"links\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const styleProfiles = pgTable(\"style_profiles\", {\n  projectId: varchar(\"project_id\").references(() => projects.id).primaryKey(),\n  prefsJson: json(\"prefs_json\").$type<{\n    codeStyle: string;\n    naming: string;\n    patterns: string[];\n    lintRules: Record<string, any>;\n  }>().default({}),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const gitStates = pgTable(\"git_states\", {\n  projectId: varchar(\"project_id\").references(() => projects.id).primaryKey(),\n  branch: text(\"branch\").notNull(),\n  ahead: integer(\"ahead\").default(0),\n  behind: integer(\"behind\").default(0),\n  lastCommit: text(\"last_commit\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const testRuns = pgTable(\"test_runs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  resultsJson: json(\"results_json\").$type<{\n    passed: number;\n    failed: number;\n    skipped: number;\n    details: Array<{ test: string; status: string; error?: string }>;\n  }>(),\n  artifactsPath: text(\"artifacts_path\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const fileChanges = pgTable(\"file_changes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  filePath: text(\"file_path\").notNull(),\n  changeType: text(\"change_type\").notNull(), // create, modify, delete\n  hunks: json(\"hunks\").$type<Array<{\n    id: string;\n    oldStart: number;\n    oldLines: number;\n    newStart: number;\n    newLines: number;\n    content: string;\n    approved: boolean;\n    rationale: string;\n  }>>().default([]),\n  applied: boolean(\"applied\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const templates = pgTable(\"templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  tags: json(\"tags\").$type<string[]>().default([]),\n  author: text(\"author\").notNull(),\n  downloads: integer(\"downloads\").default(0),\n  stars: integer(\"stars\").default(0),\n  previewUrl: text(\"preview_url\"),\n  repositoryUrl: text(\"repository_url\"),\n  filesJson: json(\"files_json\").$type<Array<{ path: string; content: string }>>().notNull(),\n  dependencies: json(\"dependencies\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const collaborators = pgTable(\"collaborators\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => projects.id).notNull(),\n  userId: text(\"user_id\").notNull(),\n  role: text(\"role\").default(\"developer\").notNull(), // owner, admin, developer, viewer\n  permissions: json(\"permissions\").$type<string[]>().default([]),\n  invitedBy: text(\"invited_by\"),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\nexport const visualTests = pgTable(\"visual_tests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => projects.id).notNull(),\n  testName: text(\"test_name\").notNull(),\n  status: text(\"status\").notNull(), // passed, failed, running\n  screenshotPath: text(\"screenshot_path\"),\n  baselinePath: text(\"baseline_path\"),\n  diffPath: text(\"diff_path\"),\n  threshold: integer(\"threshold\").default(100), // pixel difference threshold\n  duration: integer(\"duration\"), // milliseconds\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertProjectSchema = createInsertSchema(projects).omit({ id: true, createdAt: true });\nexport const insertSessionSchema = createInsertSchema(sessions).omit({ id: true, createdAt: true });\nexport const insertMemoryNoteSchema = createInsertSchema(memoryNotes).omit({ id: true, createdAt: true });\nexport const insertFileChangeSchema = createInsertSchema(fileChanges).omit({ id: true, createdAt: true });\nexport const insertTemplateSchema = createInsertSchema(templates).omit({ id: true, downloads: true, stars: true, createdAt: true, updatedAt: true });\nexport const insertCollaboratorSchema = createInsertSchema(collaborators).omit({ id: true, joinedAt: true });\n\n// Types\nexport type Project = typeof projects.$inferSelect;\nexport type Session = typeof sessions.$inferSelect;\nexport type MemoryNote = typeof memoryNotes.$inferSelect;\nexport type StyleProfile = typeof styleProfiles.$inferSelect;\nexport type GitState = typeof gitStates.$inferSelect;\nexport type TestRun = typeof testRuns.$inferSelect;\nexport type FileChange = typeof fileChanges.$inferSelect;\nexport type Template = typeof templates.$inferSelect;\nexport type Collaborator = typeof collaborators.$inferSelect;\nexport type VisualTest = typeof visualTests.$inferSelect;\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type InsertMemoryNote = z.infer<typeof insertMemoryNoteSchema>;\nexport type InsertFileChange = z.infer<typeof insertFileChangeSchema>;\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\nexport type InsertCollaborator = z.infer<typeof insertCollaboratorSchema>;\n","size_bytes":7125},"tests/visual.spec.ts":{"content":"import { test, expect } from '@playwright/test';\n\ntest.describe('Reme IDE Visual Tests', () => {\n  test.beforeEach(async ({ page }) => {\n    await page.goto('http://localhost:5000');\n  });\n\n  test('landing page layout and animations', async ({ page }) => {\n    // Wait for space background to load\n    await page.waitForSelector('canvas');\n    \n    // Check main elements are visible\n    await expect(page.locator('h1')).toContainText('Welcome to Reme');\n    await expect(page.locator('nav')).toBeVisible();\n    \n    // Take screenshot for visual regression\n    await expect(page).toHaveScreenshot('landing-page.png', {\n      fullPage: true,\n      animations: 'disabled'\n    });\n  });\n\n  test('navigation sidebar functionality', async ({ page }) => {\n    const sidebar = page.locator('nav');\n    await expect(sidebar).toBeVisible();\n    \n    // Test sidebar items\n    await expect(page.locator('nav >> text=Dashboard')).toBeVisible();\n    await expect(page.locator('nav >> text=Projects')).toBeVisible();\n    await expect(page.locator('nav >> text=Templates')).toBeVisible();\n    \n    // Click templates and verify navigation\n    await page.click('nav >> text=Templates');\n    await expect(page).toHaveURL(/.*\\/templates/);\n    \n    // Screenshot of templates page\n    await expect(page).toHaveScreenshot('templates-page.png');\n  });\n\n  test('project creation flow', async ({ page }) => {\n    // Click create project button\n    await page.click('text=Create New Project');\n    \n    // Verify dialog opens\n    await expect(page.locator('[role=\"dialog\"]')).toBeVisible();\n    await expect(page.locator('text=Create New Project')).toBeVisible();\n    \n    // Fill form\n    await page.fill('input[placeholder=\"my-awesome-project\"]', 'test-project');\n    await page.fill('input[placeholder=\"https://github.com/user/repo.git\"]', 'https://github.com/test/repo.git');\n    \n    // Screenshot of filled form\n    await expect(page).toHaveScreenshot('project-creation-form.png');\n  });\n\n  test('IDE layout when project exists', async ({ page }) => {\n    // First create a project via API\n    await page.evaluate(async () => {\n      const response = await fetch('/api/projects', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          name: 'test-project',\n          repoUrl: 'https://github.com/test/repo.git',\n          defaultBranch: 'main'\n        })\n      });\n      return response.json();\n    });\n\n    // Navigate to IDE\n    const projects = await page.evaluate(async () => {\n      const response = await fetch('/api/projects');\n      return response.json();\n    });\n\n    if (projects.length > 0) {\n      await page.goto(`http://localhost:5000/ide/${projects[0].id}`);\n      \n      // Wait for IDE to load\n      await page.waitForSelector('[data-testid=\"file-explorer\"]', { timeout: 10000 });\n      await page.waitForSelector('[data-testid=\"code-editor\"]', { timeout: 10000 });\n      \n      // Screenshot of IDE layout\n      await expect(page).toHaveScreenshot('ide-layout.png', {\n        fullPage: true\n      });\n    }\n  });\n\n  test('responsive design - mobile view', async ({ page }) => {\n    await page.setViewportSize({ width: 375, height: 667 });\n    \n    // Check mobile layout\n    await expect(page.locator('h1')).toBeVisible();\n    \n    // Navigation should be collapsed or adapted\n    await expect(page).toHaveScreenshot('mobile-landing.png');\n  });\n\n  test('dark theme consistency', async ({ page }) => {\n    // Check CSS custom properties are applied\n    const bgColor = await page.evaluate(() => {\n      return getComputedStyle(document.body).backgroundColor;\n    });\n    \n    expect(bgColor).toMatch(/rgb\\(0, 0, 0\\)|black/);\n    \n    // Screenshot to verify dark theme\n    await expect(page).toHaveScreenshot('dark-theme-verification.png');\n  });\n\n  test('button interactions and hover states', async ({ page }) => {\n    const createButton = page.locator('text=Create New Project').first();\n    \n    // Screenshot default state\n    await expect(createButton).toHaveScreenshot('button-default.png');\n    \n    // Hover state\n    await createButton.hover();\n    await expect(createButton).toHaveScreenshot('button-hover.png');\n  });\n\n  test('space background performance', async ({ page }) => {\n    // Monitor canvas performance\n    const canvas = page.locator('canvas');\n    await expect(canvas).toBeVisible();\n    \n    // Check animation is running without excessive CPU\n    const animationFrames = await page.evaluate(() => {\n      return new Promise((resolve) => {\n        let frameCount = 0;\n        const startTime = performance.now();\n        \n        function countFrames() {\n          frameCount++;\n          if (performance.now() - startTime < 1000) {\n            requestAnimationFrame(countFrames);\n          } else {\n            resolve(frameCount);\n          }\n        }\n        \n        requestAnimationFrame(countFrames);\n      });\n    });\n    \n    // Should have reasonable frame rate (30+ FPS)\n    expect(animationFrames as number).toBeGreaterThan(30);\n  });\n});\n\ntest.describe('Template Gallery Tests', () => {\n  test('template grid layout', async ({ page }) => {\n    await page.goto('http://localhost:5000/templates');\n    \n    // Wait for templates to load\n    await page.waitForSelector('[data-testid=\"template-card\"]', { timeout: 5000 });\n    \n    // Check grid layout\n    const templates = page.locator('[data-testid=\"template-card\"]');\n    await expect(templates).toHaveCount.greaterThan(0);\n    \n    await expect(page).toHaveScreenshot('template-gallery.png');\n  });\n\n  test('template search functionality', async ({ page }) => {\n    await page.goto('http://localhost:5000/templates');\n    \n    // Test search\n    await page.fill('[placeholder*=\"Search templates\"]', 'react');\n    await page.waitForTimeout(500); // Debounce\n    \n    await expect(page).toHaveScreenshot('template-search-results.png');\n  });\n});","size_bytes":5906},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport IDE from \"@/pages/ide\";\nimport Templates from \"@/pages/templates\";\nimport Memory from \"@/pages/memory\";\nimport Projects from \"@/pages/projects\";\nimport Recent from \"@/pages/recent\";\nimport Starred from \"@/pages/starred\";\nimport Settings from \"@/pages/settings\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/projects\" component={Projects} />\n      <Route path=\"/templates\" component={Templates} />\n      <Route path=\"/memory\" component={Memory} />\n      <Route path=\"/recent\" component={Recent} />\n      <Route path=\"/starred\" component={Starred} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/project/:id\" component={IDE} />\n      <Route path=\"/ide/:id\" component={IDE} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1399},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --radius: 1.3rem;\n  \n  /* Hacker theme colors */\n  --github-bg: hsl(220 13% 8%);\n  --github-surface: hsl(220 12% 11%);\n  --github-border: hsl(220 9% 18%);\n  --github-text: hsl(120 100% 85%);\n  --github-text-secondary: hsl(120 15% 65%);\n  --github-primary: hsl(166 100% 50%);\n  --github-success: hsl(120 100% 50%);\n  --github-warning: hsl(50 100% 65%);\n  --github-error: hsl(0 85% 65%);\n  --github-accent: hsl(180 100% 50%);\n  \n  /* Fonts */\n  --font-ui: 'JetBrains Mono', 'Monaco', 'Consolas', monospace;\n  --font-code: 'JetBrains Mono', 'Monaco', 'Consolas', monospace;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-github-bg text-github-text font-ui antialiased;\n    background-image: \n      radial-gradient(circle at 20% 50%, hsl(166 100% 50% / 0.03) 0%, transparent 50%),\n      radial-gradient(circle at 80% 20%, hsl(120 100% 50% / 0.03) 0%, transparent 50%),\n      radial-gradient(circle at 40% 80%, hsl(180 100% 50% / 0.03) 0%, transparent 50%);\n  }\n\n  /* Custom scrollbar styling for GitHub theme */\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: var(--github-bg);\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: var(--github-border);\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: var(--github-text-secondary);\n  }\n\n  /* Monaco editor overrides */\n  .monaco-editor {\n    background-color: var(--github-bg) !important;\n  }\n\n  .monaco-editor .view-lines {\n    font-family: var(--font-code) !important;\n  }\n\n  /* Custom utility classes */\n  .font-ui {\n    font-family: var(--font-ui);\n  }\n\n  .font-code {\n    font-family: var(--font-code);\n  }\n\n  .github-bg {\n    background-color: var(--github-bg);\n  }\n\n  .github-surface {\n    background-color: var(--github-surface);\n  }\n\n  .github-text {\n    color: var(--github-text);\n  }\n\n  .github-text-secondary {\n    color: var(--github-text-secondary);\n  }\n\n  .github-primary {\n    color: var(--github-primary);\n  }\n\n  .github-success {\n    color: var(--github-success);\n  }\n\n  .github-warning {\n    color: var(--github-warning);\n  }\n\n  .github-error {\n    color: var(--github-error);\n  }\n\n  .github-border {\n    border-color: var(--github-border);\n  }\n\n  /* Animation utilities */\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  /* Smooth transitions for theme switching */\n  * {\n    transition-property: background-color, border-color, color, fill, stroke;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 200ms;\n  }\n\n  /* Focus styles for accessibility */\n  button:focus-visible,\n  input:focus-visible,\n  textarea:focus-visible,\n  select:focus-visible {\n    outline: 2px solid var(--github-primary);\n    outline-offset: 2px;\n  }\n\n  /* Code syntax highlighting overrides */\n  .hljs {\n    background: var(--github-bg) !important;\n    color: var(--github-text) !important;\n  }\n\n  .hljs-comment {\n    color: var(--github-text-secondary) !important;\n    font-style: italic;\n  }\n\n  .hljs-keyword {\n    color: hsl(0 70% 70%) !important;\n  }\n\n  .hljs-string {\n    color: hsl(195 100% 75%) !important;\n  }\n\n  .hljs-number {\n    color: hsl(240 100% 75%) !important;\n  }\n\n  .hljs-type {\n    color: var(--github-warning) !important;\n  }\n\n  .hljs-function {\n    color: hsl(270 60% 75%) !important;\n  }\n\n  .hljs-variable {\n    color: var(--github-text) !important;\n  }\n}\n\n@layer components {\n  /* Custom button variants for GitHub theme */\n  .btn-github-primary {\n    @apply bg-github-primary hover:bg-github-primary/90 text-white border-transparent;\n  }\n\n  .btn-github-success {\n    @apply bg-github-success hover:bg-github-success/90 text-white border-transparent;\n  }\n\n  .btn-github-warning {\n    @apply bg-github-warning hover:bg-github-warning/90 text-white border-transparent;\n  }\n\n  .btn-github-error {\n    @apply bg-github-error hover:bg-github-error/90 text-white border-transparent;\n  }\n\n  .btn-github-outline {\n    @apply border-github-border hover:bg-github-border/50 text-github-text bg-transparent;\n  }\n\n  /* Panel and layout components */\n  .panel-header {\n    @apply px-4 py-3 border-b border-github-border bg-github-surface;\n  }\n\n  .panel-content {\n    @apply flex-1 overflow-y-auto bg-github-surface;\n  }\n\n  .sidebar-item {\n    @apply flex items-center space-x-2 py-1 px-2 hover:bg-github-border/30 rounded cursor-pointer transition-colors;\n  }\n\n  .tab-active {\n    @apply text-github-primary bg-github-primary/10 border-b-2 border-github-primary;\n  }\n\n  .tab-inactive {\n    @apply text-github-text-secondary hover:text-github-text;\n  }\n\n  /* File tree specific styles */\n  .file-tree-node {\n    @apply flex items-center space-x-2 py-1 px-2 hover:bg-github-border/30 rounded cursor-pointer text-sm transition-colors;\n  }\n\n  .file-tree-directory {\n    @apply text-github-warning;\n  }\n\n  .file-tree-file {\n    @apply text-github-text;\n  }\n\n  /* Diff viewer styles */\n  .diff-hunk {\n    @apply font-mono text-xs bg-github-bg rounded p-3 space-y-1;\n  }\n\n  .diff-line-added {\n    @apply text-green-400 bg-green-400/10;\n  }\n\n  .diff-line-removed {\n    @apply text-red-400 bg-red-400/10;\n  }\n\n  .diff-line-context {\n    @apply text-github-text-secondary;\n  }\n\n  .diff-line-header {\n    @apply text-github-primary;\n  }\n}\n","size_bytes":8206},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"projects/59c17d78-445b-4953-818d-3dcd44c45422/README.md":{"content":"# Welcome to hello world\n\nThis is your Reme project. The AI agent is ready to help you build amazing things!\n\n## Getting Started\n- Use the file explorer to browse your project\n- Chat with the AI agent to request code changes\n- Review proposed changes in the diff panel\n- All changes require your approval in strict mode\n\nHappy coding! 🚀\n","size_bytes":340},"projects/59c17d78-445b-4953-818d-3dcd44c45422/index.js":{"content":"// Welcome to your new project!\nconsole.log(\"Hello from Reme!\");\n","size_bytes":65},"server/services/agent.ts":{"content":"import { ModelRouter } from './models';\nimport { IStorage } from '../storage';\n\ninterface AgentTool {\n  name: string;\n  description: string;\n  parameters: any;\n  execute: (params: any, context: AgentContext) => Promise<any>;\n}\n\ninterface AgentContext {\n  projectId: string;\n  storage: IStorage;\n  modelRouter: ModelRouter;\n}\n\nexport class CodeAgent {\n  private tools: Map<string, AgentTool> = new Map();\n  \n  constructor(\n    private storage: IStorage,\n    private modelRouter: ModelRouter\n  ) {\n    this.initializeTools();\n  }\n\n  private initializeTools() {\n    // File creation tool\n    this.tools.set('create_file', {\n      name: 'create_file',\n      description: 'Create a new file with the specified content',\n      parameters: {\n        type: 'object',\n        properties: {\n          path: { type: 'string', description: 'The file path' },\n          content: { type: 'string', description: 'The file content' }\n        },\n        required: ['path', 'content']\n      },\n      execute: async (params, context) => {\n        await context.storage.saveFile(context.projectId, params.path, params.content);\n        return { success: true, message: `Created file: ${params.path}` };\n      }\n    });\n\n    // File reading tool\n    this.tools.set('read_file', {\n      name: 'read_file',\n      description: 'Read the content of an existing file',\n      parameters: {\n        type: 'object',\n        properties: {\n          path: { type: 'string', description: 'The file path to read' }\n        },\n        required: ['path']\n      },\n      execute: async (params, context) => {\n        const content = await context.storage.getFile(context.projectId, params.path);\n        return { content };\n      }\n    });\n\n    // List files tool\n    this.tools.set('list_files', {\n      name: 'list_files',\n      description: 'List all files in the project',\n      parameters: {\n        type: 'object',\n        properties: {}\n      },\n      execute: async (params, context) => {\n        const files = await context.storage.listFiles(context.projectId);\n        return { files };\n      }\n    });\n\n    // Update file tool\n    this.tools.set('update_file', {\n      name: 'update_file',\n      description: 'Update an existing file with new content',\n      parameters: {\n        type: 'object',\n        properties: {\n          path: { type: 'string', description: 'The file path' },\n          content: { type: 'string', description: 'The new file content' }\n        },\n        required: ['path', 'content']\n      },\n      execute: async (params, context) => {\n        await context.storage.saveFile(context.projectId, params.path, params.content);\n        return { success: true, message: `Updated file: ${params.path}` };\n      }\n    });\n  }\n\n  async processRequest(projectId: string, prompt: string): Promise<string> {\n    const context: AgentContext = {\n      projectId,\n      storage: this.storage,\n      modelRouter: this.modelRouter\n    };\n\n    // Get project context\n    const files = await this.storage.listFiles(projectId);\n    const fileContext = files.length > 0 \n      ? `Current project files: ${files.map(f => f.path).join(', ')}`\n      : 'No files in project yet.';\n\n    // Build system prompt with available tools\n    const toolsDescription = Array.from(this.tools.values())\n      .map(tool => `- ${tool.name}: ${tool.description}`)\n      .join('\\n');\n\n    const systemPrompt = `You are a code agent that can create, read, and modify files. You have access to these tools:\n\n${toolsDescription}\n\nWhen the user asks you to build something, you should:\n1. Create the necessary files using the create_file tool\n2. Make sure the code is complete and functional\n3. Explain what you've built\n\n${fileContext}\n\nAlways use the tools to actually create files - never just show code in your response without creating it.\n\nFor tool calls, respond in this exact format:\n<tool_call>\n{\n  \"tool\": \"tool_name\",\n  \"parameters\": {\n    \"key\": \"value\"\n  }\n}\n</tool_call>\n\nYou can make multiple tool calls in sequence.`;\n\n    // Generate initial response\n    const modelConfig = {\n      name: \"claude-sonnet-4-20250514\",\n      provider: \"anthropic\" as const,\n      maxTokens: 4000,\n      costPerToken: 0.00003,\n      capabilities: ['code', 'analysis', 'reasoning'],\n      local: false\n    };\n\n    let response: any;\n    try {\n      response = await Promise.race([\n        this.modelRouter.generateCompletion(\n          modelConfig,\n          [\n            { role: \"system\", content: systemPrompt },\n            { role: \"user\", content: prompt }\n          ],\n          {}\n        ),\n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Agent timeout')), 15000)\n        )\n      ]);\n    } catch (error: any) {\n      console.log(\"AI model failed, creating files directly based on request\");\n      \n      // Fallback: create files based on the prompt without AI\n      if (prompt.toLowerCase().includes('hello world') && prompt.toLowerCase().includes('3d')) {\n        await this.tools.get('create_file')!.execute({\n          path: 'index.html',\n          content: this.generate3DHelloWorld()\n        }, context);\n        \n        return \"I've created a complete 3D Hello World scene using Three.js! The scene features floating 'Hello' and 'World' text with particle effects, smooth animations, and interactive controls. You can pause/resume animations and reset the camera view.\";\n      } else {\n        await this.tools.get('create_file')!.execute({\n          path: 'index.html',\n          content: this.generateBasicHTML(prompt)\n        }, context);\n        \n        return \"I've created a complete HTML page based on your request. The file includes proper styling and functionality.\";\n      }\n    }\n\n    // Process tool calls in the response\n    let finalResponse = response.content;\n    const toolCallMatches = response.content.match(/<tool_call>([\\s\\S]*?)<\\/tool_call>/g);\n    \n    if (toolCallMatches) {\n      const toolResults = [];\n      \n      for (const match of toolCallMatches) {\n        const jsonStr = match.replace(/<tool_call>|<\\/tool_call>/g, '').trim();\n        try {\n          const toolCall = JSON.parse(jsonStr);\n          const tool = this.tools.get(toolCall.tool);\n          \n          if (tool) {\n            const result = await tool.execute(toolCall.parameters, context);\n            toolResults.push(`${tool.name}: ${JSON.stringify(result)}`);\n            console.log(`✅ Agent used tool: ${tool.name}`, toolCall.parameters);\n          }\n        } catch (error: any) {\n          console.error('Tool call error:', error);\n          toolResults.push(`Error: ${error?.message || error}`);\n        }\n      }\n      \n      // Remove tool calls from final response and add results\n      finalResponse = response.content.replace(/<tool_call>[\\s\\S]*?<\\/tool_call>/g, '').trim();\n      \n      if (toolResults.length > 0) {\n        finalResponse += `\\n\\nTool execution results:\\n${toolResults.join('\\n')}`;\n      }\n    }\n\n    return finalResponse;\n  }\n\n  private generate3DHelloWorld(): string {\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>3D Hello World</title>\n    <style>\n        body { margin: 0; background: linear-gradient(135deg, #1e3c72, #2a5298); font-family: Arial, sans-serif; overflow: hidden; }\n        #controls { position: absolute; top: 20px; left: 20px; z-index: 100; }\n        button { \n            background: rgba(255,255,255,0.2); \n            border: 1px solid rgba(255,255,255,0.3); \n            color: white; \n            padding: 10px 20px; \n            margin: 5px; \n            border-radius: 5px; \n            cursor: pointer; \n        }\n        button:hover { background: rgba(255,255,255,0.3); }\n    </style>\n</head>\n<body>\n    <div id=\"controls\">\n        <button onclick=\"toggleAnimation()\">Pause Animation</button>\n        <button onclick=\"resetView()\">Reset View</button>\n    </div>\n    \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\n    <script>\n        let scene, camera, renderer, helloText, worldText;\n        let animationEnabled = true;\n\n        function init() {\n            scene = new THREE.Scene();\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n            renderer = new THREE.WebGLRenderer({ antialias: true });\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            renderer.shadowMap.enabled = true;\n            renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n            document.body.appendChild(renderer.domElement);\n\n            // Lighting\n            const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n            scene.add(ambientLight);\n            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n            directionalLight.position.set(50, 50, 50);\n            directionalLight.castShadow = true;\n            scene.add(directionalLight);\n\n            // Create text geometries\n            const loader = new THREE.FontLoader();\n            const fontUrl = 'https://threejs.org/examples/fonts/helvetiker_regular.typeface.json';\n            \n            // Fallback: create simple geometries if font loading fails\n            createSimpleText();\n            \n            camera.position.set(0, 0, 50);\n            animate();\n        }\n\n        function createSimpleText() {\n            // Hello text\n            const helloGeometry = new THREE.BoxGeometry(15, 5, 2);\n            const helloMaterial = new THREE.MeshLambertMaterial({ color: 0x00ff88 });\n            helloText = new THREE.Mesh(helloGeometry, helloMaterial);\n            helloText.position.set(-8, 5, 0);\n            scene.add(helloText);\n\n            // World text  \n            const worldGeometry = new THREE.BoxGeometry(15, 5, 2);\n            const worldMaterial = new THREE.MeshLambertMaterial({ color: 0xff6600 });\n            worldText = new THREE.Mesh(worldGeometry, worldMaterial);\n            worldText.position.set(8, -5, 0);\n            scene.add(worldText);\n\n            // Add particles\n            createParticles();\n        }\n\n        function createParticles() {\n            const particleGeometry = new THREE.BufferGeometry();\n            const particleCount = 200;\n            const positions = new Float32Array(particleCount * 3);\n\n            for (let i = 0; i < particleCount * 3; i++) {\n                positions[i] = (Math.random() - 0.5) * 100;\n            }\n\n            particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            const particleMaterial = new THREE.PointsMaterial({ \n                color: 0xffffff, \n                size: 0.5,\n                transparent: true,\n                opacity: 0.8\n            });\n            \n            const particles = new THREE.Points(particleGeometry, particleMaterial);\n            scene.add(particles);\n        }\n\n        function toggleAnimation() {\n            animationEnabled = !animationEnabled;\n            const btn = document.querySelector('button');\n            btn.textContent = animationEnabled ? 'Pause Animation' : 'Resume Animation';\n        }\n\n        function resetView() {\n            camera.position.set(0, 0, 50);\n        }\n\n        function animate() {\n            requestAnimationFrame(animate);\n            \n            if (animationEnabled && helloText && worldText) {\n                helloText.rotation.y += 0.02;\n                worldText.rotation.y -= 0.02;\n                helloText.position.y = 5 + Math.sin(Date.now() * 0.002) * 2;\n                worldText.position.y = -5 + Math.cos(Date.now() * 0.002) * 2;\n            }\n            \n            renderer.render(scene, camera);\n        }\n\n        window.addEventListener('resize', () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n\n        window.addEventListener('load', init);\n    </script>\n</body>\n</html>`;\n  }\n\n  private generateBasicHTML(prompt: string): string {\n    const title = prompt.includes('calculator') ? 'Calculator' : \n                  prompt.includes('todo') ? 'Todo App' : \n                  prompt.includes('game') ? 'Game' : 'Web App';\n    \n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${title}</title>\n    <style>\n        body { \n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            margin: 0; \n            padding: 20px;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        .container {\n            background: white;\n            border-radius: 15px;\n            padding: 40px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            text-align: center;\n            max-width: 600px;\n        }\n        h1 { color: #333; margin-bottom: 20px; }\n        .demo-content { \n            padding: 20px; \n            background: #f8f9fa; \n            border-radius: 10px; \n            margin: 20px 0;\n        }\n        button {\n            background: #667eea;\n            color: white;\n            border: none;\n            padding: 12px 30px;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 16px;\n            margin: 10px;\n            transition: background 0.3s;\n        }\n        button:hover { background: #5a67d8; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>${title}</h1>\n        <div class=\"demo-content\">\n            <p>This is a working ${title.toLowerCase()} created based on your request: \"${prompt}\"</p>\n            <button onclick=\"handleAction()\">Click Me</button>\n        </div>\n    </div>\n    \n    <script>\n        function handleAction() {\n            alert('${title} is working! Request: ${prompt}');\n        }\n    </script>\n</body>\n</html>`;\n  }\n}","size_bytes":14152},"server/services/git.ts":{"content":"import simpleGit, { SimpleGit } from 'simple-git';\nimport { storage } from '../storage';\nimport path from 'path';\nimport fs from 'fs';\n\nclass GitService {\n  private getGitInstance(projectId: string): SimpleGit {\n    const projectPath = path.join(process.cwd(), 'projects', projectId);\n    return simpleGit(projectPath);\n  }\n\n  async commit(projectId: string, message: string, stage: 'approved_hunks' | 'all' = 'approved_hunks'): Promise<any> {\n    try {\n      const git = this.getGitInstance(projectId);\n      \n      if (stage === 'all') {\n        await git.add('.');\n      } else {\n        // Stage only approved hunks - this would need more complex logic\n        // For now, stage all modified files\n        await git.add('.');\n      }\n\n      const commitResult = await git.commit(message);\n      \n      // Update git state\n      const status = await git.status();\n      await storage.updateGitState(projectId, {\n        ahead: status.ahead,\n        behind: status.behind,\n        lastCommit: commitResult.commit\n      });\n\n      return {\n        commit: commitResult.commit,\n        message,\n        files: status.modified.length + status.created.length + status.deleted.length\n      };\n    } catch (error) {\n      throw new Error(`Commit failed: ${error.message}`);\n    }\n  }\n\n  async pull(projectId: string): Promise<any> {\n    try {\n      const git = this.getGitInstance(projectId);\n      const pullResult = await git.pull();\n      \n      // Check for conflicts\n      const status = await git.status();\n      const hasConflicts = status.conflicted.length > 0;\n      \n      // Update git state\n      await storage.updateGitState(projectId, {\n        ahead: status.ahead,\n        behind: status.behind,\n      });\n\n      return {\n        success: !hasConflicts,\n        conflicts: status.conflicted,\n        summary: pullResult.summary,\n        files: pullResult.files\n      };\n    } catch (error) {\n      throw new Error(`Pull failed: ${error.message}`);\n    }\n  }\n\n  async push(projectId: string): Promise<any> {\n    try {\n      const git = this.getGitInstance(projectId);\n      const pushResult = await git.push();\n      \n      // Update git state\n      const status = await git.status();\n      await storage.updateGitState(projectId, {\n        ahead: status.ahead,\n        behind: status.behind,\n      });\n\n      return {\n        success: true,\n        pushed: pushResult.pushed || [],\n        remoteMessages: pushResult.remoteMessages\n      };\n    } catch (error) {\n      throw new Error(`Push failed: ${error.message}`);\n    }\n  }\n\n  async manageBranch(projectId: string, action: 'create' | 'switch' | 'delete', name: string): Promise<any> {\n    try {\n      const git = this.getGitInstance(projectId);\n      \n      switch (action) {\n        case 'create':\n          await git.checkoutLocalBranch(name);\n          break;\n        case 'switch':\n          await git.checkout(name);\n          break;\n        case 'delete':\n          await git.deleteLocalBranch(name);\n          break;\n      }\n\n      const currentBranch = await git.revparse(['--abbrev-ref', 'HEAD']);\n      const status = await git.status();\n      \n      await storage.updateGitState(projectId, {\n        branch: currentBranch,\n        ahead: status.ahead,\n        behind: status.behind,\n      });\n\n      return {\n        success: true,\n        currentBranch,\n        action,\n        branchName: name\n      };\n    } catch (error) {\n      throw new Error(`Branch ${action} failed: ${error.message}`);\n    }\n  }\n\n  async getStatus(projectId: string): Promise<any> {\n    try {\n      const projectPath = path.join(process.cwd(), 'projects', projectId);\n      \n      // Check if project directory exists\n      if (!fs.existsSync(projectPath)) {\n        throw new Error('Project directory not found');\n      }\n\n      const git = this.getGitInstance(projectId);\n      \n      // Initialize git repo if it doesn't exist\n      const gitDir = path.join(projectPath, '.git');\n      if (!fs.existsSync(gitDir)) {\n        await git.init();\n        await git.addConfig('user.name', 'Reme Agent');\n        await git.addConfig('user.email', 'agent@reme.dev');\n      }\n\n      const status = await git.status();\n      \n      return {\n        branch: status.current || 'main',\n        ahead: status.ahead || 0,\n        behind: status.behind || 0,\n        staged: status.staged || [],\n        modified: status.modified || [],\n        created: status.created || [],\n        deleted: status.deleted || [],\n        conflicted: status.conflicted || [],\n        clean: status.isClean()\n      };\n    } catch (error) {\n      console.error(`Git status failed for project ${projectId}:`, error);\n      // Return default status instead of throwing\n      return {\n        branch: 'main',\n        ahead: 0,\n        behind: 0,\n        staged: [],\n        modified: [],\n        created: [],\n        deleted: [],\n        conflicted: [],\n        clean: true\n      };\n    }\n  }\n\n  async initializeProject(projectId: string, repoUrl?: string): Promise<void> {\n    const projectPath = path.join(process.cwd(), 'projects', projectId);\n    \n    if (!fs.existsSync(projectPath)) {\n      fs.mkdirSync(projectPath, { recursive: true });\n    }\n\n    const git = simpleGit(projectPath);\n\n    if (repoUrl) {\n      await git.clone(repoUrl, projectPath);\n    } else {\n      await git.init();\n    }\n  }\n}\n\nexport const gitService = new GitService();\n","size_bytes":5370},"server/services/indexer.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport Parser from 'tree-sitter';\nimport TypeScript from 'tree-sitter-typescript';\n\ninterface FileNode {\n  name: string;\n  path: string;\n  type: 'file' | 'directory';\n  children?: FileNode[];\n  extension?: string;\n  size?: number;\n  modified?: boolean;\n}\n\ninterface ProjectIndex {\n  symbols: Record<string, any>;\n  imports: Record<string, string[]>;\n  exports: Record<string, string[]>;\n  lastUpdated: Date;\n}\n\nclass IndexerService {\n  private parser: Parser;\n  private indexes: Map<string, ProjectIndex> = new Map();\n\n  constructor() {\n    this.parser = new Parser();\n    this.parser.setLanguage(TypeScript.typescript);\n  }\n\n  async getFileTree(projectId: string): Promise<FileNode[]> {\n    const projectPath = path.join(process.cwd(), 'projects', projectId);\n    \n    if (!fs.existsSync(projectPath)) {\n      throw new Error('Project directory not found');\n    }\n\n    return this.buildFileTree(projectPath, projectPath);\n  }\n\n  async getFileContent(projectId: string, filePath: string): Promise<string> {\n    const fullPath = path.join(process.cwd(), 'projects', projectId, filePath);\n    \n    if (!fs.existsSync(fullPath)) {\n      throw new Error('File not found');\n    }\n\n    return fs.readFileSync(fullPath, 'utf-8');\n  }\n\n  async updateFileContent(projectId: string, filePath: string, content: string): Promise<void> {\n    const fullPath = path.join(process.cwd(), 'projects', projectId, filePath);\n    const dir = path.dirname(fullPath);\n    \n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    fs.writeFileSync(fullPath, content, 'utf-8');\n    \n    // Update index for this file\n    await this.indexFile(projectId, filePath, content);\n  }\n\n  async initializeProject(projectId: string, project: any): Promise<void> {\n    const projectPath = path.join(process.cwd(), 'projects', projectId);\n    \n    // Create project directory if it doesn't exist\n    if (!fs.existsSync(projectPath)) {\n      fs.mkdirSync(projectPath, { recursive: true });\n      \n      // Create basic files for new project\n      const welcomeContent = `# Welcome to ${project.name}\n\nThis is your Reme project. The AI agent is ready to help you build amazing things!\n\n## Getting Started\n- Use the file explorer to browse your project\n- Chat with the AI agent to request code changes\n- Review proposed changes in the diff panel\n- All changes require your approval in strict mode\n\nHappy coding! 🚀\n`;\n\n      const packageJson = {\n        name: project.name.toLowerCase().replace(/\\s+/g, '-'),\n        version: '1.0.0',\n        description: `Project ${project.name} created with Reme`,\n        main: 'index.js',\n        scripts: {\n          start: 'node index.js',\n          dev: 'nodemon index.js'\n        }\n      };\n\n      fs.writeFileSync(path.join(projectPath, 'README.md'), welcomeContent);\n      fs.writeFileSync(path.join(projectPath, 'package.json'), JSON.stringify(packageJson, null, 2));\n      fs.writeFileSync(path.join(projectPath, 'index.js'), '// Welcome to your new project!\\nconsole.log(\"Hello from Reme!\");\\n');\n    }\n    \n    // Build initial index\n    await this.buildProjectIndex(projectId);\n  }\n\n  async getProjectIndex(projectId: string): Promise<ProjectIndex> {\n    let index = this.indexes.get(projectId);\n    \n    if (!index) {\n      index = await this.buildProjectIndex(projectId);\n      this.indexes.set(projectId, index);\n    }\n\n    return index;\n  }\n\n  private async buildFileTree(currentPath: string, basePath: string): Promise<FileNode[]> {\n    const items = fs.readdirSync(currentPath);\n    const nodes: FileNode[] = [];\n\n    for (const item of items) {\n      const fullPath = path.join(currentPath, item);\n      const stats = fs.statSync(fullPath);\n      const relativePath = path.relative(basePath, fullPath);\n\n      // Skip common ignore patterns\n      if (this.shouldIgnore(item)) continue;\n\n      if (stats.isDirectory()) {\n        const children = await this.buildFileTree(fullPath, basePath);\n        nodes.push({\n          name: item,\n          path: relativePath,\n          type: 'directory',\n          children: children.length > 0 ? children : undefined\n        });\n      } else {\n        nodes.push({\n          name: item,\n          path: relativePath,\n          type: 'file',\n          extension: path.extname(item),\n          size: stats.size,\n          modified: false // This would be determined by git status\n        });\n      }\n    }\n\n    return nodes.sort((a, b) => {\n      // Directories first, then files, both alphabetically\n      if (a.type !== b.type) {\n        return a.type === 'directory' ? -1 : 1;\n      }\n      return a.name.localeCompare(b.name);\n    });\n  }\n\n  private shouldIgnore(name: string): boolean {\n    const ignorePatterns = [\n      'node_modules',\n      '.git',\n      '.DS_Store',\n      'dist',\n      'build',\n      '*.log',\n      '.env',\n      '.vscode',\n      '.idea'\n    ];\n\n    return ignorePatterns.some(pattern => {\n      if (pattern.includes('*')) {\n        const regex = new RegExp(pattern.replace('*', '.*'));\n        return regex.test(name);\n      }\n      return name === pattern;\n    });\n  }\n\n  private async buildProjectIndex(projectId: string): Promise<ProjectIndex> {\n    const projectPath = path.join(process.cwd(), 'projects', projectId);\n    const index: ProjectIndex = {\n      symbols: {},\n      imports: {},\n      exports: {},\n      lastUpdated: new Date()\n    };\n\n    await this.indexDirectory(projectPath, projectPath, index);\n    return index;\n  }\n\n  private async indexDirectory(currentPath: string, basePath: string, index: ProjectIndex): Promise<void> {\n    if (!fs.existsSync(currentPath)) return;\n\n    const items = fs.readdirSync(currentPath);\n\n    for (const item of items) {\n      const fullPath = path.join(currentPath, item);\n      const stats = fs.statSync(fullPath);\n\n      if (stats.isDirectory() && !this.shouldIgnore(item)) {\n        await this.indexDirectory(fullPath, basePath, index);\n      } else if (stats.isFile() && this.isCodeFile(item)) {\n        const relativePath = path.relative(basePath, fullPath);\n        const content = fs.readFileSync(fullPath, 'utf-8');\n        await this.indexFile('', relativePath, content, index);\n      }\n    }\n  }\n\n  private async indexFile(projectId: string, filePath: string, content: string, index?: ProjectIndex): Promise<void> {\n    if (!index && projectId) {\n      index = await this.getProjectIndex(projectId);\n    }\n\n    if (!index) return;\n\n    try {\n      const tree = this.parser.parse(content);\n      const symbols = this.extractSymbols(tree.rootNode, content);\n      const imports = this.extractImports(tree.rootNode, content);\n      const exports = this.extractExports(tree.rootNode, content);\n\n      index.symbols[filePath] = symbols;\n      index.imports[filePath] = imports;\n      index.exports[filePath] = exports;\n      index.lastUpdated = new Date();\n    } catch (error) {\n      console.error(`Failed to index file ${filePath}:`, error);\n    }\n  }\n\n  private isCodeFile(filename: string): boolean {\n    const codeExtensions = ['.ts', '.tsx', '.js', '.jsx', '.vue', '.py', '.go', '.rs', '.java', '.c', '.cpp', '.h'];\n    const ext = path.extname(filename).toLowerCase();\n    return codeExtensions.includes(ext);\n  }\n\n  private extractSymbols(node: any, source: string): any[] {\n    const symbols = [];\n\n    const extractFromNode = (n: any) => {\n      if (n.type === 'function_declaration' || n.type === 'function_expression') {\n        const nameNode = n.childForFieldName('name');\n        if (nameNode) {\n          symbols.push({\n            type: 'function',\n            name: source.slice(nameNode.startIndex, nameNode.endIndex),\n            line: nameNode.startPosition.row + 1,\n            column: nameNode.startPosition.column + 1\n          });\n        }\n      } else if (n.type === 'class_declaration') {\n        const nameNode = n.childForFieldName('name');\n        if (nameNode) {\n          symbols.push({\n            type: 'class',\n            name: source.slice(nameNode.startIndex, nameNode.endIndex),\n            line: nameNode.startPosition.row + 1,\n            column: nameNode.startPosition.column + 1\n          });\n        }\n      } else if (n.type === 'variable_declarator') {\n        const nameNode = n.childForFieldName('name');\n        if (nameNode) {\n          symbols.push({\n            type: 'variable',\n            name: source.slice(nameNode.startIndex, nameNode.endIndex),\n            line: nameNode.startPosition.row + 1,\n            column: nameNode.startPosition.column + 1\n          });\n        }\n      }\n\n      for (let i = 0; i < n.childCount; i++) {\n        extractFromNode(n.child(i));\n      }\n    };\n\n    extractFromNode(node);\n    return symbols;\n  }\n\n  private extractImports(node: any, source: string): string[] {\n    const imports = [];\n\n    const extractFromNode = (n: any) => {\n      if (n.type === 'import_statement') {\n        const sourceNode = n.childForFieldName('source');\n        if (sourceNode) {\n          const importPath = source.slice(sourceNode.startIndex + 1, sourceNode.endIndex - 1); // Remove quotes\n          imports.push(importPath);\n        }\n      }\n\n      for (let i = 0; i < n.childCount; i++) {\n        extractFromNode(n.child(i));\n      }\n    };\n\n    extractFromNode(node);\n    return imports;\n  }\n\n  private extractExports(node: any, source: string): string[] {\n    const exports = [];\n\n    const extractFromNode = (n: any) => {\n      if (n.type === 'export_statement' || n.type === 'export_declaration') {\n        // Extract export information\n        const declarationNode = n.childForFieldName('declaration');\n        if (declarationNode) {\n          const nameNode = declarationNode.childForFieldName('name');\n          if (nameNode) {\n            exports.push(source.slice(nameNode.startIndex, nameNode.endIndex));\n          }\n        }\n      }\n\n      for (let i = 0; i < n.childCount; i++) {\n        extractFromNode(n.child(i));\n      }\n    };\n\n    extractFromNode(node);\n    return exports;\n  }\n}\n\nexport const indexerService = new IndexerService();\n","size_bytes":10048},"server/services/memory.ts":{"content":"import { storage } from '../storage';\nimport type { MemoryNote } from '@shared/schema';\n\nclass MemoryService {\n  async getHotMemory(projectId: string): Promise<MemoryNote[]> {\n    // Hot memory: Current brief, last 3 sessions, active files\n    // Always in prompt bundle\n    const recentNotes = await storage.getProjectMemoryNotes(projectId, 10);\n    const recentSessions = await storage.getProjectSessions(projectId);\n    \n    // Combine and sort by recency\n    return recentNotes.slice(0, 5);\n  }\n\n  async getWarmMemory(projectId: string, query: string): Promise<MemoryNote[]> {\n    // Warm memory: Retrieved by keyword or vector search\n    // Last 30-60 days distilled into short notes\n    const searchResults = await storage.searchMemoryNotes(projectId, query);\n    \n    // In a real implementation, this would use embeddings/vector search\n    // For now, use simple text matching\n    return searchResults.slice(0, 3);\n  }\n\n  async getColdMemory(projectId: string, sessionId?: string): Promise<any> {\n    // Cold memory: Full history, loaded on demand only\n    if (sessionId) {\n      const session = await storage.getSession(sessionId);\n      const changes = await storage.getSessionFileChanges(sessionId);\n      const testRuns = await storage.getSessionTestRuns(sessionId);\n      \n      return {\n        session,\n        changes,\n        testRuns\n      };\n    }\n\n    return null;\n  }\n\n  async addSessionMemory(sessionId: string, summary: string, tags: string[] = []): Promise<MemoryNote> {\n    const session = await storage.getSession(sessionId);\n    if (!session) throw new Error('Session not found');\n\n    const note = await storage.createMemoryNote({\n      projectId: session.projectId,\n      content: `Session ${sessionId}: ${summary}`,\n      tags: ['session', ...tags],\n      links: [sessionId]\n    });\n\n    return note;\n  }\n\n  async addProjectNote(projectId: string, content: string, tags: string[] = []): Promise<MemoryNote> {\n    return storage.createMemoryNote({\n      projectId,\n      content,\n      tags,\n      links: []\n    });\n  }\n\n  async searchMemory(projectId: string, query: string, options?: {\n    includeHot?: boolean;\n    includeWarm?: boolean;\n    maxResults?: number;\n  }): Promise<MemoryNote[]> {\n    const { includeHot = true, includeWarm = true, maxResults = 10 } = options || {};\n    \n    let results: MemoryNote[] = [];\n\n    if (includeHot) {\n      const hotMemory = await this.getHotMemory(projectId);\n      results.push(...hotMemory);\n    }\n\n    if (includeWarm) {\n      const warmMemory = await this.getWarmMemory(projectId, query);\n      results.push(...warmMemory);\n    }\n\n    // Remove duplicates and limit results\n    const unique = results.filter((note, index, arr) => \n      arr.findIndex(n => n.id === note.id) === index\n    );\n\n    return unique.slice(0, maxResults);\n  }\n\n  async distillDailySessions(projectId: string, date: Date): Promise<void> {\n    // Nightly distillation job\n    // Summarize daily sessions per project into 10-20 lines\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    \n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const sessions = await storage.getProjectSessions(projectId);\n    const dailySessions = sessions.filter(session => \n      session.createdAt >= startOfDay && session.createdAt <= endOfDay\n    );\n\n    if (dailySessions.length === 0) return;\n\n    // Create distilled summary\n    const summary = `Daily summary for ${date.toISOString().split('T')[0]}:\n${dailySessions.length} sessions completed.\nGoals: ${dailySessions.map(s => s.prompt.slice(0, 50)).join('; ')}\nFiles modified: ${dailySessions.flatMap(s => s.scopeJson?.files || []).join(', ')}`;\n\n    await storage.createMemoryNote({\n      projectId,\n      content: summary,\n      tags: ['daily-summary', date.toISOString().split('T')[0]],\n      links: dailySessions.map(s => s.id)\n    });\n  }\n}\n\nexport const memoryService = new MemoryService();\n","size_bytes":3944},"server/services/models.ts":{"content":"import { OpenAI } from 'openai';\nimport Anthropic from '@anthropic-ai/sdk';\n\nexport interface ModelConfig {\n  name: string;\n  provider: 'openai' | 'anthropic' | 'ollama' | 'local';\n  maxTokens: number;\n  costPerToken: number;\n  capabilities: string[];\n  local: boolean;\n}\n\nexport class ModelRouter {\n  private openai: OpenAI | null = null;\n  private anthropic: Anthropic | null = null;\n  private ollama: any;\n  private models: Map<string, ModelConfig> = new Map();\n  private ollamaAvailable: boolean = false;\n\n  constructor() {\n    if (process.env.OPENAI_API_KEY) {\n      this.openai = new OpenAI({\n        apiKey: process.env.OPENAI_API_KEY,\n      });\n    } else {\n      console.warn('OPENAI_API_KEY not provided, OpenAI models will be unavailable');\n    }\n\n    if (process.env.ANTHROPIC_API_KEY) {\n      this.anthropic = new Anthropic({\n        apiKey: process.env.ANTHROPIC_API_KEY,\n      });\n    } else {\n      console.warn('ANTHROPIC_API_KEY not provided, Anthropic models will be unavailable');\n    }\n    \n    this.initializeOllama();\n    this.initializeModels();\n  }\n\n  private async initializeOllama() {\n    try {\n      const Ollama = await import('ollama');\n      this.ollama = new Ollama.Ollama({\n        host: process.env.OLLAMA_HOST || 'http://localhost:11434',\n      });\n      this.ollamaAvailable = true;\n    } catch (error) {\n      console.warn('Ollama not available, using cloud models only:', (error as Error).message);\n      this.ollamaAvailable = false;\n    }\n  }\n\n  private initializeModels() {\n    // Anthropic Models (Primary)\n    this.models.set('claude-sonnet-4', {\n      name: 'claude-sonnet-4-20250514',\n      provider: 'anthropic',\n      maxTokens: 200000,\n      costPerToken: 0.00003,\n      capabilities: ['code', 'analysis', 'reasoning', 'vision'],\n      local: false\n    });\n\n    this.models.set('claude-3-7-sonnet', {\n      name: 'claude-3-7-sonnet-20250219',\n      provider: 'anthropic',\n      maxTokens: 200000,\n      costPerToken: 0.00003,\n      capabilities: ['code', 'analysis', 'reasoning', 'vision'],\n      local: false\n    });\n\n    // OpenAI Models (Fallback)\n    this.models.set('gpt-4o', {\n      name: 'gpt-4o',\n      provider: 'openai',\n      maxTokens: 128000,\n      costPerToken: 0.00003,\n      capabilities: ['code', 'analysis', 'reasoning', 'vision'],\n      local: false\n    });\n\n    this.models.set('gpt-4o-mini', {\n      name: 'gpt-4o-mini',\n      provider: 'openai', \n      maxTokens: 128000,\n      costPerToken: 0.000015,\n      capabilities: ['code', 'analysis', 'reasoning'],\n      local: false\n    });\n\n    // Local Models via Ollama\n    this.models.set('codegemma', {\n      name: 'codegemma:7b',\n      provider: 'ollama',\n      maxTokens: 8192,\n      costPerToken: 0,\n      capabilities: ['code', 'completion'],\n      local: true\n    });\n\n    this.models.set('qwen2.5-coder', {\n      name: 'qwen2.5-coder:7b',\n      provider: 'ollama',\n      maxTokens: 32768,\n      costPerToken: 0,\n      capabilities: ['code', 'analysis', 'reasoning'],\n      local: true\n    });\n\n    this.models.set('llama3.2', {\n      name: 'llama3.2:3b',\n      provider: 'ollama',\n      maxTokens: 128000,\n      costPerToken: 0,\n      capabilities: ['reasoning', 'analysis'],\n      local: true\n    });\n  }\n\n  async routeRequest(task: {\n    type: 'code' | 'analysis' | 'reasoning' | 'completion' | 'vision';\n    complexity: 'low' | 'medium' | 'high';\n    urgency: 'low' | 'medium' | 'high';\n    tokens: number;\n    preferLocal?: boolean;\n  }): Promise<ModelConfig> {\n    const candidates = Array.from(this.models.values()).filter(model => \n      model.capabilities.includes(task.type) && \n      model.maxTokens >= task.tokens\n    );\n\n    // Prefer local models for simple tasks\n    if (task.complexity === 'low' && task.preferLocal !== false) {\n      const localCandidates = candidates.filter(m => m.local);\n      if (localCandidates.length > 0) {\n        return localCandidates[0];\n      }\n    }\n\n    // For complex tasks or when local models aren't available\n    if (task.complexity === 'high' || task.urgency === 'high') {\n      return this.models.get('claude-sonnet-4')!;\n    }\n\n    // Default to cost-effective Claude option\n    return this.models.get('claude-3-7-sonnet')!;\n  }\n\n  async generateCompletion(modelConfig: ModelConfig, messages: any[], options: any = {}): Promise<{ content: string; tokens: number; cost: number }> {\n    if (modelConfig.provider === 'anthropic' && this.anthropic) {\n      // Separate system messages from user/assistant messages for Claude\n      const systemMessages = messages.filter(m => m.role === 'system');\n      const conversationMessages = messages.filter(m => m.role !== 'system');\n      \n      const response = await this.anthropic.messages.create({\n        model: modelConfig.name,\n        system: systemMessages.map(m => m.content).join('\\n') || undefined,\n        messages: conversationMessages,\n        max_tokens: Math.min(options.maxTokens || 4000, modelConfig.maxTokens),\n        temperature: options.temperature || 0.7,\n      });\n      \n      return {\n        content: response.content[0].type === 'text' ? response.content[0].text : '',\n        tokens: response.usage?.input_tokens + response.usage?.output_tokens || 0,\n        cost: ((response.usage?.input_tokens + response.usage?.output_tokens) || 0) * modelConfig.costPerToken\n      };\n    } else if (modelConfig.provider === 'openai' && this.openai) {\n      const response = await this.openai.chat.completions.create({\n        model: modelConfig.name,\n        messages,\n        max_tokens: Math.min(options.maxTokens || 4000, modelConfig.maxTokens),\n        temperature: options.temperature || 0.7,\n        ...options\n      });\n      \n      return {\n        content: response.choices[0].message.content || '',\n        tokens: response.usage?.total_tokens || 0,\n        cost: (response.usage?.total_tokens || 0) * modelConfig.costPerToken\n      };\n    } else if (modelConfig.provider === 'ollama' && this.ollamaAvailable) {\n      try {\n        const response = await this.ollama.chat({\n          model: modelConfig.name,\n          messages,\n          options: {\n            num_predict: Math.min(options.maxTokens || 4000, modelConfig.maxTokens),\n            temperature: options.temperature || 0.7,\n          }\n        });\n\n        return {\n          content: response.message.content,\n          tokens: 0, // Ollama doesn't provide token counts\n          cost: 0\n        };\n      } catch (error) {\n        console.warn(`Ollama request failed, falling back to OpenAI:`, error);\n        // Fallback to GPT-4o-mini for local model failures\n        return this.generateCompletion(this.models.get('gpt-4o-mini')!, messages, options);\n      }\n    }\n\n    throw new Error(`Unsupported provider: ${modelConfig.provider}`);\n  }\n\n  async pullLocalModel(modelName: string): Promise<void> {\n    if (!this.ollamaAvailable) {\n      throw new Error('Ollama not available');\n    }\n    await this.ollama.pull({ model: modelName });\n  }\n\n  async listLocalModels(): Promise<string[]> {\n    if (!this.ollamaAvailable) {\n      return [];\n    }\n    \n    try {\n      const response = await this.ollama.list();\n      return response.models.map((model: any) => model.name);\n    } catch (error) {\n      console.warn('Failed to list Ollama models:', error);\n      return [];\n    }\n  }\n\n  getAvailableModels(): ModelConfig[] {\n    return Array.from(this.models.values());\n  }\n}\n\nexport const modelRouter = new ModelRouter();","size_bytes":7428},"server/services/vector.ts":{"content":"import { ChromaApi, OpenAIEmbeddingFunction, Collection } from 'chromadb';\nimport { OpenAI } from 'openai';\n\nexport class VectorService {\n  private client: any;\n  private openai: OpenAI;\n  private embeddingFunction: any;\n  private collections: Map<string, any> = new Map();\n  private isAvailable: boolean = false;\n\n  constructor() {\n    if (process.env.OPENAI_API_KEY) {\n      this.openai = new OpenAI({\n        apiKey: process.env.OPENAI_API_KEY,\n      });\n    } else {\n      console.warn('OPENAI_API_KEY not provided, AI features will be limited');\n    }\n\n    this.initializeChroma();\n  }\n\n  private async initializeChroma() {\n    try {\n      // Dynamic import to handle potential module issues\n      const chromadb = await import('chromadb');\n      this.client = new chromadb.ChromaApi({\n        host: process.env.CHROMA_HOST || 'localhost',\n        port: process.env.CHROMA_PORT ? parseInt(process.env.CHROMA_PORT) : 8000,\n      });\n      \n      this.embeddingFunction = new chromadb.OpenAIEmbeddingFunction({\n        openai_api_key: process.env.OPENAI_API_KEY,\n        openai_model: 'text-embedding-3-small'\n      });\n      \n      this.isAvailable = true;\n    } catch (error) {\n      console.warn('ChromaDB not available, vector features disabled:', error.message);\n      this.isAvailable = false;\n    }\n  }\n\n  async getCollection(name: string): Promise<any> {\n    if (!this.isAvailable) {\n      throw new Error('ChromaDB not available');\n    }\n\n    if (this.collections.has(name)) {\n      return this.collections.get(name)!;\n    }\n\n    try {\n      const collection = await this.client.getCollection({\n        name,\n        embeddingFunction: this.embeddingFunction\n      });\n      this.collections.set(name, collection);\n      return collection;\n    } catch (error) {\n      // Collection doesn't exist, create it\n      const collection = await this.client.createCollection({\n        name,\n        embeddingFunction: this.embeddingFunction\n      });\n      this.collections.set(name, collection);\n      return collection;\n    }\n  }\n\n  async addProjectCode(projectId: string, files: { path: string; content: string; type: string }[]) {\n    if (!this.isAvailable) {\n      console.warn('ChromaDB not available, skipping project code indexing');\n      return;\n    }\n\n    try {\n      const collection = await this.getCollection(`project_${projectId}`);\n      \n      const documents = files.map(file => file.content);\n      const metadatas = files.map(file => ({\n        path: file.path,\n        type: file.type,\n        project_id: projectId,\n        indexed_at: new Date().toISOString()\n      }));\n      const ids = files.map(file => `${projectId}_${file.path}`);\n\n      await collection.add({\n        documents,\n        metadatas,\n        ids\n      });\n    } catch (error) {\n      console.warn('Failed to index project code:', error);\n    }\n  }\n\n  async searchProjectCode(projectId: string, query: string, limit: number = 10) {\n    if (!this.isAvailable) {\n      return { documents: [[]], metadatas: [[]], ids: [[]], distances: [[]] };\n    }\n\n    try {\n      const collection = await this.getCollection(`project_${projectId}`);\n      \n      const results = await collection.query({\n        queryTexts: [query],\n        nResults: limit,\n        include: ['documents', 'metadatas', 'distances']\n      });\n\n      return results;\n    } catch (error) {\n      console.warn('Project code search failed:', error);\n      return { documents: [[]], metadatas: [[]], ids: [[]], distances: [[]] };\n    }\n  }\n\n  async addMemoryNote(sessionId: string, content: string, tags: string[] = [], links: string[] = []) {\n    if (!this.isAvailable) {\n      console.warn('ChromaDB not available, skipping memory note storage');\n      return;\n    }\n\n    try {\n      const collection = await this.getCollection('memory_notes');\n      \n      await collection.add({\n        documents: [content],\n        metadatas: [{\n          session_id: sessionId,\n          tags: tags.join(','),\n          links: links.join(','),\n          created_at: new Date().toISOString()\n        }],\n        ids: [`memory_${sessionId}_${Date.now()}`]\n      });\n    } catch (error) {\n      console.warn('Failed to store memory note:', error);\n    }\n  }\n\n  async searchMemory(query: string, tags: string[] = [], limit: number = 20) {\n    if (!this.isAvailable) {\n      return { documents: [[]], metadatas: [[]], ids: [[]], distances: [[]] };\n    }\n\n    try {\n      const collection = await this.getCollection('memory_notes');\n      \n      const results = await collection.query({\n        queryTexts: [query],\n        nResults: limit,\n        include: ['documents', 'metadatas', 'distances']\n      });\n\n      return results;\n    } catch (error) {\n      console.warn('Memory search failed:', error);\n      return { documents: [[]], metadatas: [[]], ids: [[]], distances: [[]] };\n    }\n  }\n\n  async generateEmbedding(text: string): Promise<number[]> {\n    const response = await this.openai.embeddings.create({\n      model: 'text-embedding-3-small',\n      input: text,\n    });\n    \n    return response.data[0].embedding;\n  }\n\n  async addProjectTemplate(templateId: string, template: {\n    name: string;\n    description: string;\n    category: string;\n    files: { path: string; content: string }[];\n    dependencies: string[];\n  }) {\n    const collection = await this.getCollection('project_templates');\n    \n    const searchableContent = [\n      template.name,\n      template.description,\n      template.category,\n      ...template.files.map(f => f.content).slice(0, 5), // Limit to first 5 files for indexing\n    ].join('\\n');\n\n    await collection.add({\n      documents: [searchableContent],\n      metadatas: [{\n        template_id: templateId,\n        name: template.name,\n        description: template.description,\n        category: template.category,\n        dependencies: template.dependencies.join(','),\n        file_count: template.files.length,\n        created_at: new Date().toISOString()\n      }],\n      ids: [`template_${templateId}`]\n    });\n  }\n\n  async searchTemplates(query: string, category?: string, limit: number = 20) {\n    const collection = await this.getCollection('project_templates');\n    \n    let whereClause = {};\n    if (category) {\n      whereClause = { category };\n    }\n\n    const results = await collection.query({\n      queryTexts: [query],\n      nResults: limit,\n      where: Object.keys(whereClause).length > 0 ? whereClause : undefined,\n      include: ['documents', 'metadatas', 'distances']\n    });\n\n    return results;\n  }\n\n  async deleteCollection(name: string) {\n    await this.client.deleteCollection({ name });\n    this.collections.delete(name);\n  }\n}\n\nexport const vectorService = new VectorService();","size_bytes":6688},"client/src/components/AgentPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\ninterface AgentPanelProps {\n  projectId: string;\n  sessions: any[];\n  isConnected: boolean;\n  onSendMessage: (message: string) => void;\n}\n\nexport default function AgentPanel({ sessions, isConnected, onSendMessage }: AgentPanelProps) {\n  const [message, setMessage] = useState(\"\");\n  \n  // Collect all messages from all sessions and sort by timestamp\n  const messages = sessions?.reduce((allMessages: any[], session) => {\n    const sessionMessages = session.messages || [];\n    return [...allMessages, ...sessionMessages];\n  }, []).sort((a: any, b: any) => \n    new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n  ) || [];\n\n  const handleSendMessage = () => {\n    if (message.trim()) {\n      onSendMessage(message);\n      setMessage(\"\");\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Session Status */}\n      <div className=\"p-4 border-b border-github-border/50 bg-gradient-to-r from-github-surface to-github-bg\">\n        <div className=\"flex items-center space-x-3 mb-2\">\n          <div className={cn(\n            \"w-2.5 h-2.5 rounded-full\",\n            isConnected ? \"bg-github-success animate-pulse shadow-lg shadow-github-success/50\" : \"bg-github-error\"\n          )} />\n          <span className=\"text-sm font-bold text-github-primary tracking-wide\">\n            AGENT {isConnected ? \"ONLINE\" : \"OFFLINE\"}\n          </span>\n        </div>\n        <div className=\"text-xs text-github-accent font-mono\">\n          {'>> strict_scope_mode: true'}\n        </div>\n      </div>\n\n      {/* Chat History */}\n      <ScrollArea className=\"flex-1 p-4\">\n        <div className=\"space-y-4\">\n          {messages.length === 0 ? (\n            <div className=\"text-center text-github-text-secondary py-8\">\n              <div className=\"text-github-primary text-3xl mb-4 animate-pulse\">\n                <i className=\"fas fa-terminal\"></i>\n              </div>\n              <p className=\"text-sm font-mono\">$ reme --help</p>\n              <p className=\"text-xs mt-2 text-github-accent\">Ready to build. Enter commands to begin...</p>\n            </div>\n          ) : (\n            messages.map((msg: any, index: number) => (\n              <div key={index} className=\"flex space-x-3 animate-fade-in\">\n                <div className={cn(\n                  \"flex-shrink-0 w-7 h-7 rounded-md flex items-center justify-center font-bold text-xs border\",\n                  msg.role === 'user' \n                    ? \"bg-github-primary/20 text-github-primary border-github-primary/30\" \n                    : \"bg-github-success/20 text-github-success border-github-success/30\"\n                )}>\n                  {msg.role === 'user' ? '$' : 'AI'}\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"bg-github-surface/50 border border-github-border rounded-md p-3 text-sm font-mono leading-relaxed\">\n                    {msg.content}\n                  </div>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <span className=\"text-xs text-github-text-secondary font-mono\">\n                      [{new Date(msg.timestamp || Date.now()).toLocaleTimeString()}]\n                    </span>\n                    {msg.role === 'assistant' && (\n                      <span className=\"text-xs text-github-success font-mono\">✓ completed</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </ScrollArea>\n\n      {/* Message Input */}\n      <div className=\"border-t border-github-border/50 p-4\">\n        <div className=\"flex space-x-2\">\n          <Input\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"> ask_reme --build <application>\"\n            className=\"flex-1 bg-github-surface border-github-border text-github-text placeholder:text-github-text-secondary font-mono\"\n            disabled={!isConnected}\n          />\n          <Button\n            onClick={handleSendMessage}\n            disabled={!message.trim() || !isConnected}\n            size=\"sm\"\n            className=\"bg-github-primary hover:bg-github-primary/90 text-black font-bold px-4 shadow-lg shadow-github-primary/25\"\n          >\n            <i className=\"fas fa-terminal mr-1\"></i>\n            EXEC\n          </Button>\n        </div>\n        <div className=\"text-xs text-github-accent mt-2 font-mono\">\n          {isConnected ? \">> agent_status: ready_for_commands\" : \">> connection: establishing...\"}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4996},"client/src/components/DiffPanel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DiffPanelProps {\n  projectId: string;\n}\n\ninterface HunkData {\n  id: string;\n  oldStart: number;\n  oldLines: number;\n  newStart: number;\n  newLines: number;\n  content: string;\n  rationale: string;\n  approved: boolean;\n}\n\ninterface FileChange {\n  id: string;\n  filePath: string;\n  changeType: string;\n  hunks: HunkData[];\n  applied: boolean;\n}\n\nexport default function DiffPanel({ projectId }: DiffPanelProps) {\n  const { data: sessions } = useQuery({\n    queryKey: ['/api/sessions', projectId],\n  });\n\n  // Mock data for demonstration\n  const fileChanges: FileChange[] = [\n    {\n      id: \"1\",\n      filePath: \"components/ShareModal.tsx\",\n      changeType: \"modify\",\n      applied: false,\n      hunks: [\n        {\n          id: \"hunk-1\",\n          oldStart: 42,\n          oldLines: 3,\n          newStart: 42,\n          newLines: 8,\n          approved: false,\n          rationale: \"Add copy button functionality to modal header\",\n          content: `@@ -42,3 +42,8 @@ export function ShareModal({ isOpen, onClose }) {\n   return (\n     <Modal isOpen={isOpen} onClose={onClose}>\n       <div className=\"modal-header\">\n+        <button \n+          onClick={handleCopy}\n+          className=\"copy-btn\"\n+        >\n+          <CopyIcon />\n+        </button>\n       </div>`\n        }\n      ]\n    },\n    {\n      id: \"2\", \n      filePath: \"utils/clipboard.ts\",\n      changeType: \"create\",\n      applied: false,\n      hunks: [\n        {\n          id: \"hunk-2\",\n          oldStart: 0,\n          oldLines: 0,\n          newStart: 1,\n          newLines: 12,\n          approved: false,\n          rationale: \"Create clipboard utility function for copy operations\",\n          content: `@@ -0,0 +1,12 @@\n+export async function copyToClipboard(text: string): Promise<boolean> {\n+  try {\n+    await navigator.clipboard.writeText(text);\n+    return true;\n+  } catch (error) {\n+    console.error('Failed to copy to clipboard:', error);\n+    return false;\n+  }\n+}\n+\n+export const showCopyFeedback = (success: boolean) => {\n+  // Show toast notification\n+};`\n        }\n      ]\n    }\n  ];\n\n  const renderDiffContent = (content: string) => {\n    const lines = content.split('\\n');\n    return (\n      <div className=\"font-mono text-xs bg-github-bg rounded p-3 space-y-1\">\n        {lines.map((line, index) => {\n          let className = \"whitespace-pre\";\n          if (line.startsWith('+')) {\n            className += \" text-green-400 bg-green-400/10\";\n          } else if (line.startsWith('-')) {\n            className += \" text-red-400 bg-red-400/10\";\n          } else if (line.startsWith('@@')) {\n            className += \" text-github-primary\";\n          } else {\n            className += \" text-github-text-secondary\";\n          }\n          \n          return (\n            <div key={index} className={className}>\n              {line}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-github-border/50\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-sm font-medium\">File Changes</h3>\n          <div className=\"text-xs text-github-text-secondary\">\n            {fileChanges.length} files, {fileChanges.reduce((acc, f) => acc + f.hunks.length, 0)} hunks\n          </div>\n        </div>\n      </div>\n\n      {/* File Changes List */}\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4 space-y-4\">\n          {fileChanges.map((fileChange) => (\n            <div key={fileChange.id} className=\"border border-github-border rounded-lg overflow-hidden\">\n              {/* File Header */}\n              <div className=\"p-3 bg-github-surface border-b border-github-border flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <i className={cn(\n                    \"fas text-sm\",\n                    fileChange.changeType === 'create' ? 'fa-plus text-green-400' :\n                    fileChange.changeType === 'modify' ? 'fa-edit text-yellow-400' :\n                    'fa-trash text-red-400'\n                  )} />\n                  <span className=\"font-mono text-sm\">{fileChange.filePath}</span>\n                  <span className={cn(\n                    \"px-2 py-1 text-xs rounded\",\n                    fileChange.changeType === 'create' ? 'bg-green-400/20 text-green-400' :\n                    fileChange.changeType === 'modify' ? 'bg-yellow-400/20 text-yellow-400' :\n                    'bg-red-400/20 text-red-400'\n                  )}>\n                    {fileChange.changeType}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-xs text-github-text-secondary\">\n                    {fileChange.hunks.length} hunks\n                  </span>\n                  <Checkbox />\n                </div>\n              </div>\n\n              {/* Hunks */}\n              <div className=\"space-y-3 p-3\">\n                {fileChange.hunks.map((hunk) => (\n                  <div key={hunk.id} className=\"space-y-2\">\n                    {/* Hunk Header */}\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <span className=\"font-mono text-xs text-github-text-secondary\">\n                            @@ -{hunk.oldStart},{hunk.oldLines} +{hunk.newStart},{hunk.newLines} @@\n                          </span>\n                          <Checkbox checked={hunk.approved} />\n                        </div>\n                        <p className=\"text-xs text-github-text-secondary mb-2\">\n                          {hunk.rationale}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Diff Content */}\n                    {renderDiffContent(hunk.content)}\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </ScrollArea>\n\n      {/* Actions */}\n      <div className=\"p-4 border-t border-github-border flex space-x-2\">\n        <Button \n          className=\"flex-1 bg-github-success hover:bg-github-success/90 text-white\"\n          size=\"sm\"\n        >\n          <i className=\"fas fa-check mr-2\" />\n          Apply Selected\n        </Button>\n        <Button \n          variant=\"outline\"\n          className=\"border-github-border hover:bg-github-border/50\"\n          size=\"sm\"\n        >\n          <i className=\"fas fa-undo mr-2\" />\n          Revert All\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6946},"client/src/components/FileExplorer.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FileNode {\n  name: string;\n  path: string;\n  type: 'file' | 'directory';\n  children?: FileNode[];\n  extension?: string;\n  modified?: boolean;\n}\n\ninterface FileExplorerProps {\n  projectId: string;\n  onFileSelect: (path: string) => void;\n}\n\nexport default function FileExplorer({ projectId, onFileSelect }: FileExplorerProps) {\n  const [expandedDirs, setExpandedDirs] = useState<Set<string>>(new Set());\n\n  const { data: fileTree, isLoading } = useQuery({\n    queryKey: ['/api/files', projectId],\n    enabled: !!projectId\n  });\n\n  const toggleDir = (path: string) => {\n    const newExpanded = new Set(expandedDirs);\n    if (newExpanded.has(path)) {\n      newExpanded.delete(path);\n    } else {\n      newExpanded.add(path);\n    }\n    setExpandedDirs(newExpanded);\n  };\n\n  const getFileIcon = (node: FileNode) => {\n    if (node.type === 'directory') {\n      return expandedDirs.has(node.path) ? 'fas fa-folder-open' : 'fas fa-folder';\n    }\n    \n    const ext = node.extension?.toLowerCase();\n    switch (ext) {\n      case '.tsx':\n      case '.ts':\n        return 'fas fa-file-code text-blue-400';\n      case '.js':\n      case '.jsx':\n        return 'fas fa-file-code text-yellow-400';\n      case '.json':\n        return 'fas fa-file-code text-green-400';\n      case '.md':\n        return 'fas fa-file-alt text-yellow-400';\n      case '.css':\n      case '.scss':\n        return 'fas fa-file-code text-purple-400';\n      default:\n        return 'fas fa-file text-github-text-secondary';\n    }\n  };\n\n  const renderNode = (node: FileNode, depth = 0) => {\n    const isExpanded = expandedDirs.has(node.path);\n    \n    return (\n      <div key={node.path} className=\"text-sm\">\n        <div\n          className={cn(\n            \"flex items-center space-x-2 py-1 px-2 hover:bg-github-border/30 rounded cursor-pointer\",\n            \"transition-colors\"\n          )}\n          style={{ paddingLeft: `${8 + depth * 16}px` }}\n          onClick={() => {\n            if (node.type === 'directory') {\n              toggleDir(node.path);\n            } else {\n              onFileSelect(node.path);\n            }\n          }}\n        >\n          {node.type === 'directory' && (\n            <i\n              className={cn(\n                \"text-xs text-github-text-secondary transition-transform\",\n                isExpanded ? \"fas fa-chevron-down\" : \"fas fa-chevron-right\"\n              )}\n            />\n          )}\n          {node.type === 'file' && <div className=\"w-3\" />}\n          \n          <i className={getFileIcon(node)} />\n          <span className={cn(\n            node.type === 'directory' ? 'text-github-warning' : 'text-github-text'\n          )}>\n            {node.name}\n          </span>\n          \n          {node.modified && (\n            <span className=\"ml-auto w-2 h-2 bg-orange-400 rounded-full\" title=\"Modified\" />\n          )}\n        </div>\n        \n        {node.type === 'directory' && isExpanded && node.children && (\n          <div>\n            {node.children.map(child => renderNode(child, depth + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 p-4\">\n        <div className=\"animate-pulse space-y-2\">\n          {[...Array(8)].map((_, i) => (\n            <div key={i} className=\"h-6 bg-github-border/30 rounded\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\">\n      {/* Project Info */}\n      <div className=\"px-4 py-2 border-b border-github-border/50\">\n        <div className=\"flex items-center space-x-2\">\n          <i className=\"fas fa-folder text-github-primary text-sm\"></i>\n          <span className=\"text-sm font-medium\">reme-full</span>\n          <span className=\"text-xs text-github-text-secondary\">(main)</span>\n        </div>\n      </div>\n\n      {/* File Tree */}\n      <div className=\"p-2\">\n        {fileTree?.map((node: FileNode) => renderNode(node))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4070},"client/src/components/GitPanel.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface GitPanelProps {\n  projectId: string;\n  gitStatus?: any;\n  onCommit: () => void;\n  onPull: () => void;\n  onPush: () => void;\n}\n\nexport default function GitPanel({ gitStatus, onCommit, onPull, onPush }: GitPanelProps) {\n  // Mock git status data\n  const mockGitStatus = {\n    branch: \"main\",\n    ahead: 2,\n    behind: 0,\n    staged: [\"components/ShareModal.tsx\", \"utils/clipboard.ts\"],\n    modified: [\"client/src/App.tsx\"],\n    created: [\"utils/clipboard.ts\"],\n    deleted: [],\n    conflicted: [],\n    clean: false\n  };\n\n  const status = gitStatus || mockGitStatus;\n\n  const getFileIcon = (filePath: string) => {\n    const ext = filePath.split('.').pop()?.toLowerCase();\n    switch (ext) {\n      case 'tsx':\n      case 'ts':\n        return 'fas fa-file-code text-blue-400';\n      case 'js':\n      case 'jsx':\n        return 'fas fa-file-code text-yellow-400';\n      case 'css':\n      case 'scss':\n        return 'fas fa-file-code text-purple-400';\n      default:\n        return 'fas fa-file text-github-text-secondary';\n    }\n  };\n\n  const getStatusIcon = (type: string) => {\n    switch (type) {\n      case 'staged':\n        return 'fas fa-plus text-green-400';\n      case 'modified':\n        return 'fas fa-edit text-yellow-400';\n      case 'created':\n        return 'fas fa-plus text-green-400';\n      case 'deleted':\n        return 'fas fa-minus text-red-400';\n      case 'conflicted':\n        return 'fas fa-exclamation-triangle text-orange-400';\n      default:\n        return 'fas fa-circle text-github-text-secondary';\n    }\n  };\n\n  const FileList = ({ files, type, title }: { files: string[]; type: string; title: string }) => {\n    if (files.length === 0) return null;\n\n    return (\n      <div className=\"mb-4\">\n        <h4 className=\"text-xs font-medium text-github-text-secondary uppercase mb-2\">\n          {title} ({files.length})\n        </h4>\n        <div className=\"space-y-1\">\n          {files.map((file, index) => (\n            <div \n              key={index}\n              className=\"flex items-center space-x-2 p-2 hover:bg-github-border/30 rounded text-sm\"\n            >\n              <i className={getStatusIcon(type)} />\n              <i className={getFileIcon(file)} />\n              <span className=\"flex-1 font-mono\">{file}</span>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                className=\"h-6 w-6 p-0 text-github-text-secondary hover:text-github-text\"\n              >\n                <i className=\"fas fa-plus text-xs\" />\n              </Button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Branch Info */}\n      <div className=\"p-4 border-b border-github-border/50\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-code-branch text-github-primary\" />\n            <span className=\"font-medium\">{status.branch}</span>\n          </div>\n          <div className=\"flex space-x-1\">\n            {status.ahead > 0 && (\n              <Badge variant=\"outline\" className=\"text-xs border-github-border\">\n                ↑{status.ahead}\n              </Badge>\n            )}\n            {status.behind > 0 && (\n              <Badge variant=\"outline\" className=\"text-xs border-github-border\">\n                ↓{status.behind}\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-3 gap-2\">\n          <Button\n            size=\"sm\"\n            onClick={onCommit}\n            disabled={status.staged.length === 0}\n            className={cn(\n              \"bg-github-success hover:bg-github-success/90 text-white\",\n              status.staged.length === 0 && \"opacity-50 cursor-not-allowed\"\n            )}\n          >\n            <i className=\"fas fa-plus mr-1\" />\n            Commit\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={onPull}\n            className=\"border-github-border hover:bg-github-border/50\"\n          >\n            <i className=\"fas fa-arrow-down mr-1\" />\n            Pull\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={onPush}\n            disabled={status.ahead === 0}\n            className={cn(\n              \"border-github-border hover:bg-github-border/50\",\n              status.ahead === 0 && \"opacity-50 cursor-not-allowed\"\n            )}\n          >\n            <i className=\"fas fa-arrow-up mr-1\" />\n            Push\n          </Button>\n        </div>\n      </div>\n\n      {/* File Changes */}\n      <ScrollArea className=\"flex-1 p-4\">\n        {status.clean ? (\n          <div className=\"text-center text-github-text-secondary py-8\">\n            <i className=\"fas fa-check-circle text-2xl mb-2 opacity-50\" />\n            <p className=\"text-sm\">Working tree clean</p>\n            <p className=\"text-xs mt-1\">No changes to commit</p>\n          </div>\n        ) : (\n          <div>\n            <FileList files={status.staged} type=\"staged\" title=\"Staged Changes\" />\n            <FileList files={status.modified} type=\"modified\" title=\"Modified Files\" />\n            <FileList files={status.created} type=\"created\" title=\"New Files\" />\n            <FileList files={status.deleted} type=\"deleted\" title=\"Deleted Files\" />\n            <FileList files={status.conflicted} type=\"conflicted\" title=\"Conflicts\" />\n          </div>\n        )}\n      </ScrollArea>\n\n      {/* Commit Message */}\n      {status.staged.length > 0 && (\n        <div className=\"p-4 border-t border-github-border\">\n          <textarea\n            placeholder=\"Commit message...\"\n            className=\"w-full p-2 text-sm bg-github-bg border border-github-border rounded resize-none\"\n            rows={3}\n          />\n          <div className=\"flex justify-between items-center mt-2 text-xs text-github-text-secondary\">\n            <span>{status.staged.length} files staged</span>\n            <span>⌘+Enter to commit</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6343},"client/src/components/MemoryPanel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface MemoryPanelProps {\n  projectId: string;\n}\n\nexport default function MemoryPanel({ projectId }: MemoryPanelProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: memoryNotes } = useQuery({\n    queryKey: ['/api/memory', projectId, 'search'],\n    queryFn: async () => {\n      const response = await fetch(`/api/memory/${projectId}/search?q=${encodeURIComponent(searchQuery)}`);\n      return response.json();\n    },\n    enabled: !!projectId\n  });\n\n  // Mock data for demonstration\n  const mockMemoryNotes = [\n    {\n      id: \"1\",\n      content: \"Added ShareModal component with copy functionality. Used clipboard API for better UX.\",\n      tags: [\"component\", \"modal\", \"clipboard\"],\n      createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n    },\n    {\n      id: \"2\", \n      content: \"Implemented strict scope validation in agent service. Agent now asks permission before expanding scope beyond initial request.\",\n      tags: [\"agent\", \"validation\", \"scope\"],\n      createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n    },\n    {\n      id: \"3\",\n      content: \"Set up Monaco editor with GitHub dark theme. Configured TypeScript syntax highlighting and bracket pair colorization.\",\n      tags: [\"editor\", \"monaco\", \"theme\", \"typescript\"],\n      createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n    },\n    {\n      id: \"4\",\n      content: \"Created WebSocket connection for real-time agent communication. Messages broadcast to all connected clients.\",\n      tags: [\"websocket\", \"realtime\", \"communication\"],\n      createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 1 week ago\n    }\n  ];\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n\n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    } else if (diffHours > 0) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    } else if (diffMinutes > 0) {\n      return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;\n    } else {\n      return 'Just now';\n    }\n  };\n\n  const filteredNotes = searchQuery \n    ? mockMemoryNotes.filter(note => \n        note.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        note.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))\n      )\n    : mockMemoryNotes;\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-github-border/50\">\n        <h3 className=\"text-sm font-medium mb-3\">Project Memory</h3>\n        <div className=\"flex space-x-2\">\n          <Input\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            placeholder=\"Search memories...\"\n            className=\"flex-1 bg-github-bg border-github-border text-github-text placeholder:text-github-text-secondary\"\n          />\n          <Button \n            size=\"sm\"\n            variant=\"outline\"\n            className=\"border-github-border hover:bg-github-border/50\"\n          >\n            <i className=\"fas fa-search\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Memory Categories */}\n      <div className=\"p-4 border-b border-github-border/50\">\n        <div className=\"flex flex-wrap gap-2 text-xs\">\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            className=\"h-6 px-2 border-github-border text-github-text-secondary hover:text-github-text\"\n          >\n            Recent\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            className=\"h-6 px-2 border-github-border text-github-text-secondary hover:text-github-text\"\n          >\n            Sessions\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            className=\"h-6 px-2 border-github-border text-github-text-secondary hover:text-github-text\"\n          >\n            Decisions\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            className=\"h-6 px-2 border-github-border text-github-text-secondary hover:text-github-text\"\n          >\n            Style Guide\n          </Button>\n        </div>\n      </div>\n\n      {/* Memory Notes List */}\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4 space-y-4\">\n          {filteredNotes.map((note) => (\n            <div \n              key={note.id}\n              className=\"p-3 border border-github-border rounded-lg hover:bg-github-border/20 transition-colors cursor-pointer\"\n            >\n              <p className=\"text-sm text-github-text mb-2\">\n                {note.content}\n              </p>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex flex-wrap gap-1\">\n                  {note.tags.map((tag) => (\n                    <Badge \n                      key={tag}\n                      variant=\"secondary\"\n                      className=\"text-xs bg-github-primary/20 text-github-primary hover:bg-github-primary/30\"\n                    >\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n                <span className=\"text-xs text-github-text-secondary\">\n                  {formatTimeAgo(note.createdAt)}\n                </span>\n              </div>\n            </div>\n          ))}\n\n          {filteredNotes.length === 0 && (\n            <div className=\"text-center text-github-text-secondary py-8\">\n              <i className=\"fas fa-brain text-2xl mb-2 opacity-50\" />\n              <p className=\"text-sm\">No memories found</p>\n              {searchQuery && (\n                <p className=\"text-xs mt-1\">Try different search terms</p>\n              )}\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n\n      {/* Actions */}\n      <div className=\"p-4 border-t border-github-border\">\n        <Button \n          size=\"sm\"\n          className=\"w-full bg-github-primary hover:bg-github-primary/90 text-white\"\n        >\n          <i className=\"fas fa-plus mr-2\" />\n          Add Note\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6673},"client/src/components/Monaco.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport * as monaco from 'monaco-editor';\n\n// Configure Monaco Editor environment for Vite - simplified approach\n(window as any).MonacoEnvironment = {\n  getWorkerUrl: () => {\n    return `data:text/javascript;charset=utf-8,${encodeURIComponent(`\n      // Minimal worker setup to prevent errors\n      self.postMessage = self.postMessage || function() {};\n    `)}`;\n  }\n};\n\ninterface MonacoProps {\n  value: string;\n  language: string;\n  path?: string;\n  onChange?: (value: string) => void;\n  readOnly?: boolean;\n}\n\nexport default function Monaco({ value, language, path, onChange, readOnly = false }: MonacoProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const editorRef = useRef<monaco.editor.IStandaloneCodeEditor | null>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Configure Monaco theme for GitHub dark\n    monaco.editor.defineTheme('github-dark', {\n      base: 'vs-dark',\n      inherit: true,\n      rules: [\n        { token: 'comment', foreground: '7d8590', fontStyle: 'italic' },\n        { token: 'keyword', foreground: 'ff7b72' },\n        { token: 'string', foreground: 'a5d6ff' },\n        { token: 'number', foreground: '79c0ff' },\n        { token: 'type', foreground: 'ffa657' },\n        { token: 'class', foreground: 'ffa657' },\n        { token: 'function', foreground: 'd2a8ff' },\n        { token: 'variable', foreground: 'f0f6fc' },\n      ],\n      colors: {\n        'editor.background': '#0d1117',\n        'editor.foreground': '#f0f6fc',\n        'editor.lineHighlightBackground': '#161b22',\n        'editor.selectionBackground': '#264f78',\n        'editor.inactiveSelectionBackground': '#3a3d41',\n        'editorCursor.foreground': '#f0f6fc',\n        'editorWhitespace.foreground': '#484f58',\n        'editorLineNumber.foreground': '#7d8590',\n        'editorLineNumber.activeForeground': '#f0f6fc',\n      }\n    });\n\n    const editor = monaco.editor.create(containerRef.current, {\n      value,\n      language,\n      theme: 'github-dark',\n      readOnly,\n      minimap: { enabled: true },\n      fontSize: 14,\n      lineNumbers: 'on',\n      renderWhitespace: 'selection',\n      scrollBeyondLastLine: false,\n      automaticLayout: true,\n      tabSize: 2,\n      insertSpaces: true,\n      wordWrap: 'on',\n      bracketPairColorization: { enabled: true },\n      guides: {\n        bracketPairs: true,\n        indentation: true,\n      },\n      suggest: {\n        showKeywords: true,\n        showSnippets: true,\n      },\n      quickSuggestions: {\n        other: true,\n        comments: false,\n        strings: false,\n      },\n    });\n\n    editorRef.current = editor;\n\n    // Handle content changes\n    const disposable = editor.onDidChangeModelContent(() => {\n      if (onChange) {\n        onChange(editor.getValue());\n      }\n    });\n\n    return () => {\n      disposable.dispose();\n      editor.dispose();\n    };\n  }, []);\n\n  // Update editor content when value prop changes\n  useEffect(() => {\n    if (editorRef.current && editorRef.current.getValue() !== value) {\n      editorRef.current.setValue(value);\n    }\n  }, [value]);\n\n  // Update language when it changes\n  useEffect(() => {\n    if (editorRef.current) {\n      const model = editorRef.current.getModel();\n      if (model) {\n        monaco.editor.setModelLanguage(model, language);\n      }\n    }\n  }, [language]);\n\n  return <div ref={containerRef} className=\"w-full h-full\" />;\n}\n","size_bytes":3428},"client/src/components/Navigation.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { \n  Home, \n  Code2, \n  Folder, \n  Brain, \n  Settings, \n  User, \n  PlusCircle,\n  Search,\n  Clock,\n  Star\n} from 'lucide-react';\n\ninterface NavigationProps {\n  user?: {\n    name: string;\n    avatar?: string;\n  };\n}\n\nexport default function Navigation({ user = { name: 'Developer' } }: NavigationProps) {\n  const [location] = useLocation();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const navItems = [\n    { \n      id: 'dashboard', \n      label: 'Dashboard', \n      icon: Home, \n      href: '/',\n      active: location === '/'\n    },\n    { \n      id: 'projects', \n      label: 'Projects', \n      icon: Folder, \n      href: '/projects',\n      active: location.startsWith('/projects')\n    },\n    { \n      id: 'templates', \n      label: 'Templates', \n      icon: Code2, \n      href: '/templates',\n      active: location === '/templates'\n    },\n    { \n      id: 'memory', \n      label: 'Memory', \n      icon: Brain, \n      href: '/memory',\n      active: location === '/memory'\n    },\n    { \n      id: 'recent', \n      label: 'Recent', \n      icon: Clock, \n      href: '/recent',\n      active: location === '/recent'\n    },\n    { \n      id: 'starred', \n      label: 'Starred', \n      icon: Star, \n      href: '/starred',\n      active: location === '/starred'\n    },\n  ];\n\n  return (\n    <nav className={cn(\n      \"fixed left-0 top-0 h-full bg-black/80 backdrop-blur-xl border-r border-white/10 transition-all duration-300 z-50\",\n      isCollapsed ? \"w-16\" : \"w-64\"\n    )}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-white/10\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n            <Code2 className=\"w-5 h-5 text-white\" />\n          </div>\n          {!isCollapsed && (\n            <div>\n              <h1 className=\"text-white font-bold text-xl\">Reme</h1>\n              <p className=\"text-gray-400 text-xs\">AI-Powered IDE</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-b border-white/10\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center\">\n            <User className=\"w-4 h-4 text-white\" />\n          </div>\n          {!isCollapsed && (\n            <div>\n              <p className=\"text-white font-medium text-sm\">{user.name}</p>\n              <p className=\"text-gray-400 text-xs\">Pro Plan</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"p-4 border-b border-white/10\">\n        <Button \n          className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white border-0\"\n          size={isCollapsed ? \"icon\" : \"default\"}\n        >\n          <PlusCircle className=\"w-4 h-4\" />\n          {!isCollapsed && <span className=\"ml-2\">New Project</span>}\n        </Button>\n        \n        {!isCollapsed && (\n          <div className=\"mt-3 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search projects...\"\n              className=\"w-full bg-white/5 border border-white/10 rounded-lg pl-10 pr-4 py-2 text-sm text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-transparent\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Navigation Items */}\n      <div className=\"flex-1 p-4\">\n        <div className=\"space-y-2\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <Link key={item.id} href={item.href}>\n                <div className={cn(\n                  \"flex items-center gap-3 px-3 py-2 rounded-lg transition-all duration-200 group cursor-pointer\",\n                  item.active \n                    ? \"bg-gradient-to-r from-blue-600/20 to-purple-600/20 text-white border border-blue-500/30\" \n                    : \"text-gray-300 hover:text-white hover:bg-white/5\"\n                )}>\n                  <Icon className=\"w-5 h-5 flex-shrink-0\" />\n                  {!isCollapsed && (\n                    <span className=\"font-medium\">{item.label}</span>\n                  )}\n                  {item.active && !isCollapsed && (\n                    <div className=\"ml-auto w-2 h-2 bg-blue-500 rounded-full\"></div>\n                  )}\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Settings */}\n      <div className=\"p-4 border-t border-white/10\">\n        <Link href=\"/settings\">\n          <div className={cn(\n            \"flex items-center gap-3 px-3 py-2 rounded-lg transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/5 cursor-pointer\",\n            location === '/settings' && \"bg-gradient-to-r from-blue-600/20 to-purple-600/20 text-white border border-blue-500/30\"\n          )}>\n            <Settings className=\"w-5 h-5 flex-shrink-0\" />\n            {!isCollapsed && <span className=\"font-medium\">Settings</span>}\n          </div>\n        </Link>\n      </div>\n\n      {/* Collapse Toggle */}\n      <button\n        onClick={() => setIsCollapsed(!isCollapsed)}\n        className=\"absolute -right-3 top-8 w-6 h-6 bg-black border border-white/20 rounded-full flex items-center justify-center text-white hover:bg-gray-900 transition-colors\"\n      >\n        <div className={cn(\"w-2 h-2 border-l border-b border-white transform transition-transform\", isCollapsed ? \"rotate-45\" : \"-rotate-135\")} />\n      </button>\n    </nav>\n  );\n}","size_bytes":5928},"client/src/components/ProjectSetup.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Project {\n  id: string;\n  name: string;\n  repoUrl?: string;\n  defaultBranch: string;\n  settingsJson: {\n    strictMode?: boolean;\n    maxLines?: number;\n    maxFiles?: number;\n    forbiddenGlobs?: string[];\n    styleFreeze?: boolean;\n  };\n  createdAt: string;\n}\n\ninterface ProjectSetupProps {\n  projectId: string;\n  onSetupComplete?: () => void;\n}\n\nexport default function ProjectSetup({ projectId, onSetupComplete }: ProjectSetupProps) {\n  const [isInitializing, setIsInitializing] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch project data\n  const { data: project, isLoading } = useQuery({\n    queryKey: ['/api/projects', projectId],\n    enabled: !!projectId\n  }) as { data: Project | undefined, isLoading: boolean };\n\n  // Initialize project structure mutation\n  const initializeProjectMutation = useMutation({\n    mutationFn: async () => {\n      setIsInitializing(true);\n      \n      // Create basic project structure\n      const response = await apiRequest('POST', `/api/projects/${projectId}/initialize`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Project initialized\",\n        description: \"Your project is ready to use\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId] });\n      onSetupComplete?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Initialization failed\",\n        description: error.message || \"Failed to initialize project\",\n        variant: \"destructive\"\n      });\n    },\n    onSettled: () => {\n      setIsInitializing(false);\n    }\n  });\n\n  // Update project settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (settings: Partial<Project['settingsJson']>) => {\n      const response = await apiRequest('POST', `/api/projects/${projectId}/settings`, {\n        settingsJson: { ...project?.settingsJson, ...settings }\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', projectId] });\n      toast({\n        title: \"Settings updated\",\n        description: \"Project settings have been saved\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update settings\",\n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleInitialize = () => {\n    initializeProjectMutation.mutate();\n  };\n\n  const handleToggleSetting = (key: keyof Project['settingsJson'], value: boolean) => {\n    updateSettingsMutation.mutate({ [key]: value });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-github-primary mx-auto mb-4\"></div>\n          <p className=\"text-github-text-secondary\">Loading project...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!project) {\n    return (\n      <div className=\"text-center py-16\">\n        <div className=\"text-6xl text-github-text-secondary mb-4\">\n          <i className=\"fas fa-exclamation-triangle\"></i>\n        </div>\n        <h2 className=\"text-2xl font-semibold text-github-text mb-2\">Project not found</h2>\n        <p className=\"text-github-text-secondary\">\n          The project you're looking for doesn't exist or has been deleted.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <Card className=\"bg-github-surface border-github-border\">\n        <CardHeader>\n          <CardTitle className=\"text-github-text flex items-center\">\n            <i className=\"fas fa-cog mr-3\"></i>\n            Project Setup: {project.name}\n          </CardTitle>\n          <CardDescription className=\"text-github-text-secondary\">\n            Configure your project settings and initialize the development environment\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Project Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-github-text\">Project Name</Label>\n              <Input \n                value={project.name} \n                readOnly \n                className=\"bg-github-bg border-github-border text-github-text\" \n              />\n            </div>\n            <div>\n              <Label className=\"text-github-text\">Default Branch</Label>\n              <Input \n                value={project.defaultBranch} \n                readOnly \n                className=\"bg-github-bg border-github-border text-github-text\" \n              />\n            </div>\n          </div>\n\n          {project.repoUrl && (\n            <div>\n              <Label className=\"text-github-text\">Repository URL</Label>\n              <Input \n                value={project.repoUrl} \n                readOnly \n                className=\"bg-github-bg border-github-border text-github-text\" \n              />\n            </div>\n          )}\n\n          <Separator className=\"bg-github-border\" />\n\n          {/* AI Agent Settings */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-github-text\">AI Agent Settings</h3>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-github-text\">Strict Mode</Label>\n                <p className=\"text-sm text-github-text-secondary\">\n                  Agent requires explicit approval for scope changes\n                </p>\n              </div>\n              <Switch\n                checked={project.settingsJson?.strictMode ?? true}\n                onCheckedChange={(checked) => handleToggleSetting('strictMode', checked)}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-github-text\">Style Freeze</Label>\n                <p className=\"text-sm text-github-text-secondary\">\n                  Lock coding style patterns once established\n                </p>\n              </div>\n              <Switch\n                checked={project.settingsJson?.styleFreeze ?? false}\n                onCheckedChange={(checked) => handleToggleSetting('styleFreeze', checked)}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-github-text\">Max Lines per Session</Label>\n                <Input \n                  type=\"number\"\n                  value={project.settingsJson?.maxLines ?? 1000}\n                  onChange={(e) => updateSettingsMutation.mutate({ maxLines: parseInt(e.target.value) })}\n                  className=\"bg-github-bg border-github-border text-github-text\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-github-text\">Max Files per Session</Label>\n                <Input \n                  type=\"number\"\n                  value={project.settingsJson?.maxFiles ?? 50}\n                  onChange={(e) => updateSettingsMutation.mutate({ maxFiles: parseInt(e.target.value) })}\n                  className=\"bg-github-bg border-github-border text-github-text\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <Separator className=\"bg-github-border\" />\n\n          {/* Status and Actions */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-github-text\">Project Status</h3>\n            <div className=\"flex items-center space-x-4\">\n              <Badge variant=\"outline\" className=\"bg-github-bg\">\n                <i className=\"fas fa-circle text-green-500 mr-2\"></i>\n                Ready\n              </Badge>\n              {project.repoUrl ? (\n                <Badge variant=\"outline\" className=\"bg-github-bg\">\n                  <i className=\"fas fa-code-branch mr-2\"></i>\n                  Git Repository\n                </Badge>\n              ) : (\n                <Badge variant=\"outline\" className=\"bg-github-bg\">\n                  <i className=\"fas fa-folder mr-2\"></i>\n                  Local Project\n                </Badge>\n              )}\n            </div>\n\n            <Button \n              onClick={handleInitialize}\n              disabled={isInitializing || initializeProjectMutation.isPending}\n              className=\"bg-github-primary hover:bg-github-primary/90 text-white\"\n            >\n              {isInitializing ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Initializing...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-play mr-2\"></i>\n                  Initialize Development Environment\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9736},"client/src/components/SpaceBackground.tsx":{"content":"import { useEffect, useRef } from 'react';\n\ninterface Star {\n  x: number;\n  y: number;\n  z: number;\n  size: number;\n  speed: number;\n  color: string;\n  opacity: number;\n}\n\nexport default function SpaceBackground() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d')!;\n    let animationId: number;\n    \n    // Set canvas size\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Create subtle stars\n    const stars: Star[] = [];\n    const numStars = 120; // Much fewer stars\n    \n    for (let i = 0; i < numStars; i++) {\n      stars.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        z: Math.random() * 1000,\n        size: Math.random() * 1 + 0.5, // Smaller stars\n        speed: 0.02, // Much slower movement\n        color: '#ffffff', // Just white stars\n        opacity: Math.random() * 0.3 + 0.1 // Much more subtle\n      });\n    }\n\n    let time = 0;\n\n    const animate = () => {\n      // Clear with a solid dark background\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      time += 0.001; // Much slower time progression\n\n      // Draw subtle static stars with gentle twinkling\n      stars.forEach((star, index) => {\n        // Very gentle twinkling effect\n        const twinkle = Math.sin(time * 2 + index * 0.5) * 0.1 + 0.9;\n        const opacity = star.opacity * twinkle;\n\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        ctx.fillStyle = star.color;\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.restore();\n      });\n\n      animationId = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      cancelAnimationFrame(animationId);\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 -z-10 overflow-hidden\">\n      <canvas \n        ref={canvasRef}\n        className=\"absolute inset-0 w-full h-full\"\n        style={{ background: 'linear-gradient(135deg, #0a0a0f 0%, #000000 100%)' }}\n      />\n      \n      {/* Additional gradient overlays */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-black/10 to-black/40\" />\n      <div className=\"absolute inset-0 bg-gradient-radial from-blue-900/5 via-transparent to-purple-900/5\" />\n    </div>\n  );\n}","size_bytes":2621},"client/src/components/StatusBar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatusBarProps {\n  projectId: string;\n  gitStatus?: any;\n  isConnected: boolean;\n}\n\nexport default function StatusBar({ projectId, gitStatus, isConnected }: StatusBarProps) {\n  const mockGitStatus = {\n    branch: \"main\",\n    ahead: 2,\n    behind: 0,\n    staged: 2,\n    indexing: false\n  };\n\n  const status = gitStatus || mockGitStatus;\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 bg-github-primary h-6 flex items-center justify-between px-4 text-xs text-white z-50\">\n      {/* Left Side - Project Info */}\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex items-center space-x-2\">\n          <i className=\"fas fa-code-branch\" />\n          <span>{status.branch}</span>\n        </div>\n        \n        {status.indexing && (\n          <div className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-sync animate-spin text-xs\" />\n            <span>Indexing...</span>\n          </div>\n        )}\n        \n        {status.staged > 0 && (\n          <div className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-check text-github-success\" />\n            <span>{status.staged} files staged</span>\n          </div>\n        )}\n\n        <div className={cn(\n          \"flex items-center space-x-2\",\n          isConnected ? \"text-github-success\" : \"text-red-400\"\n        )}>\n          <div className={cn(\n            \"w-2 h-2 rounded-full\",\n            isConnected ? \"bg-github-success\" : \"bg-red-400\"\n          )} />\n          <span>{isConnected ? \"Connected\" : \"Disconnected\"}</span>\n        </div>\n      </div>\n\n      {/* Right Side - Actions and Stats */}\n      <div className=\"flex items-center space-x-4\">\n        {/* Git Actions */}\n        <div className=\"flex space-x-2\">\n          <Button\n            size=\"sm\"\n            className={cn(\n              \"px-2 py-0.5 h-5 bg-github-success hover:bg-github-success/90 rounded text-xs transition-colors\",\n              status.staged === 0 && \"opacity-50 cursor-not-allowed\"\n            )}\n            disabled={status.staged === 0}\n            title=\"Commit staged changes\"\n          >\n            <i className=\"fas fa-plus mr-1\" />\n            Commit\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            className=\"px-2 py-0.5 h-5 bg-github-border hover:bg-github-border/80 rounded text-xs transition-colors\"\n            title=\"Pull from remote\"\n          >\n            <i className=\"fas fa-arrow-down mr-1\" />\n            Pull\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            className={cn(\n              \"px-2 py-0.5 h-5 bg-github-border hover:bg-github-border/80 rounded text-xs transition-colors\",\n              status.ahead === 0 && \"opacity-50 cursor-not-allowed\"\n            )}\n            disabled={status.ahead === 0}\n            title=\"Push to remote\"\n          >\n            <i className=\"fas fa-arrow-up mr-1\" />\n            Push\n          </Button>\n        </div>\n\n        {/* Usage Stats */}\n        <span className=\"text-xs opacity-75\">\n          GPT-4 • $2.43 today\n        </span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3211},"client/src/components/Terminal.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface TerminalProps {\n  projectId: string;\n}\n\ninterface TerminalLine {\n  id: string;\n  type: 'input' | 'output' | 'error';\n  content: string;\n  timestamp: Date;\n}\n\nexport default function Terminal({ projectId }: TerminalProps) {\n  const [lines, setLines] = useState<TerminalLine[]>([\n    {\n      id: '1',\n      type: 'output',\n      content: 'Reme IDE Terminal - Ready',\n      timestamp: new Date()\n    },\n    {\n      id: '2', \n      type: 'input',\n      content: 'npm run dev',\n      timestamp: new Date()\n    },\n    {\n      id: '3',\n      type: 'output', \n      content: '> concurrently \"cd apps/backend && node server.js\" \"cd apps/frontend && npm run dev\"',\n      timestamp: new Date()\n    },\n    {\n      id: '4',\n      type: 'output',\n      content: '[0] Backend server running on port 3001',\n      timestamp: new Date()\n    },\n    {\n      id: '5',\n      type: 'output',\n      content: '[1] Frontend dev server running on port 5173',\n      timestamp: new Date()\n    }\n  ]);\n  \n  const [input, setInput] = useState(\"\");\n  const [currentPath] = useState(\"~/reme-full\");\n  const [currentBranch] = useState(\"main\");\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [lines]);\n\n  const handleCommand = (command: string) => {\n    const newInputLine: TerminalLine = {\n      id: Date.now().toString(),\n      type: 'input',\n      content: command,\n      timestamp: new Date()\n    };\n\n    // Mock command processing\n    let outputContent = '';\n    switch (command.toLowerCase().trim()) {\n      case 'ls':\n      case 'dir':\n        outputContent = 'apps/  services/  package.json  README.md  tsconfig.json';\n        break;\n      case 'pwd':\n        outputContent = currentPath;\n        break;\n      case 'git status':\n        outputContent = `On branch ${currentBranch}\\nChanges to be committed:\\n  modified:   components/ShareModal.tsx\\n  new file:   utils/clipboard.ts`;\n        break;\n      case 'clear':\n        setLines([]);\n        setInput(\"\");\n        return;\n      case 'help':\n        outputContent = 'Available commands: ls, pwd, git status, npm run dev, clear, help';\n        break;\n      default:\n        if (command.startsWith('npm')) {\n          outputContent = 'Running npm command...';\n        } else if (command.startsWith('git')) {\n          outputContent = 'Git command executed';\n        } else {\n          outputContent = `Command not found: ${command}`;\n        }\n    }\n\n    const outputLine: TerminalLine = {\n      id: (Date.now() + 1).toString(),\n      type: outputContent.includes('not found') ? 'error' : 'output',\n      content: outputContent,\n      timestamp: new Date()\n    };\n\n    setLines(prev => [...prev, newInputLine, outputLine]);\n    setInput(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCommand(input);\n    }\n  };\n\n  const getLineClass = (type: string) => {\n    switch (type) {\n      case 'input':\n        return 'text-github-text';\n      case 'error':\n        return 'text-red-400';\n      case 'output':\n        return 'text-github-text-secondary';\n      default:\n        return 'text-github-text-secondary';\n    }\n  };\n\n  const getPrompt = () => (\n    <div className=\"flex items-center space-x-2 font-mono text-sm\">\n      <span className=\"text-github-success\">➜</span>\n      <span className=\"text-github-primary\">{projectId}</span>\n      <span className=\"text-github-text-secondary\">git:({currentBranch})</span>\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-col h-full bg-github-bg font-mono\">\n      {/* Terminal Output */}\n      <ScrollArea className=\"flex-1\" ref={scrollRef}>\n        <div className=\"p-4 space-y-1\">\n          {lines.map((line) => (\n            <div key={line.id} className=\"flex\">\n              {line.type === 'input' && getPrompt()}\n              <div className={`ml-2 ${getLineClass(line.type)} whitespace-pre-wrap`}>\n                {line.content}\n              </div>\n            </div>\n          ))}\n        </div>\n      </ScrollArea>\n\n      {/* Terminal Input */}\n      <div className=\"p-4 border-t border-github-border\">\n        <div className=\"flex items-center space-x-2\">\n          {getPrompt()}\n          <Input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyPress={handleKeyPress}\n            className=\"flex-1 bg-transparent border-none p-0 text-github-text font-mono focus:ring-0 focus:outline-none\"\n            placeholder=\"Type a command...\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4788},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useIDE.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useWebSocket } from './useWebSocket';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from './use-toast';\n\ninterface Tab {\n  path: string;\n  name: string;\n  icon: string;\n  modified: boolean;\n}\n\ninterface GitStatus {\n  branch: string;\n  ahead: number;\n  behind: number;\n  staged: string[];\n  modified: string[];\n  created: string[];\n  deleted: string[];\n  conflicted: string[];\n  clean: boolean;\n}\n\ninterface Session {\n  id: string;\n  projectId: string;\n  prompt: string;\n  status: string;\n  createdAt: Date;\n  scopeJson?: any;\n  diffSummary?: string;\n}\n\nexport function useIDE(projectId: string) {\n  const [currentFile, setCurrentFile] = useState<string>('');\n  const [fileContent, setFileContent] = useState<string>('');\n  const [tabs, setTabs] = useState<Tab[]>([]);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { isConnected, lastMessage, sendMessage: sendWSMessage } = useWebSocket(projectId);\n\n  // Fetch project data\n  const { data: project } = useQuery({\n    queryKey: ['/api/projects', projectId],\n    enabled: !!projectId\n  });\n\n  // Fetch git status\n  const { data: gitStatus, refetch: refetchGitStatus } = useQuery({\n    queryKey: ['/api/git', projectId, 'status'],\n    enabled: !!projectId,\n    refetchInterval: 10000 // Refetch every 10 seconds\n  });\n\n  // Fetch project sessions\n  const { data: sessions, refetch: refetchSessions } = useQuery({\n    queryKey: ['/api/projects', projectId, 'sessions'],\n    enabled: !!projectId,\n    refetchInterval: 2000 // Refetch every 2 seconds to get new messages\n  });\n\n  // Fetch file content when current file changes\n  const { data: currentFileContent } = useQuery({\n    queryKey: ['/api/files', projectId, currentFile],\n    enabled: !!projectId && !!currentFile,\n    select: (data: any) => data.content || ''\n  });\n\n  // Update file content when query data changes\n  useEffect(() => {\n    if (currentFileContent !== undefined) {\n      setFileContent(currentFileContent);\n    }\n  }, [currentFileContent]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (!lastMessage) return;\n\n    switch (lastMessage.type) {\n      case 'session.updated':\n        queryClient.invalidateQueries({ queryKey: ['/api/sessions', projectId] });\n        toast({\n          title: \"Session Updated\",\n          description: \"Agent has processed your request\"\n        });\n        break;\n      case 'git.updated':\n        refetchGitStatus();\n        toast({\n          title: \"Git Updated\",\n          description: \"Repository status has changed\"\n        });\n        break;\n      case 'patch.proposed':\n        queryClient.invalidateQueries({ queryKey: ['/api/sessions', projectId] });\n        toast({\n          title: \"Changes Proposed\",\n          description: \"Review the proposed changes in the diff panel\"\n        });\n        break;\n      case 'ask.permission':\n        toast({\n          title: \"Permission Required\",\n          description: lastMessage.reason,\n          variant: \"default\"\n        });\n        break;\n      case 'session.finished':\n        queryClient.invalidateQueries({ queryKey: ['/api/sessions', projectId] });\n        toast({\n          title: \"Session Complete\",\n          description: \"All changes have been applied\"\n        });\n        break;\n    }\n  }, [lastMessage, projectId, queryClient, refetchGitStatus, toast]);\n\n  // Open file mutation\n  const openFileMutation = useMutation({\n    mutationFn: async (filePath: string) => {\n      const response = await apiRequest('GET', `/api/files/${projectId}/${filePath}`);\n      return response.json();\n    },\n    onSuccess: (data, filePath) => {\n      setCurrentFile(filePath);\n      setFileContent(data.content || '');\n      \n      // Add to tabs if not already open\n      const fileName = filePath.split('/').pop() || filePath;\n      const fileExtension = fileName.split('.').pop()?.toLowerCase();\n      \n      let icon = 'fas fa-file';\n      switch (fileExtension) {\n        case 'tsx':\n        case 'ts':\n          icon = 'fas fa-file-code text-blue-400';\n          break;\n        case 'js':\n        case 'jsx':\n          icon = 'fas fa-file-code text-yellow-400';\n          break;\n        case 'css':\n        case 'scss':\n          icon = 'fas fa-file-code text-purple-400';\n          break;\n        case 'json':\n          icon = 'fas fa-file-code text-green-400';\n          break;\n        case 'md':\n          icon = 'fas fa-file-alt text-yellow-400';\n          break;\n      }\n\n      setTabs(prevTabs => {\n        const existingTab = prevTabs.find(tab => tab.path === filePath);\n        if (existingTab) return prevTabs;\n        \n        return [...prevTabs, {\n          path: filePath,\n          name: fileName,\n          icon,\n          modified: false\n        }];\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to open file\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Send message to agent\n  const sendMessageMutation = useMutation({\n    mutationFn: async (prompt: string) => {\n      const response = await apiRequest('POST', '/api/sessions', {\n        projectId,\n        prompt,\n        status: 'active'\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent\",\n        description: \"Agent is processing your request\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Git operations\n  const commitMutation = useMutation({\n    mutationFn: async () => {\n      const message = `[Reme] Auto-commit | files: ${(gitStatus as GitStatus)?.staged?.join(',') || 'unknown'} | session: ${Date.now()}`;\n      const response = await apiRequest('POST', `/api/git/${projectId}/commit`, {\n        message,\n        stage: 'approved_hunks'\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Changes committed\",\n        description: \"Your changes have been committed to the repository\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Commit failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const pullMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', `/api/git/${projectId}/pull`);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.conflicts?.length > 0) {\n        toast({\n          title: \"Pull completed with conflicts\",\n          description: `${data.conflicts.length} files have conflicts`,\n          variant: \"destructive\"\n        });\n      } else {\n        toast({\n          title: \"Pull completed\",\n          description: \"Repository updated successfully\"\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Pull failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const pushMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', `/api/git/${projectId}/push`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Push completed\",\n        description: \"Changes pushed to remote repository\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Push failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Callback functions\n  const openFile = useCallback((filePath: string) => {\n    openFileMutation.mutate(filePath);\n  }, [openFileMutation]);\n\n  const closeTab = useCallback((filePath: string) => {\n    setTabs(prevTabs => prevTabs.filter(tab => tab.path !== filePath));\n    if (currentFile === filePath) {\n      const remainingTabs = tabs.filter(tab => tab.path !== filePath);\n      if (remainingTabs.length > 0) {\n        setCurrentFile(remainingTabs[0].path);\n      } else {\n        setCurrentFile('');\n        setFileContent('');\n      }\n    }\n  }, [currentFile, tabs]);\n\n  const sendMessage = useCallback((message: string) => {\n    sendMessageMutation.mutate(message, {\n      onSuccess: () => {\n        // Immediately refetch sessions to show the new message\n        refetchSessions();\n      }\n    });\n  }, [sendMessageMutation, refetchSessions]);\n\n  const commitChanges = useCallback(() => {\n    commitMutation.mutate();\n  }, [commitMutation]);\n\n  const pullChanges = useCallback(() => {\n    pullMutation.mutate();\n  }, [pullMutation]);\n\n  const pushChanges = useCallback(() => {\n    pushMutation.mutate();\n  }, [pushMutation]);\n\n  return {\n    // State\n    currentFile,\n    fileContent,\n    tabs,\n    gitStatus: gitStatus as GitStatus,\n    sessions: sessions as Session[],\n    isConnected,\n    project,\n    \n    // Actions\n    openFile,\n    closeTab,\n    sendMessage,\n    commitChanges,\n    pullChanges,\n    pushChanges,\n    \n    // Loading states\n    isLoadingFile: openFileMutation.isPending,\n    isSendingMessage: sendMessageMutation.isPending,\n    isCommitting: commitMutation.isPending,\n    isPulling: pullMutation.isPending,\n    isPushing: pushMutation.isPending,\n  };\n}\n","size_bytes":9317},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport function useWebSocket(projectId?: string) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    if (!projectId) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      setIsConnected(true);\n      // Join project room\n      ws.current?.send(JSON.stringify({\n        type: 'join_project',\n        projectId\n      }));\n    };\n\n    ws.current.onclose = () => {\n      setIsConnected(false);\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        setLastMessage(message);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    return () => {\n      ws.current?.close();\n    };\n  }, [projectId]);\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage\n  };\n}\n","size_bytes":1541},"client/src/lib/git.ts":{"content":"import { apiRequest } from './queryClient';\n\nexport interface GitStatus {\n  branch: string;\n  ahead: number;\n  behind: number;\n  staged: string[];\n  modified: string[];\n  created: string[];\n  deleted: string[];\n  conflicted: string[];\n  clean: boolean;\n}\n\nexport interface CommitResult {\n  commit: string;\n  message: string;\n  files: number;\n}\n\nexport interface PullResult {\n  success: boolean;\n  conflicts: string[];\n  summary: any;\n  files: any[];\n}\n\nexport interface PushResult {\n  success: boolean;\n  pushed: any[];\n  remoteMessages: any;\n}\n\nexport interface BranchResult {\n  success: boolean;\n  currentBranch: string;\n  action: string;\n  branchName: string;\n}\n\nexport class GitService {\n  constructor(private projectId: string) {}\n\n  async getStatus(): Promise<GitStatus> {\n    const response = await apiRequest('GET', `/api/git/${this.projectId}/status`);\n    return response.json();\n  }\n\n  async commit(message: string, stage: 'approved_hunks' | 'all' = 'approved_hunks'): Promise<CommitResult> {\n    const response = await apiRequest('POST', `/api/git/${this.projectId}/commit`, {\n      message,\n      stage\n    });\n    return response.json();\n  }\n\n  async pull(): Promise<PullResult> {\n    const response = await apiRequest('POST', `/api/git/${this.projectId}/pull`);\n    return response.json();\n  }\n\n  async push(): Promise<PushResult> {\n    const response = await apiRequest('POST', `/api/git/${this.projectId}/push`);\n    return response.json();\n  }\n\n  async createBranch(name: string): Promise<BranchResult> {\n    const response = await apiRequest('POST', `/api/git/${this.projectId}/branch`, {\n      action: 'create',\n      name\n    });\n    return response.json();\n  }\n\n  async switchBranch(name: string): Promise<BranchResult> {\n    const response = await apiRequest('POST', `/api/git/${this.projectId}/branch`, {\n      action: 'switch',\n      name\n    });\n    return response.json();\n  }\n\n  async deleteBranch(name: string): Promise<BranchResult> {\n    const response = await apiRequest('POST', `/api/git/${this.projectId}/branch`, {\n      action: 'delete',\n      name\n    });\n    return response.json();\n  }\n\n  /**\n   * Generate automatic commit message based on session goal and changed files\n   */\n  generateCommitMessage(goal: string, files: string[], sessionId?: string): string {\n    const fileList = files.length > 5 \n      ? `${files.slice(0, 5).join(', ')}... (+${files.length - 5} more)`\n      : files.join(', ');\n    \n    const sessionPart = sessionId ? ` | session: ${sessionId}` : '';\n    return `[Reme] ${goal} | files: ${fileList}${sessionPart}`;\n  }\n\n  /**\n   * Check if repository has uncommitted changes\n   */\n  async hasUncommittedChanges(): Promise<boolean> {\n    const status = await this.getStatus();\n    return !status.clean;\n  }\n\n  /**\n   * Check if repository is ahead of remote\n   */\n  async isAheadOfRemote(): Promise<boolean> {\n    const status = await this.getStatus();\n    return status.ahead > 0;\n  }\n\n  /**\n   * Check if repository is behind remote\n   */\n  async isBehindRemote(): Promise<boolean> {\n    const status = await this.getStatus();\n    return status.behind > 0;\n  }\n\n  /**\n   * Stage specific files for commit\n   */\n  async stageFiles(files: string[]): Promise<void> {\n    // This would typically use git add for specific files\n    // For now, we'll use the commit endpoint with specific file staging\n    // Implementation would depend on backend git service enhancement\n    console.log('Staging files:', files);\n  }\n\n  /**\n   * Unstage files\n   */\n  async unstageFiles(files: string[]): Promise<void> {\n    // This would use git reset for specific files\n    console.log('Unstaging files:', files);\n  }\n\n  /**\n   * Get commit history\n   */\n  async getCommitHistory(limit: number = 10): Promise<any[]> {\n    // This would fetch commit history from git log\n    // Implementation would require additional backend endpoint\n    return [];\n  }\n\n  /**\n   * Create a new feature branch with automatic naming\n   */\n  async createFeatureBranch(goal: string, sessionId: string): Promise<BranchResult> {\n    const sanitizedGoal = goal\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '-')\n      .slice(0, 30);\n    \n    const branchName = `feat/${sanitizedGoal}-${sessionId.slice(0, 8)}`;\n    return this.createBranch(branchName);\n  }\n}\n\nexport function createGitService(projectId: string): GitService {\n  return new GitService(projectId);\n}\n","size_bytes":4418},"client/src/lib/openai.ts":{"content":"interface OpenAIConfig {\n  apiKey: string;\n  model: string;\n  maxTokens: number;\n  temperature: number;\n}\n\ninterface AgentScope {\n  goal: string;\n  files: string[];\n  symbols: string[];\n  forbidden: string[];\n  budget: {\n    maxTokens: number;\n    maxCost: number;\n  };\n}\n\ninterface PatchProposal {\n  summary: string;\n  files: Array<{\n    path: string;\n    changeType: 'modify' | 'create' | 'delete';\n    hunks: Array<{\n      id: string;\n      oldStart: number;\n      oldLines: number;\n      newStart: number;\n      newLines: number;\n      content: string;\n      rationale: string;\n      approved: boolean;\n    }>;\n  }>;\n}\n\ninterface MemoryContext {\n  hot: string[];\n  warm: string[];\n  projectStyle: any;\n}\n\nexport class OpenAIService {\n  private config: OpenAIConfig;\n\n  constructor(config: Partial<OpenAIConfig> = {}) {\n    this.config = {\n      // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      model: \"gpt-4o\",\n      maxTokens: 2000,\n      temperature: 0.1,\n      apiKey: import.meta.env.VITE_OPENAI_API_KEY || 'default_key',\n      ...config\n    };\n  }\n\n  /**\n   * Parse user intent and determine minimal scope\n   */\n  async createIntent(\n    prompt: string, \n    projectContext: any, \n    codeIndex: any, \n    memoryContext: MemoryContext\n  ): Promise<AgentScope> {\n    const systemPrompt = `You are Reme, a strict scope AI coding agent. \nParse the user's intent and determine the minimal scope needed.\n\nSTRICT RULES:\n- Only touch files explicitly requested\n- No refactoring unless asked\n- No style changes unless permitted\n- Ask permission for scope expansion with ONE concise question\n\nProject context: ${projectContext?.name || 'Unknown'}\nRecent memory: ${JSON.stringify(memoryContext.hot.slice(0, 3))}\nAvailable symbols: ${JSON.stringify(Object.keys(codeIndex.symbols || {}).slice(0, 20))}\n\nReturn JSON with:\n{\n  \"goal\": \"concise goal statement\",\n  \"files\": [\"list of files to modify\"],\n  \"symbols\": [\"list of symbols to change\"],\n  \"forbidden\": [\"paths/patterns to avoid\"],\n  \"budget\": { \"maxTokens\": 1000, \"maxCost\": 0.50 }\n}`;\n\n    try {\n      const response = await fetch('/api/openai/intent', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          model: this.config.model,\n          messages: [\n            { role: \"system\", content: systemPrompt },\n            { role: \"user\", content: prompt }\n          ],\n          response_format: { type: \"json_object\" },\n          temperature: this.config.temperature,\n          max_tokens: this.config.maxTokens\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`OpenAI request failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return JSON.parse(data.choices[0].message.content);\n    } catch (error) {\n      throw new Error(`Intent creation failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate code patch based on scope and context\n   */\n  async proposePatch(\n    scope: AgentScope,\n    contextFiles: Array<{ path: string; content: string }>,\n    memoryContext: MemoryContext\n  ): Promise<PatchProposal> {\n    const systemPrompt = `You are Reme. Generate the minimal patch to achieve the goal.\n\nRULES:\n- Only modify specified files: ${scope.files.join(', ')}\n- Provide rationale for each hunk\n- Generate working code, no placeholders\n- Follow project style patterns\n\nContext files:\n${contextFiles.map(f => `=== ${f.path} ===\\n${f.content.slice(0, 2000)}`).join('\\n\\n')}\n\nRelevant memory:\n${memoryContext.warm.join('\\n')}\n\nGoal: ${scope.goal}\n\nReturn JSON with:\n{\n  \"summary\": \"Brief change description\",\n  \"files\": [\n    {\n      \"path\": \"file/path.ts\",\n      \"changeType\": \"modify|create|delete\",\n      \"hunks\": [\n        {\n          \"id\": \"unique-id\",\n          \"oldStart\": 10,\n          \"oldLines\": 3,\n          \"newStart\": 10,\n          \"newLines\": 5,\n          \"content\": \"unified diff content\",\n          \"rationale\": \"why this change is needed\"\n        }\n      ]\n    }\n  ]\n}`;\n\n    try {\n      const response = await fetch('/api/openai/patch', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          model: this.config.model,\n          messages: [\n            { role: \"system\", content: systemPrompt },\n            { role: \"user\", content: `Generate patch for: ${scope.goal}` }\n          ],\n          response_format: { type: \"json_object\" },\n          temperature: 0.2,\n          max_tokens: this.config.maxTokens * 2\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`OpenAI request failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const patch = JSON.parse(data.choices[0].message.content);\n      \n      // Generate unique IDs for hunks\n      patch.files.forEach((file: any) => {\n        file.hunks.forEach((hunk: any, index: number) => {\n          hunk.id = `${file.path}-${index}-${Date.now()}`;\n          hunk.approved = false;\n        });\n      });\n\n      return patch;\n    } catch (error) {\n      throw new Error(`Patch generation failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Validate if scope expansion is needed\n   */\n  async validateScope(\n    scope: AgentScope,\n    projectSettings: any\n  ): Promise<{ needsPermission: boolean; reason?: string; request?: string }> {\n    // Check against project rules\n    if (projectSettings.maxFiles && scope.files.length > projectSettings.maxFiles) {\n      return {\n        needsPermission: true,\n        reason: `Scope exceeds max files limit (${scope.files.length} > ${projectSettings.maxFiles})`,\n        request: `Allow editing ${scope.files.length} files?`\n      };\n    }\n\n    if (projectSettings.forbiddenGlobs) {\n      const forbiddenFiles = scope.files.filter((file: string) => \n        projectSettings.forbiddenGlobs.some((glob: string) => file.includes(glob))\n      );\n      \n      if (forbiddenFiles.length > 0) {\n        return {\n          needsPermission: true,\n          reason: `Attempting to modify forbidden files: ${forbiddenFiles.join(', ')}`,\n          request: `Allow modifying these restricted files?`\n        };\n      }\n    }\n\n    return { needsPermission: false };\n  }\n\n  /**\n   * Generate memory summary for session\n   */\n  async summarizeSession(\n    goal: string,\n    changes: any[],\n    outcome: string\n  ): Promise<string> {\n    const systemPrompt = `Summarize this coding session in 2-3 concise sentences.\nFocus on what was accomplished and any important decisions made.`;\n\n    const userPrompt = `Goal: ${goal}\nChanges: ${changes.map(c => `${c.filePath}: ${c.changeType}`).join(', ')}\nOutcome: ${outcome}`;\n\n    try {\n      const response = await fetch('/api/openai/summarize', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          model: this.config.model,\n          messages: [\n            { role: \"system\", content: systemPrompt },\n            { role: \"user\", content: userPrompt }\n          ],\n          temperature: 0.3,\n          max_tokens: 150\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`OpenAI request failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.choices[0].message.content;\n    } catch (error) {\n      throw new Error(`Session summarization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate estimated cost for operation\n   */\n  estimateCost(inputTokens: number, outputTokens: number): number {\n    // GPT-4o pricing (approximate)\n    const inputCostPerToken = 0.000005; // $5 per 1M tokens\n    const outputCostPerToken = 0.000015; // $15 per 1M tokens\n    \n    return (inputTokens * inputCostPerToken) + (outputTokens * outputCostPerToken);\n  }\n}\n\nexport const openaiService = new OpenAIService();\n","size_bytes":7878},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Project } from \"@shared/schema\";\nimport { PlusCircle, Code, GitBranch, Calendar, FolderOpen, Star, Clock, Zap, Brain, Sparkles } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport ProjectSetup from \"@/components/ProjectSetup\";\nimport SpaceBackground from \"@/components/SpaceBackground\";\nimport Navigation from \"@/components/Navigation\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch projects\n  const { data: projects, isLoading } = useQuery({\n    queryKey: ['/api/projects'],\n  });\n\n  // Create project mutation\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: { name: string; repoUrl?: string; defaultBranch?: string }) => {\n      const response = await apiRequest('POST', '/api/projects', data);\n      return response.json();\n    },\n    onSuccess: (project: Project) => {\n      toast({\n        title: \"Project created\",\n        description: `${project.name} has been created successfully`\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      setSelectedProject(project.id);\n      setIsCreateDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error creating project\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleCreateProject = (data: { name: string; repoUrl?: string; defaultBranch?: string }) => {\n    createProjectMutation.mutate(data);\n  };\n\n  const openProject = (projectId: string) => {\n    setLocation(`/ide/${projectId}`);\n  };\n\n  if (selectedProject) {\n    return (\n      <div className=\"min-h-screen bg-black text-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl mb-4\">Setting up project...</h1>\n          <Button onClick={() => openProject(selectedProject)}>Continue to IDE</Button>\n          <Button variant=\"outline\" onClick={() => setSelectedProject(null)} className=\"ml-4\">Cancel</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen relative\">\n      <SpaceBackground />\n      <Navigation />\n      \n      <div className=\"ml-64 relative z-10\">\n        <div className=\"p-8\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-12\">\n            <div className=\"inline-flex items-center gap-2 bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20 rounded-full px-6 py-2 mb-6\">\n              <Sparkles className=\"w-4 h-4 text-blue-400\" />\n              <span className=\"text-blue-200 text-sm font-medium\">AI-Powered Development</span>\n            </div>\n            \n            <h1 className=\"text-6xl font-bold mb-6 bg-gradient-to-r from-white via-blue-100 to-purple-200 bg-clip-text text-transparent\">\n              Welcome to Reme\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto mb-8 leading-relaxed\">\n              The next-generation IDE with intelligent project memory, strict scope editing, \n              and AI assistance that remembers your coding patterns across sessions.\n            </p>\n            \n            <div className=\"flex items-center justify-center gap-4\">\n              <Button \n                size=\"lg\"\n                onClick={() => setIsCreateDialogOpen(true)}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-8 py-6 text-lg font-semibold rounded-xl shadow-2xl hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-105\"\n              >\n                <PlusCircle className=\"w-5 h-5 mr-2\" />\n                Create New Project\n              </Button>\n              \n              <Button \n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-white/30 text-white hover:bg-white/20 hover:border-white/50 px-8 py-6 text-lg font-semibold rounded-xl backdrop-blur-sm bg-black/20\"\n              >\n                <Code className=\"w-5 h-5 mr-2\" />\n                Browse Templates\n              </Button>\n            </div>\n          </div>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n            <Card className=\"bg-black/40 backdrop-blur-xl border-white/10 hover:border-blue-500/50 transition-all duration-300 group\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-3 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-xl group-hover:scale-110 transition-transform\">\n                    <Brain className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-white text-lg\">Smart Memory</CardTitle>\n                    <CardDescription className=\"text-gray-400\">\n                      AI remembers your coding patterns\n                    </CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"bg-black/40 backdrop-blur-xl border-white/10 hover:border-purple-500/50 transition-all duration-300 group\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-3 bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl group-hover:scale-110 transition-transform\">\n                    <Zap className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-white text-lg\">Strict Scope</CardTitle>\n                    <CardDescription className=\"text-gray-400\">\n                      Controlled AI modifications\n                    </CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"bg-black/40 backdrop-blur-xl border-white/10 hover:border-green-500/50 transition-all duration-300 group\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-3 bg-gradient-to-br from-green-500 to-emerald-500 rounded-xl group-hover:scale-110 transition-transform\">\n                    <GitBranch className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-white text-lg\">Git Integration</CardTitle>\n                    <CardDescription className=\"text-gray-400\">\n                      Advanced version control\n                    </CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n            </Card>\n          </div>\n\n          {/* Projects Section */}\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-2xl border border-white/10 p-8\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <div>\n                <h2 className=\"text-3xl font-bold text-white mb-2\">Your Projects</h2>\n                <p className=\"text-gray-400\">Continue working on your development projects</p>\n              </div>\n              \n              <div className=\"flex items-center gap-3\">\n                <Button variant=\"outline\" className=\"border-white/30 text-white hover:bg-white/20 hover:border-white/50 bg-black/20\">\n                  <Clock className=\"w-4 h-4 mr-2\" />\n                  Recent\n                </Button>\n                <Button variant=\"outline\" className=\"border-white/30 text-white hover:bg-white/20 hover:border-white/50 bg-black/20\">\n                  <Star className=\"w-4 h-4 mr-2\" />\n                  Starred\n                </Button>\n              </div>\n            </div>\n\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {Array.from({ length: 6 }).map((_, i) => (\n                  <Card key={i} className=\"bg-white/5 border-white/10 animate-pulse\">\n                    <CardHeader>\n                      <div className=\"w-full h-4 bg-white/10 rounded\"></div>\n                      <div className=\"w-2/3 h-3 bg-white/10 rounded\"></div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"w-full h-20 bg-white/10 rounded\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : projects && projects.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {(projects as Project[]).map((project: Project) => (\n                  <Card \n                    key={project.id} \n                    className=\"bg-black/40 backdrop-blur-xl border-white/10 hover:border-blue-500/50 transition-all duration-300 cursor-pointer group hover:shadow-2xl hover:shadow-blue-500/10 hover:scale-105\"\n                    onClick={() => openProject(project.id)}\n                  >\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"p-3 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-xl group-hover:scale-110 transition-transform border border-blue-500/20\">\n                            <FolderOpen className=\"w-6 h-6 text-blue-400\" />\n                          </div>\n                          <div>\n                            <CardTitle className=\"text-white text-lg group-hover:text-blue-300 transition-colors\">\n                              {project.name}\n                            </CardTitle>\n                            <div className=\"flex items-center gap-2 mt-2\">\n                              <Badge className=\"bg-blue-500/20 text-blue-300 border-blue-500/30 text-xs\">\n                                <GitBranch className=\"w-3 h-3 mr-1\" />\n                                {project.defaultBranch || 'main'}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {project.repoUrl && (\n                          <div className=\"text-sm text-gray-400 truncate bg-white/5 rounded-lg px-3 py-2\">\n                            📁 {project.repoUrl}\n                          </div>\n                        )}\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                            <Calendar className=\"w-3 h-3\" />\n                            Created recently\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            <span className=\"text-xs text-green-400\">Active</span>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-2xl flex items-center justify-center mx-auto mb-6 border border-blue-500/20\">\n                  <FolderOpen className=\"w-10 h-10 text-blue-400\" />\n                </div>\n                <h3 className=\"text-2xl font-semibold mb-3 text-white\">No projects yet</h3>\n                <p className=\"text-gray-400 mb-8 max-w-md mx-auto leading-relaxed\">\n                  Create your first project to start building with Reme's intelligent development environment and AI-powered assistance\n                </p>\n                <Button \n                  onClick={() => setIsCreateDialogOpen(true)}\n                  className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-8 py-4 text-lg rounded-xl shadow-xl hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-105\"\n                >\n                  <PlusCircle className=\"w-5 h-5 mr-2\" />\n                  Create Your First Project\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {/* Dialog */}\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogContent className=\"bg-black/90 backdrop-blur-xl border-white/20 text-white\">\n              <DialogHeader>\n                <DialogTitle className=\"text-2xl\">Create New Project</DialogTitle>\n                <DialogDescription className=\"text-gray-400\">\n                  Set up a new development project with Reme's intelligent features\n                </DialogDescription>\n              </DialogHeader>\n              <CreateProjectForm onSubmit={handleCreateProject} isLoading={createProjectMutation.isPending} />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Create Project Form Component\nfunction CreateProjectForm({ \n  onSubmit, \n  isLoading \n}: { \n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n}) {\n  const [formData, setFormData] = useState({\n    name: '',\n    repoUrl: '',\n    defaultBranch: 'main'\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (formData.name.trim()) {\n      onSubmit({\n        name: formData.name.trim(),\n        repoUrl: formData.repoUrl.trim() || undefined,\n        defaultBranch: formData.defaultBranch.trim() || 'main'\n      });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div>\n        <label className=\"block text-sm font-medium mb-3 text-white\">\n          Project Name *\n        </label>\n        <Input\n          value={formData.name}\n          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n          placeholder=\"my-awesome-project\"\n          required\n          className=\"bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-blue-500\"\n        />\n      </div>\n      \n      <div>\n        <label className=\"block text-sm font-medium mb-3 text-white\">\n          Git Repository URL (Optional)\n        </label>\n        <Input\n          value={formData.repoUrl}\n          onChange={(e) => setFormData(prev => ({ ...prev, repoUrl: e.target.value }))}\n          placeholder=\"https://github.com/user/repo.git\"\n          className=\"bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-blue-500\"\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium mb-3 text-white\">\n          Default Branch\n        </label>\n        <Input\n          value={formData.defaultBranch}\n          onChange={(e) => setFormData(prev => ({ ...prev, defaultBranch: e.target.value }))}\n          placeholder=\"main\"\n          className=\"bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-blue-500\"\n        />\n      </div>\n\n      <DialogFooter>\n        <Button \n          type=\"submit\" \n          disabled={isLoading || !formData.name.trim()}\n          className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-8\"\n        >\n          {isLoading ? \"Creating...\" : \"Create Project\"}\n        </Button>\n      </DialogFooter>\n    </form>\n  );\n}","size_bytes":16391},"client/src/pages/dashboard_old.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\nexport default function Dashboard() {\n  const [, navigate] = useLocation();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [projectName, setProjectName] = useState(\"\");\n  const [repoUrl, setRepoUrl] = useState(\"\");\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch all projects\n  const { data: projects, isLoading } = useQuery({\n    queryKey: ['/api/projects'],\n  });\n\n  // Create project mutation\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: { name: string; repoUrl?: string }) => {\n      const response = await apiRequest('POST', '/api/projects', {\n        name: data.name,\n        repoUrl: data.repoUrl || null,\n        defaultBranch: 'main',\n        settingsJson: {\n          strictMode: true,\n          maxLines: 1000,\n          maxFiles: 50,\n          forbiddenGlobs: ['node_modules/**', '.git/**'],\n          styleFreeze: false\n        }\n      });\n      return response.json();\n    },\n    onSuccess: (project) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      setIsCreateDialogOpen(false);\n      setProjectName(\"\");\n      setRepoUrl(\"\");\n      toast({\n        title: \"Project created\",\n        description: `${project.name} has been created successfully`\n      });\n      // Navigate to the new project\n      navigate(`/project/${project.id}`);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to create project\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleCreateProject = () => {\n    if (!projectName.trim()) {\n      toast({\n        title: \"Project name required\",\n        description: \"Please enter a name for your project\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    createProjectMutation.mutate({ name: projectName, repoUrl });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-github-bg text-github-text flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-github-primary mx-auto mb-4\"></div>\n          <p>Loading projects...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-github-bg text-github-text\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-github-text mb-2\">\n              Welcome to <span className=\"text-github-primary\">Reme</span>\n            </h1>\n            <p className=\"text-github-text-secondary text-lg\">\n              A better web IDE with intelligent AI assistance\n            </p>\n          </div>\n          \n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-github-primary hover:bg-github-primary/90 text-white\">\n                <i className=\"fas fa-plus mr-2\"></i>\n                New Project\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"bg-github-surface border-github-border\">\n              <DialogHeader>\n                <DialogTitle className=\"text-github-text\">Create New Project</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"project-name\" className=\"text-github-text\">Project Name</Label>\n                  <Input\n                    id=\"project-name\"\n                    value={projectName}\n                    onChange={(e) => setProjectName(e.target.value)}\n                    placeholder=\"My Awesome Project\"\n                    className=\"bg-github-bg border-github-border text-github-text\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"repo-url\" className=\"text-github-text\">Repository URL (Optional)</Label>\n                  <Input\n                    id=\"repo-url\"\n                    value={repoUrl}\n                    onChange={(e) => setRepoUrl(e.target.value)}\n                    placeholder=\"https://github.com/user/repo.git\"\n                    className=\"bg-github-bg border-github-border text-github-text\"\n                  />\n                  <p className=\"text-sm text-github-text-secondary mt-1\">\n                    Leave empty to create a new repository\n                  </p>\n                </div>\n                <Button \n                  onClick={handleCreateProject} \n                  disabled={createProjectMutation.isPending}\n                  className=\"w-full bg-github-primary hover:bg-github-primary/90\"\n                >\n                  {createProjectMutation.isPending ? \"Creating...\" : \"Create Project\"}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Projects Grid */}\n        {projects && Array.isArray(projects) && projects.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {projects.map((project: any) => (\n              <Card \n                key={project.id} \n                className=\"bg-github-surface border-github-border hover:border-github-primary/50 transition-colors cursor-pointer\"\n                onClick={() => navigate(`/project/${project.id}`)}\n              >\n                <CardHeader>\n                  <CardTitle className=\"text-github-text flex items-center justify-between\">\n                    {project.name}\n                    <Badge variant=\"secondary\" className=\"bg-github-bg\">\n                      {project.defaultBranch || 'main'}\n                    </Badge>\n                  </CardTitle>\n                  <CardDescription className=\"text-github-text-secondary\">\n                    {project.repoUrl ? (\n                      <span className=\"flex items-center\">\n                        <i className=\"fas fa-code-branch mr-2\"></i>\n                        {project.repoUrl}\n                      </span>\n                    ) : (\n                      <span className=\"flex items-center\">\n                        <i className=\"fas fa-folder mr-2\"></i>\n                        Local project\n                      </span>\n                    )}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between text-sm text-github-text-secondary\">\n                    <span>\n                      Created {format(new Date(project.createdAt), 'MMM dd, yyyy')}\n                    </span>\n                    <div className=\"flex items-center space-x-2\">\n                      {project.settingsJson?.strictMode && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Strict Mode\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          /* Empty State */\n          <div className=\"text-center py-16\">\n            <div className=\"text-6xl text-github-text-secondary mb-4\">\n              <i className=\"fas fa-folder-open\"></i>\n            </div>\n            <h2 className=\"text-2xl font-semibold text-github-text mb-2\">No projects yet</h2>\n            <p className=\"text-github-text-secondary mb-6\">\n              Create your first project to get started with Reme\n            </p>\n            <Button \n              onClick={() => setIsCreateDialogOpen(true)}\n              className=\"bg-github-primary hover:bg-github-primary/90 text-white\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>\n              Create Your First Project\n            </Button>\n          </div>\n        )}\n\n        {/* Features Section */}\n        <div className=\"mt-16 border-t border-github-border pt-16\">\n          <h2 className=\"text-2xl font-semibold text-github-text mb-8 text-center\">\n            Why Choose Reme?\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl text-github-primary mb-4\">\n                <i className=\"fas fa-robot\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold text-github-text mb-2\">Intelligent AI Agent</h3>\n              <p className=\"text-github-text-secondary\">\n                Strict scope management ensures the AI only touches what you explicitly request\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl text-github-primary mb-4\">\n                <i className=\"fas fa-brain\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold text-github-text mb-2\">Project Memory</h3>\n              <p className=\"text-github-text-secondary\">\n                Comprehensive memory system remembers your coding patterns and project history\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl text-github-primary mb-4\">\n                <i className=\"fas fa-code-branch\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold text-github-text mb-2\">Git Integration</h3>\n              <p className=\"text-github-text-secondary\">\n                Seamless Git operations with real-time diff visualization and approval workflow\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10412},"client/src/pages/ide.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport FileExplorer from \"@/components/FileExplorer\";\nimport Monaco from \"@/components/Monaco\";\nimport AgentPanel from \"@/components/AgentPanel\";\nimport DiffPanel from \"@/components/DiffPanel\";\nimport MemoryPanel from \"@/components/MemoryPanel\";\nimport GitPanel from \"@/components/GitPanel\";\nimport Terminal from \"@/components/Terminal\";\nimport StatusBar from \"@/components/StatusBar\";\nimport { useIDE } from \"@/hooks/useIDE\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function IDE() {\n  const { id: projectId } = useParams();\n  const [activePanel, setActivePanel] = useState(\"agent\");\n  const [activeBottomPanel, setActiveBottomPanel] = useState(\"terminal\");\n  const [activeSidebarTab, setActiveSidebarTab] = useState(\"explorer\");\n\n  // Redirect to dashboard if no project ID\n  if (!projectId) {\n    window.location.href = '/';\n    return null;\n  }\n  \n  const {\n    currentFile,\n    fileContent,\n    tabs,\n    gitStatus,\n    sessions,\n    isConnected,\n    project,\n    openFile,\n    closeTab,\n    sendMessage,\n    commitChanges,\n    pullChanges,\n    pushChanges\n  } = useIDE(projectId || \"\");\n\n  const sidebarTabs = [\n    { id: \"explorer\", icon: \"fas fa-folder\", title: \"Explorer\" },\n    { id: \"agent\", icon: \"fas fa-robot\", title: \"Agent\" },\n    { id: \"git\", icon: \"fas fa-code-branch\", title: \"Git\" },\n    { id: \"memory\", icon: \"fas fa-brain\", title: \"Memory\" },\n    { id: \"settings\", icon: \"fas fa-cog\", title: \"Settings\" }\n  ];\n\n  const rightPanelTabs = [\n    { id: \"agent\", label: \"Agent\" },\n    { id: \"diff\", label: \"Diff\" },\n    { id: \"memory\", label: \"Memory\" }\n  ];\n\n  const bottomPanelTabs = [\n    { id: \"terminal\", label: \"Terminal\" },\n    { id: \"git\", label: \"Git\" },\n    { id: \"tests\", label: \"Tests\" },\n    { id: \"problems\", label: \"Problems\" }\n  ];\n\n  return (\n    <div className=\"flex h-screen bg-github-bg text-github-text font-code\">\n      {/* Top Navigation Bar */}\n      <div className=\"fixed top-0 left-0 right-0 h-10 bg-github-surface border-b border-github-border flex items-center justify-between px-4 z-50 shadow-sm\">\n        <div className=\"flex items-center space-x-4\">\n          <button \n            onClick={() => window.location.href = '/'}\n            className=\"text-github-text-secondary hover:text-github-primary transition-colors flex items-center space-x-2\"\n          >\n            <i className=\"fas fa-home text-sm\"></i>\n            <span className=\"text-sm font-medium\">REME</span>\n          </button>\n          <div className=\"text-github-accent text-sm font-mono\">\n            {(project as any)?.name || 'Loading...'}\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"text-xs text-github-text-secondary font-mono\">\n            v1.0.0\n          </div>\n          <div className={cn(\n            \"px-2 py-1 rounded-md text-xs font-mono border\",\n            isConnected \n              ? \"bg-github-success/10 text-github-success border-github-success/20\" \n              : \"bg-github-error/10 text-github-error border-github-error/20\"\n          )}>\n            {isConnected ? \"● ONLINE\" : \"● OFFLINE\"}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Layout */}\n      <div className=\"flex h-full w-full pt-10\">\n      {/* Sidebar */}\n      <div className=\"flex h-full\">\n        {/* Activity Bar */}\n        <div className=\"w-12 bg-gradient-to-b from-github-surface to-github-bg border-r border-github-border flex flex-col items-center py-4 space-y-3 shrink-0 shadow-lg\">\n          {sidebarTabs.map((tab) => (\n            <button\n              key={tab.id}\n              className={cn(\n                \"w-9 h-9 flex items-center justify-center rounded-lg transition-all duration-200 relative group\",\n                activeSidebarTab === tab.id\n                  ? \"text-github-primary bg-github-primary/20 shadow-lg shadow-github-primary/25 border border-github-primary/30\"\n                  : \"text-github-text-secondary hover:text-github-primary hover:bg-github-primary/10 hover:scale-105\"\n              )}\n              title={tab.title}\n              onClick={() => setActiveSidebarTab(tab.id)}\n            >\n              <i className={`${tab.icon} text-sm`}></i>\n              {activeSidebarTab === tab.id && (\n                <div className=\"absolute -right-1 top-1/2 transform -translate-y-1/2 w-1 h-6 bg-github-primary rounded-l\"></div>\n              )}\n            </button>\n          ))}\n        </div>\n\n        {/* Sidebar Panel */}\n        <div className=\"w-80 bg-github-surface border-r border-github-border flex flex-col shrink-0 h-full overflow-hidden shadow-lg\">\n          {activeSidebarTab === \"explorer\" && (\n            <>\n              <div className=\"px-4 py-3 border-b border-github-border flex items-center justify-between shrink-0 bg-gradient-to-r from-github-surface to-github-bg\">\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-folder text-github-primary text-sm\"></i>\n                  <h3 className=\"text-sm font-bold text-github-primary tracking-wide\">EXPLORER</h3>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <button className=\"text-github-text-secondary hover:text-github-primary transition-colors p-1 rounded hover:bg-github-primary/10\">\n                    <i className=\"fas fa-plus text-xs\"></i>\n                  </button>\n                  <button className=\"text-github-text-secondary hover:text-github-primary transition-colors p-1 rounded hover:bg-github-primary/10\">\n                    <i className=\"fas fa-folder-plus text-xs\"></i>\n                  </button>\n                  <button className=\"text-github-text-secondary hover:text-github-primary transition-colors p-1 rounded hover:bg-github-primary/10\">\n                    <i className=\"fas fa-refresh text-xs\"></i>\n                  </button>\n                </div>\n              </div>\n              <div className=\"flex-1 overflow-y-auto scrollbar-github\">\n                <FileExplorer projectId={projectId} onFileSelect={openFile} />\n              </div>\n            </>\n          )}\n          \n          {activeSidebarTab === \"git\" && (\n            <>\n              <div className=\"px-4 py-3 border-b border-github-border shrink-0\">\n                <h3 className=\"text-sm font-medium text-github-text\">SOURCE CONTROL</h3>\n              </div>\n              <div className=\"flex-1 overflow-y-auto\">\n                <GitPanel \n                  projectId={projectId}\n                  gitStatus={gitStatus}\n                  onCommit={commitChanges}\n                  onPull={pullChanges}\n                  onPush={pushChanges}\n                />\n              </div>\n            </>\n          )}\n\n          {activeSidebarTab === \"agent\" && (\n            <>\n              <div className=\"px-4 py-3 border-b border-github-border shrink-0\">\n                <h3 className=\"text-sm font-medium text-github-text\">AGENT</h3>\n              </div>\n              <div className=\"flex-1 overflow-y-auto\">\n                <AgentPanel \n                  projectId={projectId}\n                  sessions={sessions}\n                  isConnected={isConnected}\n                  onSendMessage={(message: string) => {\n                    sendMessage(message);\n                  }}\n                />\n              </div>\n            </>\n          )}\n\n          {activeSidebarTab === \"memory\" && (\n            <>\n              <div className=\"px-4 py-3 border-b border-github-border shrink-0\">\n                <h3 className=\"text-sm font-medium text-github-text\">MEMORY</h3>\n              </div>\n              <div className=\"flex-1 overflow-y-auto\">\n                <MemoryPanel projectId={projectId} />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Tab Bar */}\n        <div className=\"bg-github-surface border-b border-github-border flex items-center\">\n          <div className=\"flex\">\n            {tabs.map((tab) => (\n              <div\n                key={tab.path}\n                className={cn(\n                  \"flex items-center px-4 py-2 border-r border-github-border text-sm cursor-pointer\",\n                  currentFile === tab.path\n                    ? \"bg-github-bg text-github-text\"\n                    : \"text-github-text-secondary hover:text-github-text hover:bg-github-border/30\"\n                )}\n                onClick={() => openFile(tab.path)}\n              >\n                <i className={`${tab.icon} mr-2`}></i>\n                <span>{tab.name}</span>\n                {tab.modified && (\n                  <span className=\"ml-2 w-2 h-2 bg-orange-400 rounded-full\" title=\"Modified\"></span>\n                )}\n                <button \n                  className=\"ml-2 text-github-text-secondary hover:text-github-text\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    closeTab(tab.path);\n                  }}\n                >\n                  <i className=\"fas fa-times text-xs\"></i>\n                </button>\n              </div>\n            ))}\n          </div>\n          <div className=\"flex-1\"></div>\n          <div className=\"px-4 py-2 text-xs text-github-text-secondary\">\n            <span className=\"mr-4\">Ln 42, Col 16</span>\n            <span className=\"mr-4\">UTF-8</span>\n            <span>TypeScript React</span>\n          </div>\n        </div>\n\n        {/* Editor and Right Panel */}\n        <div className=\"flex-1 flex\">\n          {/* Monaco Editor */}\n          <div className=\"flex-1\">\n            <Monaco\n              value={fileContent}\n              language=\"typescript\"\n              path={currentFile}\n              onChange={(value) => {\n                // Handle file content changes\n                console.log('File changed:', currentFile, value);\n              }}\n            />\n          </div>\n\n          {/* Right Panel */}\n          <div className=\"w-96 bg-github-surface border-l border-github-border flex flex-col\">\n            {/* Panel Tabs */}\n            <div className=\"flex border-b border-github-border\">\n              {rightPanelTabs.map((tab) => (\n                <button\n                  key={tab.id}\n                  className={cn(\n                    \"flex-1 px-4 py-2 text-sm font-medium transition-colors\",\n                    activePanel === tab.id\n                      ? \"text-github-primary bg-github-primary/10 border-b-2 border-github-primary\"\n                      : \"text-github-text-secondary hover:text-github-text\"\n                  )}\n                  onClick={() => setActivePanel(tab.id)}\n                >\n                  {tab.label}\n                </button>\n              ))}\n            </div>\n\n            {/* Panel Content */}\n            <div className=\"flex-1 overflow-y-auto\">\n              {activePanel === \"agent\" && (\n                <AgentPanel\n                  projectId={projectId}\n                  sessions={sessions}\n                  isConnected={isConnected}\n                  onSendMessage={sendMessage}\n                />\n              )}\n              {activePanel === \"diff\" && (\n                <DiffPanel projectId={projectId} />\n              )}\n              {activePanel === \"memory\" && (\n                <MemoryPanel projectId={projectId} />\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Panel */}\n        <div className=\"h-64 bg-github-surface border-t border-github-border flex flex-col shrink-0\">\n          {/* Bottom Panel Tabs */}\n          <div className=\"flex items-center justify-between border-b border-github-border px-4 shrink-0\">\n            <div className=\"flex\">\n              {bottomPanelTabs.map((tab) => (\n                <button\n                  key={tab.id}\n                  className={cn(\n                    \"px-4 py-2 text-sm font-medium transition-colors\",\n                    activeBottomPanel === tab.id\n                      ? \"text-github-primary bg-github-primary/10 border-b-2 border-github-primary\"\n                      : \"text-github-text-secondary hover:text-github-text\"\n                  )}\n                  onClick={() => setActiveBottomPanel(tab.id)}\n                >\n                  {tab.label}\n                </button>\n              ))}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button className=\"text-github-text-secondary hover:text-github-text transition-colors\">\n                <i className=\"fas fa-plus text-xs\"></i>\n              </button>\n              <button className=\"text-github-text-secondary hover:text-github-text transition-colors\">\n                <i className=\"fas fa-times text-xs\"></i>\n              </button>\n            </div>\n          </div>\n\n          {/* Bottom Panel Content */}\n          <div className=\"flex-1 overflow-y-auto\">\n            {activeBottomPanel === \"terminal\" && (\n              <Terminal projectId={projectId} />\n            )}\n            {activeBottomPanel === \"git\" && (\n              <GitPanel\n                projectId={projectId}\n                gitStatus={gitStatus}\n                onCommit={commitChanges}\n                onPull={pullChanges}\n                onPush={pushChanges}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n      </div>\n\n      {/* Status Bar */}\n      <StatusBar\n        projectId={projectId}\n        gitStatus={gitStatus}\n        isConnected={isConnected}\n      />\n    </div>\n  );\n}\n","size_bytes":13607},"client/src/pages/memory.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport SpaceBackground from \"@/components/SpaceBackground\";\nimport Navigation from \"@/components/Navigation\";\nimport { Search, Brain, Plus, Tag, Link as LinkIcon, Calendar, Zap } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface MemoryNote {\n  id: string;\n  content: string;\n  tags: string[];\n  links: string[];\n  session_id: string;\n  created_at: string;\n  updated_at: string;\n  relevance_score?: number;\n}\n\ninterface MemoryStats {\n  total_notes: number;\n  hot_memory_count: number;\n  warm_memory_count: number;\n  cold_memory_count: number;\n  most_used_tags: string[];\n}\n\nexport default function Memory() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newNote, setNewNote] = useState({ content: \"\", tags: \"\", links: \"\" });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch memory notes\n  const { data: memoryData, isLoading } = useQuery({\n    queryKey: ['/api/memory', searchQuery, selectedTags],\n    queryFn: async () => {\n      let url = '/api/memory/search';\n      const params = new URLSearchParams();\n      \n      if (searchQuery.trim()) {\n        params.set('query', searchQuery.trim());\n      }\n      if (selectedTags.length > 0) {\n        params.set('tags', selectedTags.join(','));\n      }\n      \n      if (params.toString()) {\n        url += `?${params.toString()}`;\n      }\n      \n      const response = await apiRequest('GET', url);\n      return response.json();\n    }\n  });\n\n  // Fetch memory stats\n  const { data: stats } = useQuery({\n    queryKey: ['/api/memory/stats'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/memory/stats');\n      return response.json();\n    }\n  });\n\n  // Create memory note\n  const createNoteMutation = useMutation({\n    mutationFn: async (data: { content: string; tags: string[]; links: string[] }) => {\n      const response = await apiRequest('POST', '/api/memory/notes', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Memory note created\",\n        description: \"Your note has been added to the knowledge base\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/memory'] });\n      setIsCreateDialogOpen(false);\n      setNewNote({ content: \"\", tags: \"\", links: \"\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create note\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleCreateNote = () => {\n    if (!newNote.content.trim()) return;\n    \n    const tags = newNote.tags.split(',').map(t => t.trim()).filter(Boolean);\n    const links = newNote.links.split(',').map(l => l.trim()).filter(Boolean);\n    \n    createNoteMutation.mutate({\n      content: newNote.content,\n      tags,\n      links\n    });\n  };\n\n  const handleTagClick = (tag: string) => {\n    if (selectedTags.includes(tag)) {\n      setSelectedTags(selectedTags.filter(t => t !== tag));\n    } else {\n      setSelectedTags([...selectedTags, tag]);\n    }\n  };\n\n  // Debounced search\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      queryClient.invalidateQueries({ queryKey: ['/api/memory'] });\n    }, 300);\n    \n    return () => clearTimeout(timer);\n  }, [searchQuery, queryClient]);\n\n  const getMemoryTier = (score?: number): { tier: string; color: string } => {\n    if (!score) return { tier: 'Cold', color: 'text-blue-400' };\n    if (score > 0.8) return { tier: 'Hot', color: 'text-red-400' };\n    if (score > 0.6) return { tier: 'Warm', color: 'text-yellow-400' };\n    return { tier: 'Cold', color: 'text-blue-400' };\n  };\n\n  return (\n    <div className=\"min-h-screen relative\">\n      <SpaceBackground />\n      <Navigation />\n      \n      <div className=\"ml-64 relative z-10\">\n        <div className=\"p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-white mb-2\">AI Memory System</h1>\n            <p className=\"text-gray-400 text-lg\">\n              Your intelligent knowledge base that learns and remembers across sessions\n            </p>\n          </div>\n\n          {/* Stats Cards */}\n          {stats && (\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <Brain className=\"w-5 h-5 text-blue-400\" />\n                    <div>\n                      <CardTitle className=\"text-white text-lg\">{stats.total_notes}</CardTitle>\n                      <CardDescription className=\"text-gray-400 text-sm\">Total Notes</CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <Zap className=\"w-5 h-5 text-red-400\" />\n                    <div>\n                      <CardTitle className=\"text-white text-lg\">{stats.hot_memory_count}</CardTitle>\n                      <CardDescription className=\"text-gray-400 text-sm\">Hot Memory</CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-5 h-5 bg-yellow-400 rounded-full\"></div>\n                    <div>\n                      <CardTitle className=\"text-white text-lg\">{stats.warm_memory_count}</CardTitle>\n                      <CardDescription className=\"text-gray-400 text-sm\">Warm Memory</CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-5 h-5 bg-blue-400 rounded-full\"></div>\n                    <div>\n                      <CardTitle className=\"text-white text-lg\">{stats.cold_memory_count}</CardTitle>\n                      <CardDescription className=\"text-gray-400 text-sm\">Cold Memory</CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n            </div>\n          )}\n\n          {/* Search and Controls */}\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-2xl border border-white/10 p-6 mb-8\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              {/* Search */}\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                <Input\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search your memory by content, tags, or concepts...\"\n                  className=\"pl-10 bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-blue-500\"\n                />\n              </div>\n              \n              <Button\n                onClick={() => setIsCreateDialogOpen(true)}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Memory Note\n              </Button>\n            </div>\n\n            {/* Selected Tags */}\n            {selectedTags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-4\">\n                <span className=\"text-sm text-gray-400\">Filtered by:</span>\n                {selectedTags.map((tag) => (\n                  <Badge\n                    key={tag}\n                    className=\"bg-blue-500/20 text-blue-300 border-blue-500/30 cursor-pointer\"\n                    onClick={() => handleTagClick(tag)}\n                  >\n                    {tag} ×\n                  </Badge>\n                ))}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSelectedTags([])}\n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  Clear all\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {/* Popular Tags */}\n          {stats?.most_used_tags?.length > 0 && (\n            <div className=\"mb-8\">\n              <h3 className=\"text-lg font-semibold text-white mb-4\">Popular Tags</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {stats.most_used_tags.map((tag) => (\n                  <Badge\n                    key={tag}\n                    variant=\"outline\"\n                    className={`cursor-pointer transition-colors ${\n                      selectedTags.includes(tag)\n                        ? \"bg-blue-500/20 text-blue-300 border-blue-500/30\"\n                        : \"border-white/20 text-gray-400 hover:border-white/40\"\n                    }`}\n                    onClick={() => handleTagClick(tag)}\n                  >\n                    <Tag className=\"w-3 h-3 mr-1\" />\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Memory Notes */}\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <Card key={i} className=\"bg-white/5 border-white/10 animate-pulse\">\n                  <CardHeader>\n                    <div className=\"w-full h-20 bg-white/10 rounded mb-4\"></div>\n                    <div className=\"flex gap-2\">\n                      <div className=\"w-16 h-6 bg-white/10 rounded\"></div>\n                      <div className=\"w-20 h-6 bg-white/10 rounded\"></div>\n                    </div>\n                  </CardHeader>\n                </Card>\n              ))}\n            </div>\n          ) : memoryData?.notes?.length ? (\n            <div className=\"space-y-4\">\n              {memoryData.notes.map((note: MemoryNote) => {\n                const memoryTier = getMemoryTier(note.relevance_score);\n                return (\n                  <Card\n                    key={note.id}\n                    className=\"bg-black/40 backdrop-blur-xl border-white/10 hover:border-blue-500/30 transition-all duration-200\"\n                  >\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Badge className={`${memoryTier.color} bg-transparent border-current`}>\n                              {memoryTier.tier} Memory\n                            </Badge>\n                            {note.relevance_score && (\n                              <span className=\"text-xs text-gray-500\">\n                                {Math.round(note.relevance_score * 100)}% relevance\n                              </span>\n                            )}\n                          </div>\n                          <CardDescription className=\"text-white text-base leading-relaxed\">\n                            {note.content}\n                          </CardDescription>\n                        </div>\n                      </div>\n                      \n                      {/* Tags and Links */}\n                      <div className=\"flex flex-wrap gap-2 mt-4\">\n                        {note.tags.map((tag) => (\n                          <Badge\n                            key={tag}\n                            variant=\"outline\"\n                            className=\"text-xs border-white/20 text-gray-400 cursor-pointer hover:border-blue-500/50\"\n                            onClick={() => handleTagClick(tag)}\n                          >\n                            <Tag className=\"w-3 h-3 mr-1\" />\n                            {tag}\n                          </Badge>\n                        ))}\n                        \n                        {note.links.map((link) => (\n                          <Badge\n                            key={link}\n                            variant=\"outline\"\n                            className=\"text-xs border-green-500/20 text-green-400\"\n                          >\n                            <LinkIcon className=\"w-3 h-3 mr-1\" />\n                            {link}\n                          </Badge>\n                        ))}\n                      </div>\n                      \n                      {/* Metadata */}\n                      <div className=\"flex items-center justify-between mt-4 pt-4 border-t border-white/10\">\n                        <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"w-3 h-3\" />\n                            {format(new Date(note.created_at), 'MMM d, yyyy')}\n                          </div>\n                          <div>Session: {note.session_id.slice(0, 8)}</div>\n                        </div>\n                      </div>\n                    </CardHeader>\n                  </Card>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-2xl flex items-center justify-center mx-auto mb-6 border border-blue-500/20\">\n                <Brain className=\"w-10 h-10 text-blue-400\" />\n              </div>\n              <h3 className=\"text-2xl font-semibold mb-3 text-white\">No memory notes found</h3>\n              <p className=\"text-gray-400 mb-8 max-w-md mx-auto leading-relaxed\">\n                {searchQuery\n                  ? `No memories match \"${searchQuery}\". Try different search terms.`\n                  : \"Start adding memory notes to build your AI knowledge base.\"}\n              </p>\n              <Button\n                onClick={() => setIsCreateDialogOpen(true)}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Your First Memory Note\n              </Button>\n            </div>\n          )}\n\n          {/* Create Memory Note Dialog */}\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogContent className=\"bg-black/90 backdrop-blur-xl border-white/20 text-white max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-2xl\">Add Memory Note</DialogTitle>\n                <DialogDescription className=\"text-gray-400\">\n                  Create a new memory note that the AI can learn from and reference\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-3 text-white\">\n                    Content *\n                  </label>\n                  <Textarea\n                    value={newNote.content}\n                    onChange={(e) => setNewNote(prev => ({ ...prev, content: e.target.value }))}\n                    placeholder=\"Describe what you learned, decisions made, code patterns, or important insights...\"\n                    className=\"bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-blue-500 min-h-32\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-3 text-white\">\n                    Tags (comma-separated)\n                  </label>\n                  <Input\n                    value={newNote.tags}\n                    onChange={(e) => setNewNote(prev => ({ ...prev, tags: e.target.value }))}\n                    placeholder=\"react, database, bug-fix, architecture...\"\n                    className=\"bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-blue-500\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-3 text-white\">\n                    Related Links (comma-separated)\n                  </label>\n                  <Input\n                    value={newNote.links}\n                    onChange={(e) => setNewNote(prev => ({ ...prev, links: e.target.value }))}\n                    placeholder=\"project-name, file.js, function-name...\"\n                    className=\"bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-blue-500\"\n                  />\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsCreateDialogOpen(false)}\n                  className=\"border-white/20 text-white hover:bg-white/10\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleCreateNote}\n                  disabled={createNoteMutation.isPending || !newNote.content.trim()}\n                  className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n                >\n                  {createNoteMutation.isPending ? \"Creating...\" : \"Create Note\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18687},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/projects.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport SpaceBackground from \"@/components/SpaceBackground\";\nimport Navigation from \"@/components/Navigation\";\nimport { \n  Search, \n  Plus, \n  Folder, \n  Calendar, \n  Code2, \n  GitBranch, \n  Clock, \n  MoreVertical, \n  Trash2, \n  Edit3,\n  ExternalLink,\n  Star,\n  StarOff\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Project {\n  id: string;\n  name: string;\n  description: string;\n  language: string;\n  framework?: string;\n  status: 'active' | 'archived' | 'template';\n  isStarred: boolean;\n  lastAccessed: string;\n  createdAt: string;\n  updatedAt: string;\n  gitBranch?: string;\n  collaborators?: number;\n}\n\nconst PROJECT_STATUSES = [\n  { id: 'all', name: 'All Projects', count: 0 },\n  { id: 'active', name: 'Active', count: 0 },\n  { id: 'archived', name: 'Archived', count: 0 },\n  { id: 'template', name: 'Templates', count: 0 },\n];\n\nexport default function Projects() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch projects\n  const { data: projects = [], isLoading } = useQuery({\n    queryKey: ['/api/projects', selectedStatus, searchQuery],\n    queryFn: async () => {\n      let url = '/api/projects';\n      const params = new URLSearchParams();\n      \n      if (selectedStatus !== 'all') {\n        params.set('status', selectedStatus);\n      }\n      if (searchQuery.trim()) {\n        params.set('search', searchQuery.trim());\n      }\n      \n      if (params.toString()) {\n        url += `?${params.toString()}`;\n      }\n      \n      const response = await apiRequest('GET', url);\n      return response.json();\n    }\n  });\n\n  // Create new project\n  const createProjectMutation = useMutation({\n    mutationFn: async (projectData: { name: string; description: string; language: string; framework?: string }) => {\n      const response = await apiRequest('POST', '/api/projects', {\n        body: JSON.stringify(projectData)\n      });\n      return response.json();\n    },\n    onSuccess: (project) => {\n      toast({\n        title: \"Project created successfully\",\n        description: `${project.name} is ready to use`\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      setLocation(`/ide/${project.id}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create project\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Delete project\n  const deleteProjectMutation = useMutation({\n    mutationFn: async (projectId: string) => {\n      await apiRequest('DELETE', `/api/projects/${projectId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Project deleted\",\n        description: \"Project has been permanently deleted\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete project\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Toggle star project\n  const toggleStarMutation = useMutation({\n    mutationFn: async ({ projectId, isStarred }: { projectId: string; isStarred: boolean }) => {\n      await apiRequest('PATCH', `/api/projects/${projectId}`, {\n        body: JSON.stringify({ isStarred: !isStarred })\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n    }\n  });\n\n  const handleCreateProject = () => {\n    // For now, create a simple React TypeScript project\n    createProjectMutation.mutate({\n      name: `Project ${projects.length + 1}`,\n      description: \"A new project created from scratch\",\n      language: \"typescript\",\n      framework: \"react\"\n    });\n  };\n\n  const handleDeleteProject = (projectId: string, projectName: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${projectName}\"? This action cannot be undone.`)) {\n      deleteProjectMutation.mutate(projectId);\n    }\n  };\n\n  const handleToggleStar = (project: Project) => {\n    toggleStarMutation.mutate({ projectId: project.id, isStarred: project.isStarred });\n  };\n\n  const getLanguageColor = (language: string) => {\n    const colors: Record<string, string> = {\n      typescript: \"bg-blue-500/20 text-blue-300 border-blue-500/30\",\n      javascript: \"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\",\n      python: \"bg-green-500/20 text-green-300 border-green-500/30\",\n      java: \"bg-red-500/20 text-red-300 border-red-500/30\",\n      go: \"bg-cyan-500/20 text-cyan-300 border-cyan-500/30\",\n      rust: \"bg-orange-500/20 text-orange-300 border-orange-500/30\"\n    };\n    return colors[language.toLowerCase()] || \"bg-gray-500/20 text-gray-300 border-gray-500/30\";\n  };\n\n  const filteredProjects = projects.filter((project: Project) => {\n    const matchesStatus = selectedStatus === 'all' || project.status === selectedStatus;\n    const matchesSearch = !searchQuery.trim() || \n      project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      project.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      project.language.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesStatus && matchesSearch;\n  });\n\n  return (\n    <div className=\"min-h-screen relative\">\n      <SpaceBackground />\n      <Navigation />\n      \n      <div className=\"ml-64 relative z-10\">\n        <div className=\"p-8\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-4xl font-bold text-white mb-2\">My Projects</h1>\n              <p className=\"text-gray-400 text-lg\">\n                Manage and organize your development projects\n              </p>\n            </div>\n            <Button\n              onClick={handleCreateProject}\n              disabled={createProjectMutation.isPending}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              {createProjectMutation.isPending ? \"Creating...\" : \"New Project\"}\n            </Button>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-2xl border border-white/10 p-6 mb-8\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              {/* Search */}\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                <Input\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search projects by name, language, or description...\"\n                  className=\"pl-10 bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-blue-500\"\n                />\n              </div>\n              \n              {/* Status Filter */}\n              <div className=\"flex flex-wrap gap-2\">\n                {PROJECT_STATUSES.map((status) => (\n                  <Button\n                    key={status.id}\n                    variant={selectedStatus === status.id ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedStatus(status.id)}\n                    className={\n                      selectedStatus === status.id\n                        ? \"bg-gradient-to-r from-blue-600 to-purple-600 text-white border-0\"\n                        : \"border-white/20 text-white hover:bg-white/10 bg-transparent\"\n                    }\n                  >\n                    {status.name}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Projects Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <Card key={i} className=\"bg-white/5 border-white/10 animate-pulse\">\n                  <CardHeader>\n                    <div className=\"w-full h-4 bg-white/10 rounded mb-2\"></div>\n                    <div className=\"w-2/3 h-3 bg-white/10 rounded\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"w-full h-12 bg-white/10 rounded mb-4\"></div>\n                    <div className=\"flex gap-2\">\n                      <div className=\"w-16 h-6 bg-white/10 rounded\"></div>\n                      <div className=\"w-20 h-6 bg-white/10 rounded\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredProjects.length ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProjects.map((project: Project) => (\n                <Card\n                  key={project.id}\n                  className=\"bg-black/40 backdrop-blur-xl border-white/10 hover:border-blue-500/50 transition-all duration-300 group hover:shadow-2xl hover:shadow-blue-500/10 cursor-pointer\"\n                  onClick={() => setLocation(`/ide/${project.id}`)}\n                >\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <CardTitle className=\"text-white text-lg group-hover:text-blue-300 transition-colors\">\n                            {project.name}\n                          </CardTitle>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleToggleStar(project);\n                            }}\n                            className=\"text-gray-400 hover:text-yellow-400 transition-colors\"\n                          >\n                            {project.isStarred ? (\n                              <Star className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                            ) : (\n                              <StarOff className=\"w-4 h-4\" />\n                            )}\n                          </button>\n                        </div>\n                        <CardDescription className=\"text-gray-400 text-sm line-clamp-2\">\n                          {project.description}\n                        </CardDescription>\n                      </div>\n                      \n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white\">\n                            <MoreVertical className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent className=\"bg-black/80 backdrop-blur-xl border-white/10\">\n                          <DropdownMenuItem onClick={(e) => {\n                            e.stopPropagation();\n                            setLocation(`/ide/${project.id}`);\n                          }}>\n                            <ExternalLink className=\"w-4 h-4 mr-2\" />\n                            Open in IDE\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={(e) => e.stopPropagation()}>\n                            <Edit3 className=\"w-4 h-4 mr-2\" />\n                            Rename\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator className=\"bg-white/10\" />\n                          <DropdownMenuItem \n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleDeleteProject(project.id, project.name);\n                            }}\n                            className=\"text-red-400 focus:text-red-300\"\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                            Delete\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                    \n                    {/* Project Stats */}\n                    <div className=\"flex items-center gap-4 mt-3 text-xs text-gray-500\">\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"w-3 h-3\" />\n                        {formatDistanceToNow(new Date(project.lastAccessed), { addSuffix: true })}\n                      </div>\n                      {project.gitBranch && (\n                        <div className=\"flex items-center gap-1\">\n                          <GitBranch className=\"w-3 h-3\" />\n                          {project.gitBranch}\n                        </div>\n                      )}\n                      {project.collaborators && project.collaborators > 1 && (\n                        <div className=\"flex items-center gap-1\">\n                          <span>{project.collaborators} collaborators</span>\n                        </div>\n                      )}\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    {/* Tags */}\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      <Badge className={`text-xs ${getLanguageColor(project.language)}`}>\n                        {project.language}\n                      </Badge>\n                      {project.framework && (\n                        <Badge variant=\"outline\" className=\"text-xs border-white/20 text-gray-400\">\n                          {project.framework}\n                        </Badge>\n                      )}\n                      <Badge variant=\"outline\" className=\"text-xs border-white/20 text-gray-400\">\n                        {project.status}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"text-xs text-gray-500\">\n                      Created {formatDistanceToNow(new Date(project.createdAt), { addSuffix: true })}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-2xl flex items-center justify-center mx-auto mb-6 border border-blue-500/20\">\n                <Folder className=\"w-10 h-10 text-blue-400\" />\n              </div>\n              <h3 className=\"text-2xl font-semibold mb-3 text-white\">\n                {searchQuery ? \"No projects found\" : \"No projects yet\"}\n              </h3>\n              <p className=\"text-gray-400 mb-8 max-w-md mx-auto leading-relaxed\">\n                {searchQuery\n                  ? `No projects match \"${searchQuery}\". Try adjusting your search terms.`\n                  : \"Create your first project to get started with development.\"}\n              </p>\n              <div className=\"flex gap-4 justify-center\">\n                {searchQuery && (\n                  <Button\n                    onClick={() => {\n                      setSearchQuery(\"\");\n                      setSelectedStatus(\"all\");\n                    }}\n                    variant=\"outline\"\n                    className=\"border-white/20 text-white hover:bg-white/10\"\n                  >\n                    Clear Search\n                  </Button>\n                )}\n                <Button\n                  onClick={handleCreateProject}\n                  disabled={createProjectMutation.isPending}\n                  className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  {createProjectMutation.isPending ? \"Creating...\" : \"Create New Project\"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16929},"client/src/pages/recent.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLocation } from \"wouter\";\nimport SpaceBackground from \"@/components/SpaceBackground\";\nimport Navigation from \"@/components/Navigation\";\nimport { \n  Search, \n  Clock, \n  Code2, \n  GitBranch, \n  Calendar,\n  ExternalLink,\n  Star,\n  Eye\n} from \"lucide-react\";\nimport { formatDistanceToNow, format } from \"date-fns\";\n\ninterface RecentActivity {\n  id: string;\n  projectId: string;\n  projectName: string;\n  type: 'opened' | 'edited' | 'created' | 'committed' | 'deployed';\n  description: string;\n  timestamp: string;\n  language: string;\n  framework?: string;\n  filePath?: string;\n  gitBranch?: string;\n}\n\nconst ACTIVITY_TYPES = [\n  { id: 'all', name: 'All Activity' },\n  { id: 'opened', name: 'Opened' },\n  { id: 'edited', name: 'Edited' },\n  { id: 'created', name: 'Created' },\n  { id: 'committed', name: 'Committed' },\n  { id: 'deployed', name: 'Deployed' },\n];\n\nconst TIME_FILTERS = [\n  { id: 'all', name: 'All Time' },\n  { id: 'today', name: 'Today' },\n  { id: 'week', name: 'This Week' },\n  { id: 'month', name: 'This Month' },\n];\n\nexport default function Recent() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"all\");\n  const [selectedTimeFilter, setSelectedTimeFilter] = useState(\"all\");\n\n  // Fetch recent activities\n  const { data: activities = [], isLoading } = useQuery({\n    queryKey: ['/api/activities/recent', selectedType, selectedTimeFilter, searchQuery],\n    queryFn: async () => {\n      let url = '/api/activities/recent';\n      const params = new URLSearchParams();\n      \n      if (selectedType !== 'all') {\n        params.set('type', selectedType);\n      }\n      if (selectedTimeFilter !== 'all') {\n        params.set('timeFilter', selectedTimeFilter);\n      }\n      if (searchQuery.trim()) {\n        params.set('search', searchQuery.trim());\n      }\n      \n      if (params.toString()) {\n        url += `?${params.toString()}`;\n      }\n      \n      // Mock data for now - in production this would fetch from API\n      return [\n        {\n          id: '1',\n          projectId: 'proj1',\n          projectName: 'React Dashboard',\n          type: 'edited',\n          description: 'Modified components/Dashboard.tsx',\n          timestamp: new Date(Date.now() - 1000 * 60 * 15).toISOString(), // 15 mins ago\n          language: 'typescript',\n          framework: 'react',\n          filePath: 'src/components/Dashboard.tsx',\n          gitBranch: 'feature/new-charts'\n        },\n        {\n          id: '2',\n          projectId: 'proj2',\n          projectName: 'API Server',\n          type: 'committed',\n          description: 'Added user authentication endpoints',\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago\n          language: 'typescript',\n          framework: 'express',\n          gitBranch: 'main'\n        },\n        {\n          id: '3',\n          projectId: 'proj3',\n          projectName: 'Mobile App',\n          type: 'opened',\n          description: 'Opened project in IDE',\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 4).toISOString(), // 4 hours ago\n          language: 'javascript',\n          framework: 'react-native'\n        },\n        {\n          id: '4',\n          projectId: 'proj1',\n          projectName: 'React Dashboard',\n          type: 'deployed',\n          description: 'Deployed to production',\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 day ago\n          language: 'typescript',\n          framework: 'react'\n        },\n        {\n          id: '5',\n          projectId: 'proj4',\n          projectName: 'AI Chat Bot',\n          type: 'created',\n          description: 'Created new project from template',\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(), // 2 days ago\n          language: 'python',\n          framework: 'fastapi'\n        }\n      ].filter(activity => {\n        const matchesType = selectedType === 'all' || activity.type === selectedType;\n        const matchesSearch = !searchQuery.trim() || \n          activity.projectName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          activity.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          (activity.filePath && activity.filePath.toLowerCase().includes(searchQuery.toLowerCase()));\n        \n        let matchesTime = true;\n        if (selectedTimeFilter !== 'all') {\n          const activityTime = new Date(activity.timestamp);\n          const now = new Date();\n          \n          switch (selectedTimeFilter) {\n            case 'today':\n              matchesTime = activityTime.toDateString() === now.toDateString();\n              break;\n            case 'week':\n              const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n              matchesTime = activityTime >= weekAgo;\n              break;\n            case 'month':\n              const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n              matchesTime = activityTime >= monthAgo;\n              break;\n          }\n        }\n        \n        return matchesType && matchesSearch && matchesTime;\n      });\n    }\n  });\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'opened':\n        return <ExternalLink className=\"w-4 h-4 text-blue-400\" />;\n      case 'edited':\n        return <Code2 className=\"w-4 h-4 text-green-400\" />;\n      case 'created':\n        return <Star className=\"w-4 h-4 text-purple-400\" />;\n      case 'committed':\n        return <GitBranch className=\"w-4 h-4 text-orange-400\" />;\n      case 'deployed':\n        return <Eye className=\"w-4 h-4 text-pink-400\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case 'opened':\n        return 'text-blue-400';\n      case 'edited':\n        return 'text-green-400';\n      case 'created':\n        return 'text-purple-400';\n      case 'committed':\n        return 'text-orange-400';\n      case 'deployed':\n        return 'text-pink-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const getLanguageColor = (language: string) => {\n    const colors: Record<string, string> = {\n      typescript: \"bg-blue-500/20 text-blue-300 border-blue-500/30\",\n      javascript: \"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\",\n      python: \"bg-green-500/20 text-green-300 border-green-500/30\",\n      java: \"bg-red-500/20 text-red-300 border-red-500/30\",\n      go: \"bg-cyan-500/20 text-cyan-300 border-cyan-500/30\",\n      rust: \"bg-orange-500/20 text-orange-300 border-orange-500/30\"\n    };\n    return colors[language.toLowerCase()] || \"bg-gray-500/20 text-gray-300 border-gray-500/30\";\n  };\n\n  return (\n    <div className=\"min-h-screen relative\">\n      <SpaceBackground />\n      <Navigation />\n      \n      <div className=\"ml-64 relative z-10\">\n        <div className=\"p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-white mb-2\">Recent Activity</h1>\n            <p className=\"text-gray-400 text-lg\">\n              Track your recent development activities and project updates\n            </p>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-2xl border border-white/10 p-6 mb-8\">\n            <div className=\"flex flex-col lg:flex-row gap-4 mb-4\">\n              {/* Search */}\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                <Input\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search activities by project, file, or description...\"\n                  className=\"pl-10 bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-blue-500\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              {/* Activity Type Filter */}\n              <div className=\"flex flex-wrap gap-2\">\n                {ACTIVITY_TYPES.map((type) => (\n                  <Button\n                    key={type.id}\n                    variant={selectedType === type.id ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedType(type.id)}\n                    className={\n                      selectedType === type.id\n                        ? \"bg-gradient-to-r from-blue-600 to-purple-600 text-white border-0\"\n                        : \"border-white/20 text-white hover:bg-white/10 bg-transparent\"\n                    }\n                  >\n                    {type.name}\n                  </Button>\n                ))}\n              </div>\n              \n              {/* Time Filter */}\n              <div className=\"flex flex-wrap gap-2\">\n                {TIME_FILTERS.map((filter) => (\n                  <Button\n                    key={filter.id}\n                    variant={selectedTimeFilter === filter.id ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedTimeFilter(filter.id)}\n                    className={\n                      selectedTimeFilter === filter.id\n                        ? \"bg-gradient-to-r from-purple-600 to-pink-600 text-white border-0\"\n                        : \"border-white/20 text-white hover:bg-white/10 bg-transparent\"\n                    }\n                  >\n                    <Calendar className=\"w-3 h-3 mr-1\" />\n                    {filter.name}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Activity List */}\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 8 }).map((_, i) => (\n                <Card key={i} className=\"bg-white/5 border-white/10 animate-pulse\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex gap-4\">\n                      <div className=\"w-10 h-10 bg-white/10 rounded-full\"></div>\n                      <div className=\"flex-1\">\n                        <div className=\"w-1/3 h-4 bg-white/10 rounded mb-2\"></div>\n                        <div className=\"w-2/3 h-3 bg-white/10 rounded mb-2\"></div>\n                        <div className=\"flex gap-2\">\n                          <div className=\"w-16 h-5 bg-white/10 rounded\"></div>\n                          <div className=\"w-20 h-5 bg-white/10 rounded\"></div>\n                        </div>\n                      </div>\n                      <div className=\"w-20 h-4 bg-white/10 rounded\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : activities.length ? (\n            <div className=\"space-y-4\">\n              {activities.map((activity) => (\n                <Card\n                  key={activity.id}\n                  className=\"bg-black/40 backdrop-blur-xl border-white/10 hover:border-blue-500/50 transition-all duration-300 group hover:shadow-lg hover:shadow-blue-500/10 cursor-pointer\"\n                  onClick={() => setLocation(`/ide/${activity.projectId}`)}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start gap-4\">\n                      {/* Activity Icon */}\n                      <div className=\"w-10 h-10 bg-black/40 border border-white/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                        {getActivityIcon(activity.type)}\n                      </div>\n                      \n                      {/* Activity Details */}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3 className=\"text-white font-medium text-lg group-hover:text-blue-300 transition-colors\">\n                            {activity.projectName}\n                          </h3>\n                          <span className={`text-sm font-medium capitalize ${getActivityColor(activity.type)}`}>\n                            {activity.type}\n                          </span>\n                        </div>\n                        \n                        <p className=\"text-gray-400 text-sm mb-3 leading-relaxed\">\n                          {activity.description}\n                        </p>\n                        \n                        {activity.filePath && (\n                          <p className=\"text-gray-500 text-xs mb-3 font-mono bg-white/5 px-2 py-1 rounded inline-block\">\n                            {activity.filePath}\n                          </p>\n                        )}\n                        \n                        {/* Tags */}\n                        <div className=\"flex flex-wrap gap-2\">\n                          <Badge className={`text-xs ${getLanguageColor(activity.language)}`}>\n                            {activity.language}\n                          </Badge>\n                          {activity.framework && (\n                            <Badge variant=\"outline\" className=\"text-xs border-white/20 text-gray-400\">\n                              {activity.framework}\n                            </Badge>\n                          )}\n                          {activity.gitBranch && (\n                            <Badge variant=\"outline\" className=\"text-xs border-white/20 text-gray-400\">\n                              <GitBranch className=\"w-3 h-3 mr-1\" />\n                              {activity.gitBranch}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {/* Timestamp */}\n                      <div className=\"text-right text-xs text-gray-500 flex-shrink-0\">\n                        <div className=\"mb-1\">\n                          {formatDistanceToNow(new Date(activity.timestamp), { addSuffix: true })}\n                        </div>\n                        <div>\n                          {format(new Date(activity.timestamp), 'MMM d, HH:mm')}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-2xl flex items-center justify-center mx-auto mb-6 border border-blue-500/20\">\n                <Clock className=\"w-10 h-10 text-blue-400\" />\n              </div>\n              <h3 className=\"text-2xl font-semibold mb-3 text-white\">No recent activity</h3>\n              <p className=\"text-gray-400 mb-8 max-w-md mx-auto leading-relaxed\">\n                {searchQuery\n                  ? `No activities match \"${searchQuery}\". Try adjusting your search terms or filters.`\n                  : \"Start working on projects to see your recent development activities here.\"}\n              </p>\n              {searchQuery && (\n                <Button\n                  onClick={() => {\n                    setSearchQuery(\"\");\n                    setSelectedType(\"all\");\n                    setSelectedTimeFilter(\"all\");\n                  }}\n                  variant=\"outline\"\n                  className=\"border-white/20 text-white hover:bg-white/10\"\n                >\n                  Clear Filters\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16058},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport SpaceBackground from \"@/components/SpaceBackground\";\nimport Navigation from \"@/components/Navigation\";\nimport { \n  Settings as SettingsIcon, \n  User, \n  Palette, \n  Code, \n  Shield, \n  Bell, \n  Globe, \n  Zap, \n  Database,\n  Key,\n  Save,\n  RefreshCw,\n  Trash2,\n  Download,\n  Upload,\n  Eye,\n  EyeOff,\n  Monitor,\n  Moon,\n  Sun\n} from \"lucide-react\";\n\ninterface UserSettings {\n  // Profile\n  name: string;\n  email: string;\n  bio: string;\n  avatar?: string;\n  \n  // Appearance\n  theme: 'light' | 'dark' | 'auto';\n  fontSize: number;\n  fontFamily: string;\n  lineHeight: number;\n  \n  // Editor\n  tabSize: number;\n  wordWrap: boolean;\n  autoSave: boolean;\n  showLineNumbers: boolean;\n  showMinimap: boolean;\n  formatOnSave: boolean;\n  \n  // Privacy & Security\n  profileVisibility: 'public' | 'private';\n  allowCollaboration: boolean;\n  twoFactorEnabled: boolean;\n  \n  // Notifications\n  emailNotifications: boolean;\n  pushNotifications: boolean;\n  projectUpdates: boolean;\n  securityAlerts: boolean;\n  \n  // Advanced\n  aiAssistance: boolean;\n  autoComplete: boolean;\n  gitAutoCommit: boolean;\n  debugMode: boolean;\n}\n\nconst FONT_FAMILIES = [\n  { value: 'JetBrains Mono', label: 'JetBrains Mono' },\n  { value: 'Fira Code', label: 'Fira Code' },\n  { value: 'Source Code Pro', label: 'Source Code Pro' },\n  { value: 'Inconsolata', label: 'Inconsolata' },\n  { value: 'Monaco', label: 'Monaco' },\n  { value: 'Consolas', label: 'Consolas' }\n];\n\nconst FONT_SIZES = [10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24];\nconst TAB_SIZES = [2, 4, 8];\nconst LINE_HEIGHTS = [1.2, 1.4, 1.5, 1.6, 1.8, 2.0];\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"profile\");\n\n  // Fetch user settings\n  const { data: settings, isLoading } = useQuery({\n    queryKey: ['/api/settings'],\n    queryFn: async () => {\n      // Mock data for now - in production this would fetch from API\n      return {\n        name: 'John Developer',\n        email: 'john@example.com',\n        bio: 'Full-stack developer passionate about AI and modern web technologies',\n        theme: 'dark',\n        fontSize: 14,\n        fontFamily: 'JetBrains Mono',\n        lineHeight: 1.5,\n        tabSize: 2,\n        wordWrap: true,\n        autoSave: true,\n        showLineNumbers: true,\n        showMinimap: true,\n        formatOnSave: true,\n        profileVisibility: 'public',\n        allowCollaboration: true,\n        twoFactorEnabled: false,\n        emailNotifications: true,\n        pushNotifications: true,\n        projectUpdates: true,\n        securityAlerts: true,\n        aiAssistance: true,\n        autoComplete: true,\n        gitAutoCommit: false,\n        debugMode: false\n      } as UserSettings;\n    }\n  });\n\n  // Update settings\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (newSettings: Partial<UserSettings>) => {\n      await apiRequest('PATCH', '/api/settings', {\n        body: JSON.stringify(newSettings)\n      });\n      return newSettings;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings saved\",\n        description: \"Your preferences have been updated successfully\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/settings'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to save settings\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSettingChange = (key: keyof UserSettings, value: any) => {\n    updateSettingsMutation.mutate({ [key]: value });\n  };\n\n  const handleBulkUpdate = (updates: Partial<UserSettings>) => {\n    updateSettingsMutation.mutate(updates);\n  };\n\n  if (isLoading || !settings) {\n    return (\n      <div className=\"min-h-screen relative\">\n        <SpaceBackground />\n        <Navigation />\n        <div className=\"ml-64 relative z-10 flex items-center justify-center h-screen\">\n          <RefreshCw className=\"w-8 h-8 text-blue-400 animate-spin\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen relative\">\n      <SpaceBackground />\n      <Navigation />\n      \n      <div className=\"ml-64 relative z-10\">\n        <div className=\"p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-white mb-2 flex items-center gap-3\">\n              <SettingsIcon className=\"w-8 h-8 text-blue-400\" />\n              Settings\n            </h1>\n            <p className=\"text-gray-400 text-lg\">\n              Customize your development environment and preferences\n            </p>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"bg-black/20 border border-white/10 p-1\">\n              <TabsTrigger value=\"profile\" className=\"data-[state=active]:bg-blue-600/20 data-[state=active]:text-blue-300\">\n                <User className=\"w-4 h-4 mr-2\" />\n                Profile\n              </TabsTrigger>\n              <TabsTrigger value=\"appearance\" className=\"data-[state=active]:bg-blue-600/20 data-[state=active]:text-blue-300\">\n                <Palette className=\"w-4 h-4 mr-2\" />\n                Appearance\n              </TabsTrigger>\n              <TabsTrigger value=\"editor\" className=\"data-[state=active]:bg-blue-600/20 data-[state=active]:text-blue-300\">\n                <Code className=\"w-4 h-4 mr-2\" />\n                Editor\n              </TabsTrigger>\n              <TabsTrigger value=\"security\" className=\"data-[state=active]:bg-blue-600/20 data-[state=active]:text-blue-300\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Security\n              </TabsTrigger>\n              <TabsTrigger value=\"notifications\" className=\"data-[state=active]:bg-blue-600/20 data-[state=active]:text-blue-300\">\n                <Bell className=\"w-4 h-4 mr-2\" />\n                Notifications\n              </TabsTrigger>\n              <TabsTrigger value=\"advanced\" className=\"data-[state=active]:bg-blue-600/20 data-[state=active]:text-blue-300\">\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Advanced\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Profile Settings */}\n            <TabsContent value=\"profile\" className=\"space-y-6\">\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <User className=\"w-5 h-5 text-blue-400\" />\n                    Profile Information\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Manage your public profile and personal information\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"name\" className=\"text-white\">Display Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={settings.name}\n                        onChange={(e) => handleSettingChange('name', e.target.value)}\n                        className=\"bg-white/5 border-white/20 text-white\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\" className=\"text-white\">Email</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={settings.email}\n                        onChange={(e) => handleSettingChange('email', e.target.value)}\n                        className=\"bg-white/5 border-white/20 text-white\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"bio\" className=\"text-white\">Bio</Label>\n                    <Textarea\n                      id=\"bio\"\n                      value={settings.bio}\n                      onChange={(e) => handleSettingChange('bio', e.target.value)}\n                      placeholder=\"Tell us about yourself...\"\n                      className=\"bg-white/5 border-white/20 text-white resize-none\"\n                      rows={4}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label className=\"text-white\">Profile Visibility</Label>\n                      <p className=\"text-sm text-gray-400\">Control who can see your profile</p>\n                    </div>\n                    <Select\n                      value={settings.profileVisibility}\n                      onValueChange={(value: 'public' | 'private') => handleSettingChange('profileVisibility', value)}\n                    >\n                      <SelectTrigger className=\"w-32 bg-white/5 border-white/20 text-white\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/80 border-white/10\">\n                        <SelectItem value=\"public\">Public</SelectItem>\n                        <SelectItem value=\"private\">Private</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Appearance Settings */}\n            <TabsContent value=\"appearance\" className=\"space-y-6\">\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Palette className=\"w-5 h-5 text-purple-400\" />\n                    Theme & Display\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Customize the visual appearance of your workspace\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <Label className=\"text-white mb-3 block\">Theme</Label>\n                    <div className=\"flex gap-3\">\n                      {[\n                        { value: 'light', label: 'Light', icon: Sun },\n                        { value: 'dark', label: 'Dark', icon: Moon },\n                        { value: 'auto', label: 'Auto', icon: Monitor }\n                      ].map((theme) => {\n                        const Icon = theme.icon;\n                        return (\n                          <Button\n                            key={theme.value}\n                            variant={settings.theme === theme.value ? \"default\" : \"outline\"}\n                            onClick={() => handleSettingChange('theme', theme.value)}\n                            className={\n                              settings.theme === theme.value\n                                ? \"bg-gradient-to-r from-purple-600 to-pink-600 text-white\"\n                                : \"border-white/20 text-white hover:bg-white/10\"\n                            }\n                          >\n                            <Icon className=\"w-4 h-4 mr-2\" />\n                            {theme.label}\n                          </Button>\n                        );\n                      })}\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"text-white\">Font Family</Label>\n                      <Select\n                        value={settings.fontFamily}\n                        onValueChange={(value) => handleSettingChange('fontFamily', value)}\n                      >\n                        <SelectTrigger className=\"bg-white/5 border-white/20 text-white\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-black/80 border-white/10\">\n                          {FONT_FAMILIES.map((font) => (\n                            <SelectItem key={font.value} value={font.value}>\n                              {font.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-white\">Font Size</Label>\n                      <Select\n                        value={settings.fontSize.toString()}\n                        onValueChange={(value) => handleSettingChange('fontSize', parseInt(value))}\n                      >\n                        <SelectTrigger className=\"bg-white/5 border-white/20 text-white\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-black/80 border-white/10\">\n                          {FONT_SIZES.map((size) => (\n                            <SelectItem key={size} value={size.toString()}>\n                              {size}px\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-white\">Line Height</Label>\n                      <Select\n                        value={settings.lineHeight.toString()}\n                        onValueChange={(value) => handleSettingChange('lineHeight', parseFloat(value))}\n                      >\n                        <SelectTrigger className=\"bg-white/5 border-white/20 text-white\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-black/80 border-white/10\">\n                          {LINE_HEIGHTS.map((height) => (\n                            <SelectItem key={height} value={height.toString()}>\n                              {height}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Editor Settings */}\n            <TabsContent value=\"editor\" className=\"space-y-6\">\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Code className=\"w-5 h-5 text-green-400\" />\n                    Code Editor Preferences\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Configure your coding environment and editor behavior\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label className=\"text-white\">Tab Size</Label>\n                      <div className=\"flex gap-2 mt-2\">\n                        {TAB_SIZES.map((size) => (\n                          <Button\n                            key={size}\n                            variant={settings.tabSize === size ? \"default\" : \"outline\"}\n                            size=\"sm\"\n                            onClick={() => handleSettingChange('tabSize', size)}\n                            className={\n                              settings.tabSize === size\n                                ? \"bg-green-600/20 text-green-300 border-green-500/30\"\n                                : \"border-white/20 text-white hover:bg-white/10\"\n                            }\n                          >\n                            {size}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {[\n                      { key: 'wordWrap', label: 'Word Wrap', description: 'Wrap long lines of code' },\n                      { key: 'autoSave', label: 'Auto Save', description: 'Automatically save files as you type' },\n                      { key: 'showLineNumbers', label: 'Line Numbers', description: 'Show line numbers in the editor' },\n                      { key: 'showMinimap', label: 'Minimap', description: 'Show code minimap overview' },\n                      { key: 'formatOnSave', label: 'Format on Save', description: 'Auto-format code when saving' },\n                      { key: 'autoComplete', label: 'Auto Complete', description: 'Enable intelligent code completion' }\n                    ].map((setting) => (\n                      <div key={setting.key} className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg border border-white/10\">\n                        <div>\n                          <Label className=\"text-white\">{setting.label}</Label>\n                          <p className=\"text-sm text-gray-400\">{setting.description}</p>\n                        </div>\n                        <Switch\n                          checked={settings[setting.key as keyof UserSettings] as boolean}\n                          onCheckedChange={(checked) => handleSettingChange(setting.key as keyof UserSettings, checked)}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Security Settings */}\n            <TabsContent value=\"security\" className=\"space-y-6\">\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Shield className=\"w-5 h-5 text-red-400\" />\n                    Privacy & Security\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Manage your account security and privacy settings\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg border border-white/10\">\n                      <div>\n                        <Label className=\"text-white\">Two-Factor Authentication</Label>\n                        <p className=\"text-sm text-gray-400\">Add an extra layer of security to your account</p>\n                      </div>\n                      <Switch\n                        checked={settings.twoFactorEnabled}\n                        onCheckedChange={(checked) => handleSettingChange('twoFactorEnabled', checked)}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg border border-white/10\">\n                      <div>\n                        <Label className=\"text-white\">Allow Collaboration</Label>\n                        <p className=\"text-sm text-gray-400\">Let others collaborate on your projects</p>\n                      </div>\n                      <Switch\n                        checked={settings.allowCollaboration}\n                        onCheckedChange={(checked) => handleSettingChange('allowCollaboration', checked)}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-4 bg-white/5 rounded-lg border border-white/10\">\n                    <Label className=\"text-white\">API Key</Label>\n                    <p className=\"text-sm text-gray-400 mb-3\">Your personal API key for integrations</p>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        type={showApiKey ? \"text\" : \"password\"}\n                        value=\"sk-1234567890abcdef...\"\n                        readOnly\n                        className=\"bg-white/5 border-white/20 text-white flex-1\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setShowApiKey(!showApiKey)}\n                        className=\"border-white/20 text-white hover:bg-white/10\"\n                      >\n                        {showApiKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"border-white/20 text-white hover:bg-white/10\"\n                      >\n                        <RefreshCw className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Notifications Settings */}\n            <TabsContent value=\"notifications\" className=\"space-y-6\">\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Bell className=\"w-5 h-5 text-yellow-400\" />\n                    Notification Preferences\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Choose what notifications you want to receive\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {[\n                    { key: 'emailNotifications', label: 'Email Notifications', description: 'Receive notifications via email' },\n                    { key: 'pushNotifications', label: 'Push Notifications', description: 'Receive browser push notifications' },\n                    { key: 'projectUpdates', label: 'Project Updates', description: 'Notifications for project changes' },\n                    { key: 'securityAlerts', label: 'Security Alerts', description: 'Important security notifications' }\n                  ].map((setting) => (\n                    <div key={setting.key} className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg border border-white/10\">\n                      <div>\n                        <Label className=\"text-white\">{setting.label}</Label>\n                        <p className=\"text-sm text-gray-400\">{setting.description}</p>\n                      </div>\n                      <Switch\n                        checked={settings[setting.key as keyof UserSettings] as boolean}\n                        onCheckedChange={(checked) => handleSettingChange(setting.key as keyof UserSettings, checked)}\n                      />\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Advanced Settings */}\n            <TabsContent value=\"advanced\" className=\"space-y-6\">\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5 text-purple-400\" />\n                    Advanced Features\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Experimental and advanced development features\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {[\n                    { key: 'aiAssistance', label: 'AI Code Assistance', description: 'Enable AI-powered code suggestions and help' },\n                    { key: 'gitAutoCommit', label: 'Git Auto Commit', description: 'Automatically commit changes periodically' },\n                    { key: 'debugMode', label: 'Debug Mode', description: 'Enable verbose logging and debug features' }\n                  ].map((setting) => (\n                    <div key={setting.key} className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg border border-white/10\">\n                      <div>\n                        <Label className=\"text-white\">{setting.label}</Label>\n                        <p className=\"text-sm text-gray-400\">{setting.description}</p>\n                      </div>\n                      <Switch\n                        checked={settings[setting.key as keyof UserSettings] as boolean}\n                        onCheckedChange={(checked) => handleSettingChange(setting.key as keyof UserSettings, checked)}\n                      />\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n              \n              {/* Data Management */}\n              <Card className=\"bg-black/40 backdrop-blur-xl border-white/10\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Database className=\"w-5 h-5 text-blue-400\" />\n                    Data Management\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">\n                    Export, import, or reset your data\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-3\">\n                    <Button variant=\"outline\" className=\"border-white/20 text-white hover:bg-white/10\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export Data\n                    </Button>\n                    <Button variant=\"outline\" className=\"border-white/20 text-white hover:bg-white/10\">\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Import Data\n                    </Button>\n                    <Button variant=\"outline\" className=\"border-red-500/30 text-red-400 hover:bg-red-500/10\">\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Reset All Settings\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":27497},"client/src/pages/starred.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport SpaceBackground from \"@/components/SpaceBackground\";\nimport Navigation from \"@/components/Navigation\";\nimport { \n  Search, \n  Star, \n  StarOff, \n  Folder, \n  Clock, \n  Code2, \n  GitBranch, \n  MoreVertical,\n  ExternalLink,\n  Edit3,\n  Trash2\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface StarredProject {\n  id: string;\n  name: string;\n  description: string;\n  language: string;\n  framework?: string;\n  status: 'active' | 'archived' | 'template';\n  lastAccessed: string;\n  createdAt: string;\n  updatedAt: string;\n  gitBranch?: string;\n  collaborators?: number;\n  starredAt: string;\n}\n\nexport default function Starred() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch starred projects\n  const { data: starredProjects = [], isLoading } = useQuery({\n    queryKey: ['/api/projects/starred', searchQuery],\n    queryFn: async () => {\n      let url = '/api/projects/starred';\n      if (searchQuery.trim()) {\n        url += `?search=${encodeURIComponent(searchQuery.trim())}`;\n      }\n      \n      // Mock data for now - in production this would fetch from API\n      return [\n        {\n          id: 'star1',\n          name: 'AI Chat Assistant',\n          description: 'Advanced chatbot with OpenAI integration, real-time responses, and conversation memory',\n          language: 'typescript',\n          framework: 'nextjs',\n          status: 'active',\n          lastAccessed: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 mins ago\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(), // 1 week ago\n          updatedAt: new Date(Date.now() - 1000 * 60 * 30).toISOString(),\n          gitBranch: 'feature/memory-system',\n          collaborators: 3,\n          starredAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString() // 2 days ago\n        },\n        {\n          id: 'star2',\n          name: 'E-commerce Platform',\n          description: 'Full-stack e-commerce solution with payments, inventory management, and admin dashboard',\n          language: 'typescript',\n          framework: 'react',\n          status: 'active',\n          lastAccessed: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 14).toISOString(), // 2 weeks ago\n          updatedAt: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),\n          gitBranch: 'main',\n          collaborators: 5,\n          starredAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5).toISOString() // 5 days ago\n        },\n        {\n          id: 'star3',\n          name: 'Data Analytics Dashboard',\n          description: 'Interactive dashboard with charts, real-time data visualization, and export features',\n          language: 'python',\n          framework: 'streamlit',\n          status: 'active',\n          lastAccessed: new Date(Date.now() - 1000 * 60 * 60 * 8).toISOString(), // 8 hours ago\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 21).toISOString(), // 3 weeks ago\n          updatedAt: new Date(Date.now() - 1000 * 60 * 60 * 8).toISOString(),\n          gitBranch: 'develop',\n          collaborators: 2,\n          starredAt: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString() // 1 day ago\n        },\n        {\n          id: 'star4',\n          name: 'Mobile Banking App',\n          description: 'Secure mobile banking application with biometric auth, transactions, and account management',\n          language: 'javascript',\n          framework: 'react-native',\n          status: 'active',\n          lastAccessed: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 day ago\n          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 30).toISOString(), // 1 month ago\n          updatedAt: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),\n          gitBranch: 'release/v2.1',\n          collaborators: 8,\n          starredAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10).toISOString() // 10 days ago\n        }\n      ].filter(project => {\n        if (!searchQuery.trim()) return true;\n        const query = searchQuery.toLowerCase();\n        return project.name.toLowerCase().includes(query) ||\n               project.description.toLowerCase().includes(query) ||\n               project.language.toLowerCase().includes(query) ||\n               (project.framework && project.framework.toLowerCase().includes(query));\n      });\n    }\n  });\n\n  // Remove star from project\n  const unstarProjectMutation = useMutation({\n    mutationFn: async (projectId: string) => {\n      await apiRequest('PATCH', `/api/projects/${projectId}`, {\n        body: JSON.stringify({ isStarred: false })\n      });\n    },\n    onSuccess: (_, projectId) => {\n      toast({\n        title: \"Removed from starred\",\n        description: \"Project has been removed from your starred list\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects/starred'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to unstar project\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleUnstarProject = (projectId: string, projectName: string) => {\n    if (window.confirm(`Remove \"${projectName}\" from your starred projects?`)) {\n      unstarProjectMutation.mutate(projectId);\n    }\n  };\n\n  const getLanguageColor = (language: string) => {\n    const colors: Record<string, string> = {\n      typescript: \"bg-blue-500/20 text-blue-300 border-blue-500/30\",\n      javascript: \"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\",\n      python: \"bg-green-500/20 text-green-300 border-green-500/30\",\n      java: \"bg-red-500/20 text-red-300 border-red-500/30\",\n      go: \"bg-cyan-500/20 text-cyan-300 border-cyan-500/30\",\n      rust: \"bg-orange-500/20 text-orange-300 border-orange-500/30\"\n    };\n    return colors[language.toLowerCase()] || \"bg-gray-500/20 text-gray-300 border-gray-500/30\";\n  };\n\n  return (\n    <div className=\"min-h-screen relative\">\n      <SpaceBackground />\n      <Navigation />\n      \n      <div className=\"ml-64 relative z-10\">\n        <div className=\"p-8\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-4xl font-bold text-white mb-2 flex items-center gap-3\">\n                <Star className=\"w-8 h-8 text-yellow-400 fill-yellow-400\" />\n                Starred Projects\n              </h1>\n              <p className=\"text-gray-400 text-lg\">\n                Quick access to your favorite and most important projects\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-2xl font-bold text-white\">{starredProjects.length}</p>\n              <p className=\"text-sm text-gray-400\">Starred Projects</p>\n            </div>\n          </div>\n\n          {/* Search */}\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-2xl border border-white/10 p-6 mb-8\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <Input\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                placeholder=\"Search your starred projects by name, language, or description...\"\n                className=\"pl-10 bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-yellow-500\"\n              />\n            </div>\n          </div>\n\n          {/* Starred Projects Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <Card key={i} className=\"bg-white/5 border-white/10 animate-pulse\">\n                  <CardHeader>\n                    <div className=\"w-full h-4 bg-white/10 rounded mb-2\"></div>\n                    <div className=\"w-2/3 h-3 bg-white/10 rounded\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"w-full h-12 bg-white/10 rounded mb-4\"></div>\n                    <div className=\"flex gap-2\">\n                      <div className=\"w-16 h-6 bg-white/10 rounded\"></div>\n                      <div className=\"w-20 h-6 bg-white/10 rounded\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : starredProjects.length ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {starredProjects.map((project) => (\n                <Card\n                  key={project.id}\n                  className=\"bg-black/40 backdrop-blur-xl border border-yellow-500/30 hover:border-yellow-400/50 transition-all duration-300 group hover:shadow-2xl hover:shadow-yellow-500/10 cursor-pointer relative overflow-hidden\"\n                  onClick={() => setLocation(`/ide/${project.id}`)}\n                >\n                  {/* Star indicator */}\n                  <div className=\"absolute top-4 right-4 z-10\">\n                    <Star className=\"w-5 h-5 text-yellow-400 fill-yellow-400\" />\n                  </div>\n                  \n                  <CardHeader>\n                    <div className=\"flex items-start justify-between pr-8\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-white text-lg mb-2 group-hover:text-yellow-300 transition-colors\">\n                          {project.name}\n                        </CardTitle>\n                        <CardDescription className=\"text-gray-400 text-sm line-clamp-2\">\n                          {project.description}\n                        </CardDescription>\n                      </div>\n                      \n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-white ml-2\">\n                            <MoreVertical className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent className=\"bg-black/80 backdrop-blur-xl border-white/10\">\n                          <DropdownMenuItem onClick={(e) => {\n                            e.stopPropagation();\n                            setLocation(`/ide/${project.id}`);\n                          }}>\n                            <ExternalLink className=\"w-4 h-4 mr-2\" />\n                            Open in IDE\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={(e) => e.stopPropagation()}>\n                            <Edit3 className=\"w-4 h-4 mr-2\" />\n                            Rename\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator className=\"bg-white/10\" />\n                          <DropdownMenuItem \n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleUnstarProject(project.id, project.name);\n                            }}\n                            className=\"text-yellow-400 focus:text-yellow-300\"\n                          >\n                            <StarOff className=\"w-4 h-4 mr-2\" />\n                            Remove from starred\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                    \n                    {/* Project Stats */}\n                    <div className=\"flex items-center gap-4 mt-3 text-xs text-gray-500\">\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"w-3 h-3\" />\n                        {formatDistanceToNow(new Date(project.lastAccessed), { addSuffix: true })}\n                      </div>\n                      {project.gitBranch && (\n                        <div className=\"flex items-center gap-1\">\n                          <GitBranch className=\"w-3 h-3\" />\n                          {project.gitBranch}\n                        </div>\n                      )}\n                      {project.collaborators && project.collaborators > 1 && (\n                        <div className=\"flex items-center gap-1\">\n                          <span>{project.collaborators} collaborators</span>\n                        </div>\n                      )}\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    {/* Tags */}\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      <Badge className={`text-xs ${getLanguageColor(project.language)}`}>\n                        {project.language}\n                      </Badge>\n                      {project.framework && (\n                        <Badge variant=\"outline\" className=\"text-xs border-white/20 text-gray-400\">\n                          {project.framework}\n                        </Badge>\n                      )}\n                      <Badge variant=\"outline\" className=\"text-xs border-white/20 text-gray-400\">\n                        {project.status}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center text-xs text-gray-500\">\n                      <div>\n                        Created {formatDistanceToNow(new Date(project.createdAt), { addSuffix: true })}\n                      </div>\n                      <div>\n                        ⭐ {formatDistanceToNow(new Date(project.starredAt), { addSuffix: true })}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-yellow-500/20 to-orange-500/20 rounded-2xl flex items-center justify-center mx-auto mb-6 border border-yellow-500/20\">\n                <Star className=\"w-10 h-10 text-yellow-400\" />\n              </div>\n              <h3 className=\"text-2xl font-semibold mb-3 text-white\">\n                {searchQuery ? \"No starred projects found\" : \"No starred projects yet\"}\n              </h3>\n              <p className=\"text-gray-400 mb-8 max-w-md mx-auto leading-relaxed\">\n                {searchQuery\n                  ? `No starred projects match \"${searchQuery}\". Try adjusting your search terms.`\n                  : \"Star your favorite projects for quick access. Click the star icon on any project to add it here.\"}\n              </p>\n              <div className=\"flex gap-4 justify-center\">\n                {searchQuery && (\n                  <Button\n                    onClick={() => setSearchQuery(\"\")}\n                    variant=\"outline\"\n                    className=\"border-white/20 text-white hover:bg-white/10\"\n                  >\n                    Clear Search\n                  </Button>\n                )}\n                <Button\n                  onClick={() => setLocation('/projects')}\n                  className=\"bg-gradient-to-r from-yellow-600 to-orange-600 hover:from-yellow-700 hover:to-orange-700 text-white\"\n                >\n                  <Folder className=\"w-4 h-4 mr-2\" />\n                  Browse All Projects\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16443},"client/src/pages/templates.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport SpaceBackground from \"@/components/SpaceBackground\";\nimport Navigation from \"@/components/Navigation\";\nimport { Search, Code2, Download, Star, Eye, GitFork, Zap } from \"lucide-react\";\n\ninterface Template {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  tags: string[];\n  author: string;\n  downloads: number;\n  stars: number;\n  previewUrl?: string;\n  repositoryUrl?: string;\n  filesJson: { path: string; content: string }[];\n  dependencies: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst TEMPLATE_CATEGORIES = [\n  { id: 'all', name: 'All Templates', icon: Code2 },\n  { id: 'web', name: 'Web Apps', icon: Code2 },\n  { id: 'api', name: 'APIs & Backend', icon: Zap },\n  { id: 'mobile', name: 'Mobile', icon: Code2 },\n  { id: 'ai', name: 'AI & ML', icon: Zap },\n  { id: 'game', name: 'Games', icon: Code2 },\n  { id: 'utility', name: 'Utilities', icon: Code2 },\n];\n\nexport default function Templates() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch templates\n  const { data: templates, isLoading } = useQuery({\n    queryKey: ['/api/templates', selectedCategory, searchQuery],\n    queryFn: async () => {\n      let url = '/api/templates';\n      const params = new URLSearchParams();\n      \n      if (selectedCategory !== 'all') {\n        params.set('category', selectedCategory);\n      }\n      if (searchQuery.trim()) {\n        params.set('search', searchQuery.trim());\n      }\n      \n      if (params.toString()) {\n        url += `?${params.toString()}`;\n      }\n      \n      const response = await apiRequest('GET', url);\n      return response.json();\n    }\n  });\n\n  // Create project from template\n  const createFromTemplateMutation = useMutation({\n    mutationFn: async (templateId: string) => {\n      const response = await apiRequest('POST', `/api/templates/${templateId}/create-project`);\n      return response.json();\n    },\n    onSuccess: (project) => {\n      toast({\n        title: \"Project created from template\",\n        description: `${project.name} has been created successfully`\n      });\n      setLocation(`/ide/${project.id}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create project\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleCreateFromTemplate = (templateId: string) => {\n    createFromTemplateMutation.mutate(templateId);\n  };\n\n  // Debounced search\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      queryClient.invalidateQueries({ queryKey: ['/api/templates'] });\n    }, 300);\n    \n    return () => clearTimeout(timer);\n  }, [searchQuery, queryClient]);\n\n  return (\n    <div className=\"min-h-screen relative\">\n      <SpaceBackground />\n      <Navigation />\n      \n      <div className=\"ml-64 relative z-10\">\n        <div className=\"p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-white mb-2\">Project Templates</h1>\n            <p className=\"text-gray-400 text-lg\">\n              Start your project with professionally crafted templates\n            </p>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"bg-black/20 backdrop-blur-xl rounded-2xl border border-white/10 p-6 mb-8\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              {/* Search */}\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                <Input\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search templates by name, technology, or use case...\"\n                  className=\"pl-10 bg-white/5 border-white/20 text-white placeholder-gray-400 focus:border-blue-500\"\n                />\n              </div>\n              \n              {/* Category Pills */}\n              <div className=\"flex flex-wrap gap-2\">\n                {TEMPLATE_CATEGORIES.map((category) => {\n                  const Icon = category.icon;\n                  return (\n                    <Button\n                      key={category.id}\n                      variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setSelectedCategory(category.id)}\n                      className={\n                        selectedCategory === category.id\n                          ? \"bg-gradient-to-r from-blue-600 to-purple-600 text-white border-0\"\n                          : \"border-white/20 text-white hover:bg-white/10 bg-transparent\"\n                      }\n                    >\n                      <Icon className=\"w-4 h-4 mr-2\" />\n                      {category.name}\n                    </Button>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n\n          {/* Templates Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Array.from({ length: 9 }).map((_, i) => (\n                <Card key={i} className=\"bg-white/5 border-white/10 animate-pulse\">\n                  <CardHeader>\n                    <div className=\"w-full h-4 bg-white/10 rounded mb-2\"></div>\n                    <div className=\"w-2/3 h-3 bg-white/10 rounded\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"w-full h-20 bg-white/10 rounded mb-4\"></div>\n                    <div className=\"flex gap-2\">\n                      <div className=\"w-16 h-6 bg-white/10 rounded\"></div>\n                      <div className=\"w-20 h-6 bg-white/10 rounded\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : templates?.length ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {templates.map((template: Template) => (\n                <Card\n                  key={template.id}\n                  data-testid=\"template-card\"\n                  className=\"bg-black/40 backdrop-blur-xl border-white/10 hover:border-blue-500/50 transition-all duration-300 group hover:shadow-2xl hover:shadow-blue-500/10\"\n                >\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-white text-lg mb-2 group-hover:text-blue-300 transition-colors\">\n                          {template.name}\n                        </CardTitle>\n                        <CardDescription className=\"text-gray-400 text-sm line-clamp-2\">\n                          {template.description}\n                        </CardDescription>\n                      </div>\n                    </div>\n                    \n                    {/* Stats */}\n                    <div className=\"flex items-center gap-4 mt-3 text-xs text-gray-500\">\n                      <div className=\"flex items-center gap-1\">\n                        <Download className=\"w-3 h-3\" />\n                        {template.downloads}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"w-3 h-3\" />\n                        {template.stars}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Eye className=\"w-3 h-3\" />\n                        {template.author}\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    {/* Tags */}\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      <Badge className=\"bg-blue-500/20 text-blue-300 border-blue-500/30 text-xs\">\n                        {template.category}\n                      </Badge>\n                      {template.tags.slice(0, 3).map((tag) => (\n                        <Badge key={tag} variant=\"outline\" className=\"text-xs border-white/20 text-gray-400\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    {/* Actions */}\n                    <div className=\"flex gap-2\">\n                      <Button\n                        onClick={() => handleCreateFromTemplate(template.id)}\n                        disabled={createFromTemplateMutation.isPending}\n                        className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white text-sm\"\n                      >\n                        <Code2 className=\"w-4 h-4 mr-2\" />\n                        {createFromTemplateMutation.isPending ? \"Creating...\" : \"Use Template\"}\n                      </Button>\n                      \n                      {template.previewUrl && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => window.open(template.previewUrl, '_blank')}\n                          className=\"border-white/20 text-white hover:bg-white/10\"\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                      \n                      {template.repositoryUrl && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => window.open(template.repositoryUrl, '_blank')}\n                          className=\"border-white/20 text-white hover:bg-white/10\"\n                        >\n                          <GitFork className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-2xl flex items-center justify-center mx-auto mb-6 border border-blue-500/20\">\n                <Search className=\"w-10 h-10 text-blue-400\" />\n              </div>\n              <h3 className=\"text-2xl font-semibold mb-3 text-white\">No templates found</h3>\n              <p className=\"text-gray-400 mb-8 max-w-md mx-auto leading-relaxed\">\n                {searchQuery\n                  ? `No templates match \"${searchQuery}\". Try adjusting your search terms.`\n                  : \"No templates available in this category.\"}\n              </p>\n              {searchQuery && (\n                <Button\n                  onClick={() => {\n                    setSearchQuery(\"\");\n                    setSelectedCategory(\"all\");\n                  }}\n                  variant=\"outline\"\n                  className=\"border-white/20 text-white hover:bg-white/10\"\n                >\n                  Clear Search\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11920},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}